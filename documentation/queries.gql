mutation DeleteUserClips($input: DeleteUserClipsInput!) {
  deleteUserClips(input: $input) {
    userID
  }
}
query TeamsDashboard_SettingsTeam($teamName: String!) {
  team(name: $teamName) {
    id
    name
    displayName
    description
    logoID
    logoURL
    bannerID
    bannerURL
    backgroundImageID
    backgroundImageURL
  }
}
query QuickActions_MomentClipDownload($slug: ID!) {
  clip(slug: $slug) {
    id
    playbackAccessToken(params: {platform: "web", playerType: "clips-download"}) {
      signature
      value
    }
    videoQualities {
      sourceURL
    }
  }
}
query SearchStreams($userQuery: String!) {
  searchStreams(userQuery: $userQuery) {
    edges {
      ...SearchStreamEdgeFragment
    }
  }
}

fragment SearchStreamEdgeFragment on SearchStreamEdge {
  node {
    id
    game {
      id
      name
    }
    broadcaster {
      id
      login
      displayName
      profileImageURL(width: 50)
    }
    viewersCount
    previewImageURL(width: 320, height: 180)
  }
}
query TeamsDashboard_TeamMembers($teamName: String!, $cursor: Cursor, $limit: Int = 10) {
  team(name: $teamName) {
    id
    members(first: $limit, after: $cursor) {
      pageInfo {
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          login
          displayName
          profileImageURL(width: 70)
        }
      }
    }
  }
}
query ChannelAnalyticsTimeStreamedTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      timeStreamed {
        value
        timestamp
      }
    }
  }
}
fragment AdRequestGame on Game {
  id
  name
  tags(tagType: CONTENT) {
    ...AdRequestTag
  }
}
query VideoPlayer_ChapterSelectButtonVideo($videoID: ID, $includePrivate: Boolean = false) {
  video(id: $videoID, options: {includePrivate: $includePrivate}) {
    id
    moments(momentRequestType: VIDEO_CHAPTER_MARKERS, types: [GAME_CHANGE, HEARTHSTONE_VCA, OVERWATCH_VCA, PUBG_VCA]) {
      edges {
        ...VideoPlayerVideoMomentEdge
      }
    }
  }
}

fragment VideoPlayerVideoMomentEdge on VideoMomentEdge {
  node {
    moments {
      edges {
        ...VideoPlayerVideoMomentConnection
      }
    }
    ...VideoPlayerVideoMoment
  }
}

fragment VideoPlayerVideoMomentConnection on VideoMomentEdge {
  node {
    ...VideoPlayerVideoMoment
  }
}

fragment VideoPlayerVideoMoment on VideoMoment {
  id
  durationMilliseconds
  positionMilliseconds
  type
  description
  subDescription
  thumbnailURL
  details {
    ...VideoPlayerGameChangeDetails
  }
  video {
    id
    lengthSeconds
  }
}

fragment VideoPlayerGameChangeDetails on GameChangeMomentDetails {
  game {
    id
    displayName
    boxArtURL(width: 40, height: 53)
  }
}
query BountyBoardCTAGameName($id: ID) {
  game(id: $id) {
    id
    displayName
  }
}
query SupportPanelFooterPrimeStatus($login: String!) {
  requestInfo {
    countryCode
  }
  currentUser {
    id
    hasPrime
  }
  user(login: $login) {
    id
    self {
      canPrimeSubscribe
      primeSubCreditBenefit {
        renewalDate
        willRenew
      }
    }
  }
}
fragment creatorArtistFragment on User {
  id
  login
  displayName
  bannerImageURL
  profileImageURL(width: 28)
  settings {
    visibility
  }
  stream {
    id
    type
  }
}
fragment ShelfPreviewCardClip on Clip {
  id
  slug
  clipTitle: title
  clipViewCount: viewCount
  curator {
    id
    login
    displayName
  }
  clipGame: game {
    id
    name
    boxArtURL(width: 52, height: 72)
  }
  broadcaster {
    id
    login
    displayName
    profileImageURL(width: 50)
    primaryColorHex
  }
  thumbnailURL
  createdAt
  durationSeconds
  isFeatured
}
mutation UnlockChosenSubscriberEmote($input: UnlockChosenSubscriberEmoteInput!) {
  unlockChosenSubscriberEmote(input: $input) {
    balance
    error {
      code
    }
  }
}
mutation TestAlert($input: TestAlertInput!) {
  testAlert(input: $input) {
    error
  }
}
mutation DenyCaughtAutoModMessage($input: DenyRejectedChatMessageInput!) {
  denyRejectedChatMessage(input: $input) {
    message {
      id
    }
  }
}
mutation ChatAdAlert_SetChannelAdSchedule($input: SetChannelAdScheduleInput!) {
  setChannelAdSchedule(input: $input) {
    targetChannelID
    isChatReminderEnabled
  }
}
query Whispers_Tracking_Read($threadID: ID!) {
  currentUser {
    id
    login
  }
  whisperThread(id: $threadID) {
    id
    participants {
      id
      login
      self {
        whisperPermissions {
          receive
        }
      }
    }
  }
}
query FollowPanelOverlay($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    displayName
    login
    self {
      follower {
        node {
          id
        }
        disableNotifications
      }
    }
  }
}
fragment threadData on WhisperThread {
  id
  userLastMessageRead {
    id
    sentAt
    __typename
  }
  participants {
    id
    chatColor
    displayName
    profileImageURL(width: 70)
    login
    displayBadges {
      id
      title
      imageURL
    }
    self {
      whisperPermissions {
        receive
        isStrangerBlocked
      }
    }
    __typename
  }
  spamInfo {
    lastMarkedNotSpamAt
    likelihood
    __typename
  }
  isMuted
  isArchived
  messages(first: 20, after: $cursor) {
    edges {
      cursor
      node {
        id
        nonce
        content {
          content
          emotes {
            id
            emoteID
            setID
            from
            to
            __typename
          }
          __typename
        }
        from {
          id
          __typename
        }
        sentAt
        editedAt
        deletedAt
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
  unreadMessagesCount
}
query ChannelAnalyticsCSVExporter($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      adBreaksInSeconds {
        value
        timestamp
      }
      adTimePerHour {
        value
        timestamp
      }
      averageViewers {
        value
        timestamp
      }
      chatMessages {
        value
        timestamp
      }
      clipViews {
        value
        timestamp
      }
      clipsCreated {
        value
        timestamp
      }
      featuredClipViews {
        value
        timestamp
      }
      follows {
        value
        timestamp
      }
      hostRaidViewers {
        value
        timestamp
      }
      liveViews {
        value
        timestamp
      }
      maxViewers {
        value
        timestamp
      }
      minutesWatched {
        value
        timestamp
      }
      timeStreamed {
        value
        timestamp
      }
      unfeaturedClipViews {
        value
        timestamp
      }
      uniqueChatters {
        value
        timestamp
      }
      uniqueViewers {
        value
        timestamp
      }
      uniqueEngaged {
        value
        timestamp
      }
      uniqueNewEngaged {
        value
        timestamp
      }
      uniqueReturningEngaged {
        value
        timestamp
      }
    }
  }
}
query ModCommentsAndSharedModComments($channelID: ID!, $targetID: ID!, $cursor: Cursor) {
  viewerCardModLogs: viewerCardModLogs(channelID: $channelID, targetID: $targetID) {
    comments(first: 100, after: $cursor) {
      ... on ModLogsCommentConnection {
        edges {
          node {
            id
          }
        }
      }
      ... on ModLogsCommentsError {
        code
      }
      __typename
    }
    sharedComments(first: 100, after: $cursor) {
      ... on SharedModLogsCommentConnection {
        edges {
          node {
            id
          }
        }
      }
      ... on SharedModLogsCommentsError {
        code
      }
      __typename
    }
  }
}
query CreatorCollaborationChannelData($channelID: ID!, $targetChannelID: ID!) {
  user(id: $channelID) {
    id
    relationship(targetUserID: $targetChannelID) {
      followedAt
      followedByAt
      subscriptionBenefit {
        id
        gift {
          isGift
        }
      }
      subscriptionTenure(tenureMethod: CUMULATIVE) {
        months
        daysRemaining
        elapsedDays
      }
      raidHistory {
        source {
          timesRaided
          lastRaidedAt
          peakRaiders
        }
        target {
          timesRaided
          lastRaidedAt
          peakRaiders
        }
      }
    }
  }
  targetChannel: user(id: $targetChannelID) {
    id
    channel {
      id
      schedule {
        id
        segmentList(first: 1) {
          edges {
            node {
              id
              startAt
              endAt
            }
          }
        }
      }
    }
    stream {
      id
      createdAt
      contentClassificationLabels {
        id
        localizedName
      }
    }
  }
}
query ViewTermsPage_CurrentUser {
  currentUser {
    id
    payoutPlans {
      category
      isReceivingRevenue
      tags
    }
    onboardingInvitations {
      payout {
        id
        category
        workflow {
          id
          currentStep
        }
        isLegacy
      }
    }
    programAgreement(invitationType: PAYOUT) {
      body
      startDate
      endDate
    }
  }
}
query CurrentUserBannedStatus($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    self {
      banStatus {
        isPermanent
        expiresAt
        expiresInMs
        reason
      }
    }
  }
}
query TeamsDashboard_Members($teamName: String!, $cursor: Cursor) {
  team(name: $teamName) {
    id
    membersByMetricsFilter(first: 100, after: $cursor, metricsRevealedFilter: STATS) {
      edges {
        cursor
        node {
          displayName
          id
          login
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
query SubsSettingsSection_Query($login: String!, $channelID: ID!) {
  user(login: $login) {
    id
    roles {
      isAffiliate
      isPartner
    }
    subscriptionProducts {
      id
      hasAdFree
      hasFastChat
      hasSubonlyVideoArchive
      hasSubOnlyChat
    }
    payoutPlans {
      tags
    }
  }
  premiumWithCap: premiumWithCap(channelID: $channelID) {
    programType
  }
}
fragment bitsOffer on BitsOffer {
  ... on BitsAdOffer {
    ...bitsAdOffer
  }
  ... on BitsBundleOffer {
    ...bitsBundleOffer
  }
}
query VODMidrollManager($vodID: ID!, $collectionID: ID!, $isVOD: Boolean!, $isCollection: Boolean!) {
  video(id: $vodID) @include(if: $isVOD) {
    id
    broadcastType
    owner {
      ...VODMidrollManagerBroadcaster
    }
  }
  collection(id: $collectionID) @include(if: $isCollection) {
    id
    items(first: 1) {
      edges {
        node {
          ... on Video {
            id
            broadcastType
          }
        }
      }
    }
    owner {
      ...VODMidrollManagerBroadcaster
    }
  }
}

fragment VODMidrollManagerBroadcaster on User {
  id
  adProperties {
    ...VODMidrollManagerAdProperties
  }
}

fragment VODMidrollManagerAdProperties on AdProperties {
  hasVodAdsEnabled
  vodArchiveMidrolls
  vodArchiveMidrollsBreakLength
  vodArchiveMidrollsFrequency
}
query chatRaidChannelIDs($sourceID: String!, $targetID: String!) {
  source: user(login: $sourceID) {
    id
  }
  target: user(login: $targetID) {
    id
  }
}
query VideoPlayer_AgeGateOverlayBroadcaster($input: UserByAttribute!) {
  userByAttribute(input: $input) {
    id
    login
    adProperties {
      requiredAge
    }
  }
}
fragment charityOffer on Offer {
  id
  eligibility {
    isEligible
    reasonCode
  }
  tagBindings {
    key
    value
  }
  listing {
    chargeModel {
      internal {
        previewPrice {
          id
          currency
          exponent
          productPricing {
            ... on RangedPricing {
              minimum
              maximum
              presetAmounts {
                amountList
                defaultAmount
              }
            }
          }
        }
      }
    }
  }
}
query DevExtensionVersionsGetManifests($id: ID!, $after: Cursor) {
  extensionManifests(id: $id, after: $after) {
    edges {
      cursor
      node {
        id
        version
        developerManifest {
          createdAt
          versionState
        }
        discoveryManifest {
          name
        }
        views {
          component {
            viewerPath
          }
          mobile {
            viewerPath
          }
          videoOverlay {
            viewerPath
          }
          panel {
            viewerPath
          }
        }
      }
    }
    pageInfo {
      hasPreviousPage
      hasNextPage
    }
  }
}
query ChatRoomBanStatus($targetUserID: ID!, $channelID: ID!) {
  chatRoomBanStatus(channelID: $channelID, userID: $targetUserID) {
    bannedUser {
      id
      login
      displayName
    }
    createdAt
    expiresAt
    isPermanent
    moderator {
      id
      login
      displayName
    }
    reason
  }
  targetUser: user(id: $targetUserID, lookupType: ALL) {
    id
    login
  }
}
mutation Threads_MarkAllWhispersAsRead($input: UpdateAllWhisperThreadsInput!) {
  updateAllWhisperThreads(input: $input) {
    count
  }
}
query AccessGetFeatureClipRestrictionsQuery($channelLogin: String) {
  user(login: $channelLogin) {
    id
    channel {
      id
      clipsSettings {
        featuringRestrictedTo {
          shouldAllowMods
        }
      }
    }
  }
}
query StreamerAdsManager_QueryAdProperties($login: String!) {
  user(login: $login) {
    id
    adProperties {
      frequency
      lastTriggeredAt
      density {
        isAdScheduleEnabled
        adSchedule {
          runAtTime
          durationSeconds
        }
        snooze {
          currentAmount
          maxAmount
          refreshAt
          durationSeconds
        }
        interval {
          desiredSeconds
        }
        duration {
          desiredSeconds
        }
        startDelay {
          desiredSeconds
        }
        reminder {
          isEnabled
          seconds
        }
        isInPartnerRevshareProgram
      }
    }
  }
}
query ClipViewsTimeseriesStats_StreamSummary($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      granularity
      clipViews {
        value
        timestamp
      }
    }
    creatorMetricsByInterval(startAt: $startAt, endAt: $endAt, numberOfIntervals: 1) {
      items {
        clipViewsString
      }
    }
  }
}
mutation ExtensionManagementPage_CreatePanel($input: CreatePanelInput!) {
  createPanel(input: $input) {
    panel {
      id
      type
      ... on ExtensionPanel {
        slotID
      }
    }
  }
}
query EmotesForChannelFollowStatus($channelID: ID!) {
  user(id: $channelID) {
    id
    self {
      follower {
        followedAt
      }
    }
  }
}
query VideoChatChannelAndCommentCreatorAndVideoTrackingContext($videoCreatorID: ID!, $commentCreator: ID!, $videoID: ID) {
  users(ids: [$videoCreatorID, $commentCreator]) {
    id
    login
  }
  video(id: $videoID) {
    id
    broadcastType
    title
    game {
      id
      name
    }
  }
}
query TeamsDashboard_AdBreaksInSeconds($teamName: String!, $teamMembers: [ID!], $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timezone: String!) {
  team(name: $teamName) {
    id
    creatorTimeseriesMetrics(startAt: $startAt, endAt: $endAt, channelIDs: $teamMembers, granularity: $granularity, timeZone: $timezone) {
      metric: adBreaksInSeconds {
        items {
          timestamp
          value
        }
        total
      }
    }
  }
}
query ChannelPoll_GetUserStatus($channelID: ID!) {
  channel: user(id: $channelID) {
    id
    login
    displayName
    self {
      banStatus {
        isPermanent
      }
    }
  }
}
mutation UpdateCoPoCustomRewardStatus($input: UpdateCommunityPointsCustomRewardRedemptionStatusInput!) {
  updateCommunityPointsCustomRewardRedemptionStatus(input: $input) {
    redemption {
      id
      input
      status
      reward {
        id
      }
    }
  }
}
query VideoPlayerSettingsWithClipMetadata($slug: ID!, $isCommunityMomentsFeatureEnabled: Boolean!) {
  clip(slug: $slug) {
    id
    broadcaster {
      id
    }
    curator {
      id
    }
    communityMoment @include(if: $isCommunityMomentsFeatureEnabled) {
      id
    }
  }
  currentUser {
    id
    roles {
      isSiteAdmin
    }
  }
}
query ChatFilterContextManager_User {
  currentUser {
    id
    createdAt
  }
}
mutation SetEmoteAnimationsSettingCalloutDismissed($input: SetEmoteAnimationsSettingCalloutDismissedInput!) {
  setEmoteAnimationsSettingCalloutDismissed(input: $input) {
    isEmoteAnimationsSettingCalloutDismissed
  }
}
mutation chatCreateRaid($input: CreateRaidInput!) {
  createRaid(input: $input) {
    error {
      code
    }
    raid {
      id
    }
    notices {
      isMature
      hasRestrictedChat
    }
  }
}
query RecentlyStreamedCategories($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    channel {
      id
      home {
        shelves {
          categoryShelfSuggestions {
            edges {
              isHidden
              node {
                id
                boxArtURL(width: 144, height: 192)
                displayName
              }
            }
          }
        }
      }
    }
  }
}
query EmoteAnalytics_ChannelAnalytics($channelID: ID!, $startAt: Time!, $endAt: Time!, $usageType: EmoteUsageType!, $sortBy: EmoteUsageSort, $sortOrder: SortOrder, $emoteGroupProductTypes: [EmoteGroupProductType!], $emoteGroupAssetTypes: [EmoteGroupAssetType!]) {
  channelEmoteUsage(input: {channelID: $channelID, emoteGroupAssetTypes: $emoteGroupAssetTypes, emoteGroupProductTypes: $emoteGroupProductTypes, endAt: $endAt, sortBy: $sortBy, sortOrder: $sortOrder, startAt: $startAt, usageType: $usageType}) {
    ...channelEmoteUsage
  }
}

fragment channelEmoteUsage on EmoteUsage {
  id
  emote {
    id
    suffix
    token
  }
  emoteGroup {
    id
    assetType
    productType
  }
  totalUsage
  uniqueUsers
}
mutation DropsHighlightService_ClaimDropRewards($input: ClaimDropRewardsInput!) {
  claimDropRewards(input: $input) {
    status
    isUserAccountConnected
  }
}
mutation DeclineOrganizationInvite($input: DeclineOrganizationInviteInput!) {
  declineOrganizationInvite(input: $input) {
    error {
      code
    }
  }
}
query CreateMomentModal_CreatorColor($broadcasterID: ID!) {
  user(id: $broadcasterID) {
    id
    primaryColorHex
  }
}
mutation ClipsTitleEdit_UpdateClip($input: UpdateClipInput!) {
  updateClip(input: $input) {
    clip {
      id
      title
    }
    error {
      message
    }
  }
}
mutation CreateStreamSchedule($input: CreateScheduleInput!) {
  createSchedule(input: $input) {
    channel {
      id
      schedule {
        id
      }
    }
    error
  }
}
mutation AdsSettingsSection_UnselectAdIncentiveOffer($input: UnselectAdIncentiveOfferInput!) {
  unselectAdIncentiveOffer(input: $input) {
    error {
      code
    }
  }
}
mutation VideoPlayer_FollowButtonFollowUser($input: FollowUserInput!) {
  followUser(input: $input) {
    follow {
      disableNotifications
      user {
        id
        self {
          follower {
            node {
              id
            }
            disableNotifications
            followedAt
            notificationSettings {
              isEnabled
            }
          }
        }
      }
    }
  }
}
mutation UpdatePaidPinnedChatSettings($input: UpdatePaidPinnedChatSettingsInput!) {
  updatePaidPinnedChatSettings(input: $input) {
    updatedSettings {
      minimumLevel
    }
  }
}
mutation AllowCaughtAutoModMessage($input: AllowRejectedChatMessageInput!) {
  allowRejectedChatMessage(input: $input) {
    message {
      id
    }
  }
}
query ExtensionsUIContext_ChannelID($channelLogin: String) {
  user(login: $channelLogin) {
    id
  }
}
mutation CoreUtilsSetLanguagePreference($input: SetPreferredLanguageTagInput!) {
  setPreferredLanguageTag(input: $input) {
    user {
      id
      settings {
        preferredLanguageTag
      }
    }
  }
}
query CommunityTab($login: String!) {
  user(login: $login) {
    id
    channel {
      id
      name
      chatters {
        broadcasters {
          login
        }
        moderators {
          login
        }
        vips {
          login
        }
        staff {
          login
        }
        viewers {
          login
        }
        count
      }
    }
    subscriptionProducts {
      id
      self {
        canGiftInChannel
      }
    }
    isPartner
    stream {
      id
      title
      game {
        id
        name
      }
    }
  }
}
query CollectionTopBar($collectionID: ID!) {
  collection(id: $collectionID) {
    id
    title
    items(first: 100) {
      totalCount
      edges {
        node {
          __typename
          ... on Video {
            id
          }
        }
      }
    }
  }
}
query AccessIsChannelEditorQuery($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    self {
      isEditor
    }
  }
}
query UserImageUploader($login: String!) {
  user(login: $login) {
    id
    login
    bannerImageURL
    offlineImageURL
  }
}
query Settings_ContentAccessSettings {
  currentUser {
    id
    channel {
      id
      vodSettings {
        isUnviewable
        unviewableExpirationTime
        publishSettings {
          wasDisabled
          disableReason
          lastDisableTime
          isDisableOptOut
        }
      }
    }
  }
}
query CollectionList_CollectionsWithVideoID($channelID: ID!, $videoID: ID!) {
  user(id: $channelID) {
    id
    collections(first: 100, options: {withVideoID: $videoID}) {
      edges {
        node {
          id
        }
      }
    }
  }
}
query Chat_ShareResub_ChannelData($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    self {
      resubNotification {
        id
        cumulativeTenureMonths
        months
        streakTenureMonths
        token
        isGiftSubscription
        gifter {
          id
          login
          displayName
        }
      }
    }
  }
}
query VideoPlayerStreamMetadata($channel: String) {
  user(login: $channel) {
    id
    stream {
      id
      isEncrypted
    }
  }
}
fragment squadStreamWidgetMember on User {
  id
  login
  displayName
  profileImageURL(width: 150)
}
query LastUnbanRequest($channelID: ID!, $includeCanRequestUnban: Boolean!) {
  channel(id: $channelID) {
    id
    self {
      canRequestUnban @include(if: $includeCanRequestUnban)
      lastUnbanRequest {
        id
        status
        createdAt
        resolverMessage
      }
      unbanRequestRestriction @include(if: $includeCanRequestUnban)
    }
  }
}
query Snackbar_AdProperties($login: String!) {
  user(login: $login) {
    id
    adProperties {
      density {
        adSchedule {
          runAtTime
          durationSeconds
        }
        snooze {
          currentAmount
          maxAmount
          refreshAt
          durationSeconds
        }
        reminder {
          isEnabled
          seconds
          isChatReminderEnabled
        }
        isAdScheduleEnabled
      }
    }
  }
}
query ViewsTileQuery($login: String!, $startAt: Time!, $endAt: Time!) {
  user(login: $login) {
    id
    creatorMetricsByInterval(startAt: $startAt, endAt: $endAt, numberOfIntervals: 1) {
      items {
        liveViewsString
      }
    }
  }
}
fragment communityPointsBalanceFragment on User {
  channel {
    id
    self {
      communityPoints {
        balance
        activeMultipliers {
          reasonCode
          factor
        }
        canRedeemRewardsForFree
      }
    }
  }
}
fragment thread on WhisperThread {
  messages(first: 20) {
    edges {
      cursor
      node {
        id
        nonce
        content {
          content
          emotes {
            id
            emoteID
            setID
            from
            to
          }
        }
        deletedAt
        editedAt
        sentAt
        from {
          id
        }
      }
    }
  }
  unreadMessagesCount
  userLastMessageRead {
    id
    sentAt
  }
}
mutation VideoManagerActions_CreateVideoThumbnailUploadRequest($input: CreateVideoThumbnailUploadRequestInput!) {
  createVideoThumbnailUploadRequest(input: $input) {
    url
  }
}
query DropsHighlightService_AvailableDrops($channelID: ID!) {
  channel(id: $channelID) {
    id
    viewerDropCampaigns {
      id
      name
      game {
        id
        name
      }
      detailsURL
      endAt
      imageURL
      eventBasedDrops {
        ...DropsHighlightService_EventBasedDrop
      }
      timeBasedDrops {
        ...DropsHighlightService_TimeBasedDrop
      }
    }
  }
}

fragment DropsHighlightService_EventBasedDrop on EventBasedDrop {
  id
  name
  startAt
  endAt
  claimDurationSeconds
  benefitEdges {
    benefit {
      id
      name
      game {
        name
        id
      }
      imageAssetURL
    }
    entitlementLimit
  }
  missionName
}

fragment DropsHighlightService_TimeBasedDrop on TimeBasedDrop {
  id
  name
  startAt
  endAt
  benefitEdges {
    benefit {
      id
      name
      game {
        name
        id
      }
      imageAssetURL
    }
    entitlementLimit
  }
  requiredMinutesWatched
}
mutation BlockUser($input: BlockUserInput!) {
  blockUser(input: $input) {
    targetUser {
      id
    }
  }
}
query StreamPreviewStreamQuery($login: String!, $width: Int!, $height: Int!) {
  user(login: $login) {
    id
    broadcastSettings {
      id
      title
      game {
        id
        boxArtURL(width: $width, height: $height)
        displayName
        name
      }
    }
  }
}
query UserMenuCurrentUser {
  currentUser {
    id
    availability
    profileImageURL(width: 70)
    settings {
      isSharingActivity
      visibility
    }
  }
}
fragment hostReadAdsActivity on SponsoredActivity {
  name
  state
  isPrimary
  activation {
    id
    isEnabledOnstart
  }
  activationProgression
  progress {
    current
    target
  }
  ... on HostReadAd {
    advertiserName
    script
    talkingPoints
  }
  ... on ChannelSkin {
    advertiser {
      ...channelSkinAdvertiser
    }
  }
}

fragment hostReadAdsCampaignInstance on CampaignInstance {
  id
  activities {
    ...hostReadAdsActivity
  }
}

fragment channelSkinAdvertiser on Advertiser {
  name
  ctaMessage
  ctaURL
  imageAsset {
    lightModeURL
    darkModeURL
  }
  iconBackgroundColorHexCode
}

query HostReadAdsCampaigns {
  sponsorshipCampaignInstances(query: {state: ACTIVE}) {
    ...hostReadAdsCampaignInstance
  }
}
mutation AdFormatTracking_RecordAdEvent($input: RecordAdEventInput!) {
  recordAdEvent(input: $input) {
    error {
      code
    }
  }
}
mutation AcceptOrganizationInvite($input: AcceptOrganizationInviteInput!) {
  acceptOrganizationInvite(input: $input) {
    error {
      code
    }
  }
}
mutation Dashboard_OptOut {
  optOutFromCensus {
    isSuccess
  }
}
query VideoPreviewCard__VideoMoments($videoId: ID!) {
  video(id: $videoId) {
    id
    moments(momentRequestType: VIDEO_CHAPTER_MARKERS) {
      edges {
        ...videoMomentEdge
      }
    }
  }
}

fragment videoMomentEdge on VideoMomentEdge {
  cursor
  node {
    ...videoChapter
  }
}

fragment videoChapter on VideoMoment {
  id
  durationMilliseconds
  positionMilliseconds
  type
  description
  thumbnailURL
  ...momentDetails
  video {
    id
    lengthSeconds
  }
}

fragment momentDetails on VideoMoment {
  details {
    ...gameChangeDetails
    ...hearthstoneDetails
    ...overwatchDetails
    ...pubgDetails
  }
}

fragment gameChangeDetails on GameChangeMomentDetails {
  game {
    id
    displayName
    boxArtURL(width: 40, height: 53)
  }
}

fragment hearthstoneDetails on HearthstoneMomentDetails {
  broadcasterHero {
    id
    class
    name
  }
  opponentHero {
    id
    class
    name
  }
  gameMode {
    type
    value
  }
}

fragment overwatchDetails on OverwatchMomentDetails {
  role
  heroName
}

fragment pubgDetails on PUBGMomentDetails {
  maxPlayerCount
  minPlayerCount
}
query DashboardSettingsPage {
  currentUser {
    id
  }
}
query AvailableEmotesForChannelPaginated($channelID: ID!, $withOwner: Boolean!, $pageLimit: Int!, $cursor: Cursor) {
  channel(id: $channelID) {
    id
    self {
      availableEmoteSetsPaginated(pageLimit: $pageLimit, after: $cursor) {
        edges {
          ...EmoteSetsEdgeFragment
        }
        pageInfo {
          hasNextPage
        }
      }
    }
  }
}

fragment EmoteSetsEdgeFragment on EmoteSetsEdge {
  cursor
  node {
    id
    emotes {
      id
      setID
      token
      modifiers {
        code
        name
      }
      type
    }
    owner @include(if: $withOwner) {
      id
      login
      displayName
      profileImageURL(width: 28)
    }
  }
}
query QuickActionEmoteOnlyChatQuery($login: String!) {
  user(login: $login) {
    id
    chatSettings {
      isEmoteOnlyModeEnabled
    }
  }
}
query SpotlightGoLiveNotificationPreviewQuery($login: String!) {
  user(login: $login) {
    id
    broadcastSettings {
      id
      liveUpNotificationInfo {
        isDefault
        liveUpNotification
      }
    }
  }
}
query VideoPlayerStreamInfoOverlayVOD($videoID: ID) {
  video(id: $videoID) {
    id
    title
    owner {
      id
      login
      displayName
      profileImageURL(width: 150)
    }
    contentTags {
      id
      localizedName
    }
  }
}
query UserModStatus($userID: ID!, $channelID: String!) {
  user(id: $userID) {
    id
    login
    isModerator(channelID: $channelID)
  }
}
query CreateMomentHeader_ClipStatus($slug: ID!) {
  clip(slug: $slug) {
    id
    creationState
  }
}
query ChannelPointsSettingsName($login: String) {
  user(login: $login) {
    id
    channel {
      id
      communityPointsSettings {
        name
      }
    }
  }
}
query GiftSubscribeButton_Gift_Eligibility($recipientLogin: String, $subProductId: String!) {
  user(login: $recipientLogin) {
    id
    self {
      canGift(product: $subProductId)
    }
  }
}
fragment hypeTrainCalloutEmote on Emote {
  id
  token
}
query CollectionCreator_CurrentUser {
  currentUser {
    id
  }
}
mutation InviteOnlyExtensionsPage_InstallExtension($input: InstallExtensionInput!) {
  installExtension(input: $input) {
    installedExtension {
      id
      extension {
        id
        clientID
        version
      }
    }
  }
}
query UseCreatorHomeActionDataQuery($userID: ID!) {
  user(id: $userID) {
    id
    description
    displayName
    primaryColorHex
    profileImageURL(width: 300)
    installedExtensions {
      id
      extension {
        id
      }
    }
    channel {
      id
      socialMedias {
        id
        url
        name
        title
      }
      home {
        preferences {
          heroPreset
        }
      }
    }
  }
}
query CheerSettingsForm_GetBitsOnboardedSettings($login: String!) {
  user(login: $login) {
    id
    settings {
      cheer {
        id
        hasSignedBitsAmendment
        isOnboarded
      }
    }
  }
}
mutation acceptTermsOfServiceContract($input: AcceptSponsorshipTermsOfServiceInput!) {
  acceptSponsorshipTermsOfService(input: $input) {
    error {
      code
    }
  }
}
mutation PrimeSubscribe_SpendPrimeSubscriptionCredit($input: SpendSubscriptionCreditInput!) {
  spendSubscriptionCredit(input: $input) {
    userID
    subscriptionBenefit {
      id
      purchasedWithPrime
      tier
      platform
      endsAt
    }
    error {
      code
    }
  }
}
mutation RemoveViewerFromRTJQueue($input: RemoveViewerFromRTJQueueInput!) {
  removeViewerFromRTJQueue(input: $input) {
    error {
      code
    }
  }
}
query ExtensionDetailsPage($extensionID: ID!, $extensionVersion: String, $isLoggedIn: Boolean!) {
  currentUser @include(if: $isLoggedIn) {
    id
    cheer {
      id
    }
    installedExtensions {
      id
      extension {
        id
      }
    }
  }
  extension(id: $extensionID, version: $extensionVersion) {
    id
    authorName
    clientID
    description
    iconURLs {
      square100
    }
    hasChatSupport
    isBitsEnabled
    bitsSupportLevel
    name
    privacyPolicyURL
    screenshotURLs
    self {
      canInstall
    }
    sku
    state
    summary
    supportEmail
    termsURL
    vendorCode
    version
    categories {
      id
      name
    }
    views {
      component {
        viewerURL
      }
      hidden {
        viewerURL
      }
      mobile {
        viewerURL
      }
      panel {
        viewerURL
      }
      videoOverlay {
        viewerURL
      }
    }
  }
}
query VideoAccessToken_Clip($slug: ID!) {
  clip(slug: $slug) {
    id
    playbackAccessToken(params: {platform: "web", playerType: "clips-viewing"}) {
      signature
      value
    }
    videoQualities {
      ...videoAccessToken_ClipQuality
    }
  }
}

fragment videoAccessToken_ClipQuality on ClipVideoQuality {
  frameRate
  quality
  sourceURL
}
mutation BulkApproveUnbanRequests($input: BulkApproveUnbanRequestInput!) {
  bulkApproveUnbanRequest(input: $input) {
    unbanRequests {
      id
      status
    }
    error {
      code
    }
  }
}
query QuickActionsContext_ExtensionsQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    installedExtensions {
      id
      activationConfig {
        state
      }
      extension {
        id
        views {
          liveConfig {
            viewerURL
          }
        }
      }
    }
  }
}
fragment pollSettings on PollSettings {
  communityPointsVotes {
    ...pollSettingsCommunityPointsVotes
  }
  id
  multichoice {
    ...pollSettingsMultichoice
  }
}

fragment pollSettingsCommunityPointsVotes on PollSettingsCommunityPointsVotes {
  cost
  isEnabled
}

fragment pollSettingsMultichoice on PollSettingsMultichoice {
  isEnabled
}
query Ads_Components_AdManager_User {
  currentUser {
    id
    hasTurbo
  }
}
query ExtensionInstallationOAuthModal {
  currentUser {
    id
    installedExtensions {
      id
      extension {
        ...extensionInstallationOAuthModalExtension
      }
    }
  }
}

fragment extensionInstallationOAuthModalExtension on Extension {
  id
  clientID
}
query VerticalsUpcomingSchedules($categoryID: ID!, $options: FeaturedUpcomingStreamsOptions!) {
  featuredUpcomingStreams(categoryID: $categoryID, limit: 3, options: $options) {
    nodes {
      id
      reminderCount
      segment {
        id
        title
        baseSegmentID
        repeatEndsAfterCount
        channel {
          id
          name
          owner {
            id
            profileImageURL(width: 150)
            bannerImageURL
            primaryColorHex
            login
            tags {
              id
              localizedName
            }
          }
          stream {
            id
            viewersCount
          }
        }
        startAt
        endAt
        hasReminder
        isCancelled
      }
    }
  }
}
query StreamingToolsClientAuthorization {
  currentUser {
    id
    clientAuthorizations {
      clientID
      scopes
    }
  }
}
mutation SetBitsUserSettings($input: SetBitsUserSettingsInput!) {
  setBitsUserSettings(input: $input) {
    currentUser {
      id
      bitsUserSettings {
        ...bitsUserSettings
      }
    }
  }
}
fragment videoMetadataUser on User {
  id
}

fragment videoMetadataVideo on Video {
  id
  title
  description
  previewThumbnailURL(height: 60, width: 90)
  createdAt
  viewCount
  publishedAt
  lengthSeconds
  broadcastType
  owner {
    id
    login
    displayName
  }
  game {
    id
    slug
    boxArtURL
    name
    displayName
  }
}

query VideoMetadata($channelLogin: String!, $videoID: ID!) {
  user(login: $channelLogin) {
    id
    primaryColorHex
    isPartner
    profileImageURL(width: 70)
    lastBroadcast {
      id
      startedAt
    }
  }
  currentUser {
    ...videoMetadataUser
  }
  video(id: $videoID) {
    ...videoMetadataVideo
  }
}
fragment multiviewContentAttribute on MultiviewContentAttribute {
  id
  key
  name
  parentID
  parentKey
  value
  valueShortName
  imageURL
  createdAt
  updatedAt
  childIDs
}
query SubscribedContext($id: ID, $login: String) {
  user(id: $id, login: $login) {
    id
    self {
      subscriptionBenefit {
        id
      }
    }
  }
}
query AdBreaksInSecondsTimeseriesStats_StreamSummary($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      granularity
      adBreaksInSeconds {
        value
        timestamp
      }
    }
    creatorMetricsByInterval(startAt: $startAt, endAt: $endAt, numberOfIntervals: 1) {
      items {
        adBreaksInSecondsString
      }
    }
  }
}
mutation SetAlertFiltersMutation($input: UpdateActivityFeedAlertSettingsInput!) {
  updateActivityFeedAlertSettings(input: $input) {
    settings {
      isDNDModeEnabled
      categories {
        id
        isIgnored
      }
    }
    error
  }
}
mutation BulkUpdateRedemptions_Channel($input: UpdateCommunityPointsCustomRewardRedemptionStatusesByChannelInput!) {
  updateCommunityPointsCustomRewardRedemptionStatusesByChannel(input: $input) {
    error {
      code
    }
  }
}
query FollowersTileQuery($login: String!) {
  user(login: $login) {
    id
    followers {
      totalCount
    }
  }
}
mutation SetReminder($input: SetScheduleReminderInput!) {
  setScheduleReminder(input: $input) {
    error {
      code
    }
    isEnabled
  }
}
query AchievementsPage($channelID: ID!) {
  achievementsPage(channelID: $channelID) {
    achievements {
      ... on Achievement {
        id
        levels {
          ... on AchievementLevel {
            id
            goal {
              __typename
              ... on AchievementGoalInt {
                goalInt: goal
                currentInt: current
              }
              ... on AchievementGoalFloat {
                goalFloat: goal
                currentFloat: current
              }
              ... on AchievementGoalString {
                goalString: goal
                currentString: current
              }
            }
            completedAt
          }
        }
        image
        imageSm
        image2x
        image3x
      }
    }
  }
}
query BanEvasionDetectionPreviewLink($channelID: ID) {
  channel(id: $channelID) {
    id
    moderationSettings {
      banEvasionDetection {
        ... on BanEvasionDetectionSettings {
          isEnabled
          possibleTreatment
          likelyTreatment
        }
        ... on BanEvasionDetectionSettingsError {
          code
        }
      }
    }
  }
}
query ClipsTitleEdit_CommunityMoment($slug: ID!) {
  clip(slug: $slug) {
    id
    communityMoment {
      id
      claimCount
      createdAt
    }
  }
}
mutation DeleteVideoComment($commentID: ID!) {
  deleteVideoComment(commentID: $commentID) {
    __typename
  }
}
fragment communityPointsUserFragment on User {
  id
  self {
    subscriptionBenefit {
      id
    }
    isModerator
  }
}
fragment bitsBundleOffer on BitsBundleOffer {
  id
  type
  bits
  amount
  discount
  isPromo
  url
  includesVAT
  currencyCode
  promotion {
    ...bitsBundleOfferPromotion
  }
}
query UseDragAndDropLayoutsQuery($channelLogin: String!, $type: ChannelDashboardViewType!, $isStreamManagerMosaicLayout: Boolean!, $isTwitchStudioMosaicLayout: Boolean!) {
  channel(name: $channelLogin) {
    id
    dashboardView(type: $type) {
      layouts {
        ... on StreamManagerMosaicLayout @include(if: $isStreamManagerMosaicLayout) {
          data
          id
          name
          version
        }
        ... on TwitchStudioMosaicLayout @include(if: $isTwitchStudioMosaicLayout) {
          data
          id
          name
          version
        }
      }
      options {
        customLayoutsTotal
        customLayoutsUsed
      }
    }
  }
}
query OfflineStreamerInformation($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    displayName
    videos(first: 1) {
      edges {
        node {
          id
          publishedAt
          game {
            id
            name
          }
        }
      }
    }
  }
}
mutation unpinChatMessage($input: UnpinChatMessageInput!) {
  unpinChatMessage(input: $input) {
    unpinnedChatMessage {
      id
      pinnedMessage {
        id
      }
    }
    error {
      code
    }
  }
}
query ClipsCurator($slug: ID!) {
  clip(slug: $slug) {
    id
    curator {
      id
      displayName
      login
    }
    champBadge {
      id
    }
  }
}
query SubBadgeDescription($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    self {
      follower {
        followedAt
      }
    }
  }
}
fragment followedChannelsWidgetUser on User {
  id
  displayName
  login
  profileImageURL(width: 70)
  self {
    isModerator
  }
  broadcastSettings {
    id
    title
    game {
      id
      displayName
    }
  }
  stream {
    id
    viewersCount
  }
}
query GuestStarCostreamingEarlyAccessSettings($userID: ID!) {
  guestStarCostreamingEarlyAccessSettings(userID: $userID) {
    status
  }
}
query ViewMSAPartnerRevshare {
  currentUser {
    id
    login
    payoutPlans {
      category
      isReceivingRevenue
      tags
    }
    adProperties {
      density {
        targetAdMinutesForRevenueShare
      }
    }
  }
}
query AccessIsExtensionsDeveloperQuery($channelLogin: String!, $isChannelLoginSameAsUserLogin: Boolean!) {
  user(login: $channelLogin) {
    id
    payoutInvite @include(if: $isChannelLoginSameAsUserLogin) {
      id
      category
    }
  }
}
fragment channelHomeSocialMedia on SocialMedia {
  id
  name
  title
  url
}
query StreamerAdsManagerPanelAdProperties_Query($login: String!) {
  user(login: $login) {
    id
    adProperties {
      density {
        isAdScheduleEnabled
      }
    }
  }
  channel: user(login: $login) {
    id
    roles {
      isAffiliate
      isPartner
    }
  }
}
mutation VideoManagerActions_UpdateVideosScope($input: UpdateVideosViewabilityInput!) {
  updateVideosViewability(input: $input) {
    error {
      code
    }
  }
}
query FollowButton_User($login: String!) {
  user(login: $login) {
    id
    displayName
    ...followButtonFragment
  }
}
mutation CreateRaid($input: CreateRaidInput!) {
  createRaid(input: $input) {
    raid {
      id
    }
    error {
      code
    }
  }
}
query ClipsModalDeleteAll_Clip($slug: ID!) {
  clip(slug: $slug) {
    id
    video {
      id
    }
    broadcast {
      id
    }
  }
}
fragment followButtonFragment on User {
  id
  displayName
  login
  self {
    canFollow
    follower {
      disableNotifications
      followedAt
    }
  }
}
query AccessIsStreamDelayEnabledQuery($channelLogin: String!) {
  channel(name: $channelLogin) {
    id
    videoStreamSettings {
      isDelayEnabled
    }
  }
}
query QuickActions_HostChannelControl_HostRecommendations($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    hostRecommendations {
      ...HostRecommendationsFragment
    }
  }
}

fragment HostRecommendationsFragment on User {
  id
  login
  displayName
  profileImageURL(width: 50)
  stream {
    id
    viewersCount
    previewImageURL(width: 320, height: 180)
    game {
      id
      displayName
    }
  }
}
query ConcurrentViewersTimeseriesStats_StreamSummary($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      granularity
      averageViewers {
        value
        timestamp
      }
    }
  }
}
query getHourlyViewersReportQuery($input: HourlyViewersReportInput!) {
  hourlyViewersReport(input: $input) {
    report {
      recentCategories {
        categories {
          id
          details {
            id
            displayName
            name
            originalReleaseDate
            slug
          }
          timeStamp
          isInvalidForSuggestions
        }
        language
      }
      categoryDetails {
        id
        displayName
        name
        ... on Game {
          slug
        }
      }
      hourlyViewers {
        hourlyHeatMap {
          dayOfWeek
          hourOfDay
          averageConcurrentUsers
          weeklyProportion
          averageViewers
          averageBroadcasters
        }
        dataStatus
        releaseStatus
        error
      }
      language
      filteredLanguages
    }
    error
  }
}
query AccessIsSquadStreamsEnabledQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    squadStreamSettings {
      canAccessSquads
    }
  }
}
mutation ChatSettings_DeselectBadgeModifier($input: UpdateUserSubscriptionSettingsInput!) {
  updateUserSubscriptionSettings(input: $input) {
    subscriptionSettings {
      isBadgeModifierHidden
    }
  }
}
mutation placeOrder($input: PlaceOrderInput!) {
  placeOrder(input: $input) {
    orderInformation
    error {
      code
    }
  }
}
fragment contentClipsManagerClip on Clip {
  id
  slug
  url
  embedURL
  title
  viewCount
  language
  isFeatured
  curator {
    id
    login
    displayName
  }
  game {
    id
    name
    boxArtURL(width: 52, height: 72)
    displayName
  }
  broadcast {
    id
  }
  broadcaster {
    id
    login
    displayName
    profileImageURL(width: 50)
    self {
      isEditor
    }
  }
  thumbnailURL
  createdAt
  isFeatured
  isPublished
  durationSeconds
  champBadge {
    id
  }
  playbackAccessToken(params: {platform: "web", playerType: "clips-download"}) {
    signature
    value
  }
  video {
    id
    broadcastType
    title
  }
  videoOffsetSeconds
  videoQualities {
    sourceURL
  }
}
query ScheduleEditor($channelLogin: String!, $startingWeekday: String, $utcOffsetMinutes: Int) {
  user(login: $channelLogin) {
    id
    channel {
      id
      schedule {
        id
        interruption {
          endAt
          reason
          startAt
        }
        segments(startingWeekday: $startingWeekday, utcOffsetMinutes: $utcOffsetMinutes, includeFutureSegments: true) {
          categories {
            id
            boxArtURL(width: 144, height: 192)
            displayName
            name
          }
          endAt
          id
          isCancelled
          startAt
          title
          cancelledUntil
          reminderCount
          repeatEndsAfterCount
          firstOccurrenceDate
        }
      }
    }
    roles {
      ...userRoles
    }
  }
}

fragment userRoles on UserRoles {
  isStaff
  isPartner
  isAffiliate
}
query GQLLoadingPage {
  currentUser {
    id
    login
  }
}
query AccessIsChannelPointsAvailableQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    channel {
      id
      communityPointsSettings {
        isAvailable
      }
    }
  }
}
query ChannelAnalyticsClipsCreatedTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      clipsCreated {
        value
        timestamp
      }
    }
  }
}
query CommunityOnboardingAllowlist($channelID: ID!) {
  communityOnboarding {
    channelAllowLists(channelID: $channelID) {
      experimentName
    }
  }
}
query StreamMetadata($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    primaryColorHex
    isPartner
    profileImageURL(width: 70)
    primaryTeam {
      id
      name
      displayName
    }
    squadStream {
      id
      members {
        id
      }
      status
    }
    channel {
      id
      chanlets {
        id
      }
    }
    lastBroadcast {
      id
      title
    }
    stream {
      id
      type
      createdAt
      game {
        id
        slug
        name
      }
    }
  }
}
fragment orgMemberEdge on OrganizationMemberEdge {
  cursor
  joinedAt
  node {
    id
    firstName
    lastName
    role
    title
    email
    user {
      id
      displayName
      login
      profileImageURL(width: 50)
    }
  }
}

fragment orgInviteEdge on OrganizationInviteEdge {
  cursor
  node {
    id
    inviter {
      id
      displayName
    }
    invitee {
      id
      displayName
      login
      profileImageURL(width: 50)
    }
    role
    createdAt
    expiresAt
  }
}

query DevOrgMembers($orgID: ID!, $membFirst: Int, $membAfter: Cursor, $inviteFirst: Int, $inviteAfter: Cursor) {
  organization(id: $orgID) {
    id
    members(first: $membFirst, after: $membAfter) {
      totalCount
      edges {
        ...orgMemberEdge
      }
      pageInfo {
        hasNextPage
      }
    }
    invites(first: $inviteFirst, after: $inviteAfter) {
      totalCount
      edges {
        ...orgInviteEdge
      }
      pageInfo {
        hasNextPage
      }
    }
    self {
      canAddMember
      canRemoveMember
      canLeaveOrganization
    }
  }
}
query UseGetChannelDisplayNameQuery($userID: ID!) {
  user(id: $userID) {
    displayName
    id
  }
}
query GetOauthAppByID($id: ID!) {
  oauthAppByID(id: $id) {
    id
    name
    createdAt
    updatedAt
    redirectURI
    otherDescription
    groupID
    owner {
      id
    }
    secret
    willTokensExpire
    redirectURIs
    category
    isPublic
  }
}
mutation VideoManagerActions_UpdateVideo($input: UpdateVideoInput!) {
  updateVideo(input: $input) {
    video {
      id
      scope
      title
      description
      previewThumbnailURL
      game {
        id
        name
      }
      language
    }
  }
}
query ClipsTitle($slug: ID!) {
  clip(slug: $slug) {
    id
    title
  }
}
query ChannelAnalytics_NotificationsEngagements($channelName: String!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $numberOfIntervals: Int!, $timeZone: String!) {
  user(login: $channelName) {
    id
    goLiveNotificationsTimeseries(startAt: $startAt, endAt: $endAt, granularity: $granularity, numberOfIntervals: $numberOfIntervals, timeZone: $timeZone) {
      total
    }
  }
}
query SquadStreamSettings($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    squadStreamSettings {
      incomingInvitePolicy
      canAccessSquads
    }
  }
}
mutation OnboardingFollowGame($id: ID!) {
  followGame(input: {gameID: $id}) {
    game {
      id
    }
  }
}
query ModViewFeedbackQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    displayName
    profileImageURL(width: 50)
  }
  currentUser {
    id
    profileImageURL(width: 50)
    displayName
    login
  }
}
mutation DropsPage_UpdateDropsOptOut($input: UpdateDropsOptOutStatusInput!) {
  updateDropsOptOutStatus(input: $input) {
    isOptedOut
    userID
  }
}
mutation UpdatePhoneNumber($input: UpdatePhoneNumberInput!) {
  updatePhoneNumber(input: $input) {
    error {
      code
      message
    }
  }
}
query ReportMenuItem($channelLogin: String!) {
  requestInfo {
    countryCode
  }
  user(login: $channelLogin) {
    id
    stream {
      id
      createdAt
    }
  }
}
mutation DeleteSchedule($input: DeleteScheduleInput!) {
  deleteSchedule(input: $input) {
    error
    channel {
      id
    }
  }
}
fragment charity on Charity {
  id
  name
  description
  logoURL
  location {
    country
  }
}
query VerifyEmail_CurrentUser {
  currentUser {
    id
    hasPrime
    displayName
    email
    isEmailVerified
  }
  requestInfo {
    countryCode
  }
}
mutation WatchParty_UpdateLWAToken($input: UpdateLWATokenInput!) {
  updateLWAToken(input: $input) {
    error {
      ...watchPartyError
    }
    token {
      accessToken
      expiresIn
      refreshToken
    }
  }
}
query Settings_CopyrightAudioDetectionSettings {
  currentUser {
    id
    channel {
      id
      vodSettings {
        publishSettings {
          isDisableOptOut
        }
      }
    }
  }
}
query SupportPanelTitleSectionUserInfo($login: String!) {
  user(login: $login) {
    id
    displayName
    description
    lastBroadcast {
      id
      game {
        id
        displayName
      }
    }
    videos(first: 30, sort: TIME, type: ARCHIVE) {
      edges {
        ...userBioVideo
      }
    }
  }
}

fragment userBioVideo on VideoEdge {
  node {
    id
    game {
      id
      displayName
    }
    status
  }
}
query DashboardSettingsAutohostSettings($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    autohostSettings {
      enabled
      strategy
    }
  }
}
query StreamTogetherAllowlistStatus($channelID: ID!) {
  guestStarFavoriteGuests(channelID: $channelID, first: 0, after: "") {
    status
  }
}
query AccessIsSiteAdminQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    roles {
      isSiteAdmin
    }
  }
}
query AdsManagerAccessQuery($channelOwnerID: ID, $channelLogin: String) {
  user(id: $channelOwnerID, login: $channelLogin) {
    id
    roles {
      isPartner
      isAffiliate
    }
    adProperties {
      density {
        isAdScheduleEnabled
      }
    }
  }
}
query CharityRoot($channelLogin: String!) {
  channel(name: $channelLogin) {
    id
    charityCampaigns {
      edges {
        node {
          id
        }
      }
    }
  }
  requestInfo {
    countryCode
  }
}
fragment moderatorComment on ModLogsComment {
  id
  timestamp
  text
  channel {
    id
    login
    primaryColorHex
  }
  author {
    id
    login
    displayName
    chatColor
  }
  isShareable
}
query QuestionAndAnswerAccentColor($login: String!) {
  user(login: $login) {
    id
    primaryColorHex
  }
}
mutation UpdatePinnedChatMessage($input: UpdatePinnedChatMessageInput!) {
  updatePinnedChatMessage(input: $input) {
    updatedChatMessage {
      id
      pinnedMessage {
        id
      }
    }
    error {
      code
    }
  }
}
mutation RemoveGuestStarMod($input: RemoveGuestStarModeratorInput!) {
  removeGuestStarModerator(input: $input) {
    error {
      code
    }
  }
}
mutation CreateVideoBookmark($input: CreateVideoBookmarkInput!) {
  createVideoBookmark(input: $input) {
    videoBookmark {
      id
    }
    error {
      code
    }
  }
}
mutation UnlockRandomSubscriberEmote($input: UnlockRandomSubscriberEmoteInput!) {
  unlockRandomSubscriberEmote(input: $input) {
    balance
    emote {
      id
      token
    }
    error {
      code
    }
  }
}
mutation DeveloperBadgeToggle($input: UpdateOrganizationBadgeStatusInput!) {
  updateOrganizationBadgeStatus(input: $input) {
    organization {
      id
      isBadgesEnabled
    }
  }
}
fragment whisperThreadsMessageEdge on WhisperMessageEdge {
  cursor
  node {
    id
    nonce
    sentAt
    editedAt
    deletedAt
    from {
      id
      __typename
    }
    content {
      content
      emotes {
        id
        emoteID
        setID
        from
        to
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}
mutation UpdateDropinRequestStatus($input: UpdateGuestStarDropInStatusInput!) {
  updateGuestStarDropInStatus(input: $input) {
    error {
      code
    }
    session {
      id
      host {
        id
        login
      }
    }
  }
}
mutation CollectionCreator_AddCollectionItem($input: AddCollectionItemInput!) {
  addCollectionItem(input: $input) {
    collection {
      id
      thumbnailURL(width: 80, height: 45)
      lengthSeconds
    }
  }
}
query UseStreamHealthQuery($channelID: ID!, $secondsAgo: Int!, $includeDetails: Boolean!) {
  videoIngestSessionLatest(channelID: $channelID, secondsAgo: $secondsAgo) {
    ...streamHealthSession
  }
  currentUser {
    id
  }
}

fragment streamHealthStarvationEvent on IngestStarvationEvent {
  startedAt
  durationSeconds
}

fragment streamHealthSession on VideoIngestSession {
  id
  bitrates @include(if: $includeDetails) {
    valueKbps
    recordedAt
  }
  framerates @include(if: $includeDetails) {
    valueFPS
    recordedAt
  }
  starvationEvents @include(if: $includeDetails) {
    ...streamHealthStarvationEvent
  }
  ingestSession {
    streamUpAt
    streamDownAt
  }
  streamHealth {
    status
    reasons
  }
}
fragment sharedBanChannel on Channel {
  id
  name
  displayName
}
mutation FollowGameButton_UnfollowGame($input: UnfollowGameInput!) {
  unfollowGame(input: $input) {
    follow {
      followedAt
    }
  }
}
query TileAdPermissionsQuery($login: String!) {
  user(login: $login) {
    id
    roles {
      isPartner
      isAffiliate
    }
  }
}
query PreviewContentOverlayQuery($channel: String) {
  user(login: $channel) {
    id
    stream {
      id
      previewImageURL(width: 285, height: 160)
    }
    subscriptionProducts {
      id
      name
      tier
    }
    self {
      canPrimeSubscribe
      subscriptionBenefit {
        id
      }
    }
  }
}
query ProductConsent {
  currentUser {
    id
    createdAt
    productConsent {
      ... on ProductConsentError {
        code
      }
      ... on UserConsent {
        ...userConsent
      }
    }
  }
}
fragment eligiblePaymentMethodFragment on EligiblePaymentMethod {
  name
  availabilityStatus
}
query ViewerFeedback_Creator($channelID: ID, $channelLogin: String) {
  creator: user(id: $channelID, login: $channelLogin) {
    ...creatorFragment
  }
}

fragment creatorFragment on User {
  id
  displayName
  description
  login
  profileImageURL(width: 150)
  primaryColorHex
  roles {
    isAffiliate
    isPartner
  }
}
query ChatSettings_ChannelModes($login: String!) {
  channel: user(login: $login) {
    id
    roles {
      isPartner
      isAffiliate
    }
  }
}
query SwitcherClipsCards__Game($categorySlug: String!, $limit: Int, $cursor: Cursor, $criteria: GameClipsInput) {
  game(slug: $categorySlug) {
    id
    clips(first: $limit, after: $cursor, criteria: $criteria) {
      pageInfo {
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          slug
          url
          title
          viewCount
          language
          curator {
            id
            login
            displayName
          }
          game {
            id
            name
            categorySlug: slug
          }
          broadcaster {
            id
            login
            displayName
            profileImageURL(width: 50)
            primaryColorHex
            roles {
              isPartner
            }
          }
          thumbnailURL
          createdAt
          durationSeconds
        }
      }
    }
  }
}
fragment orgApp on OrganizationApplication {
  organizationName
  status
}

query PendingOrganizationApplications {
  pendingOrganizationApplications {
    ...orgApp
  }
}
query ExtensionPanelAuthoredExtensions {
  extensionClients {
    edges {
      node {
        id
      }
    }
  }
}
query SunlightChannelQuery($login: String!) {
  user(login: $login) {
    id
  }
}
mutation GuestStarRequestDropIn($input: SetGuestStarActiveDropInInput!) {
  setGuestStarActiveDropIn(input: $input) {
    error {
      code
    }
    dropIn {
      host {
        id
      }
      requestStatus
    }
  }
}
query RequestToJoinAcceptedServiceSession($channelID: ID!) {
  channel(id: $channelID) {
    id
    guestStarSessionCall {
      id
      guests {
        id
        user {
          id
        }
      }
    }
  }
}
mutation RemoveFavorite($input: RemoveUserFromGuestStarFavoritesInput!) {
  removeUserFromGuestStarFavorites(input: $input) {
    error {
      code
    }
  }
}
fragment watchPartyItemEpisodeDetails on EpisodeDetails {
  durationSeconds
  episode
  season
  series
}
mutation UnBanUserFromChat($input: UnbanUserFromChatRoomInput!) {
  unbanUserFromChatRoom(input: $input) {
    ban {
      bannedUser {
        id
        login
      }
      createdAt
      moderator {
        id
        displayName
      }
    }
    error {
      code
    }
  }
}
mutation Chat_ShareResub_UseResubToken($input: UseChatNotificationTokenInput!) {
  useChatNotificationToken(input: $input) {
    isSuccess
  }
}
mutation QuickActions_CreateMomentClip($input: CreateClipInput!) {
  createClip(input: $input) {
    clip {
      id
      title
      url
      slug
    }
    error {
      code
    }
  }
}
mutation AcknowledgeUnbanRequest($input: AcknowledgeUnbanRequestInput!) {
  acknowledgeUnbanRequest(input: $input) {
    unbanRequest {
      id
      status
    }
    error {
      code
    }
  }
}
mutation UpdateCustomBannerPreference($input: UpdateChannelHomePreferencesInput!) {
  updateChannelHomePreferences(input: $input) {
    channel {
      id
      home {
        preferences {
          heroPreset
        }
      }
    }
  }
}
fragment coreChannelFragment on User {
  ...coreUserFragment
  channel {
    id
    self {
      isAuthorized
      restrictionType
    }
    trailer {
      video {
        id
        self {
          viewingHistory {
            updatedAt
          }
        }
      }
    }
  }
}
query Channel_Analytics_Revenue($startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity, $channelID: ID!) {
  revenues(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone, channelID: $channelID) {
    ...revenueDashboardFragment
  }
}

fragment revenueDashboardFragment on RevenueDashboard {
  revenueTimeSeries {
    ...revenueTimeSeriesItemFragment
  }
  revenuePanel {
    ...revenuePanelFragment
  }
  totalRevenue
  error
}

fragment revenuePanelFragment on RevenueProductLines {
  primeSubscriptions
  ads
  adPolls
  bountyBoard
  bits
  gameCommerce
  extensions
  experimental
  polls
  hypeChat
  soundBites
  sponsorships
  turbo
  total
  paidSubscriptions {
    ...subscriptionsRevenueAggregateFragment
  }
  giftSubscriptions {
    ...subscriptionsRevenueAggregateFragment
  }
  multiMonthGiftSubs {
    ...subscriptionsRevenueAggregateFragment
  }
}

fragment revenueTimeSeriesItemFragment on RevenueTimeseriesItem {
  timestamp
  twitchSubscriptions
  primeSubscriptions
  giftSubscriptions
  multiMonthSubscriptions
  bits
  ads
  gameCommerce
  extensions
  bountyBoard
  experimental
  adPolls
  polls
  hypeChat
  soundBites
  sponsorships
  turbo
  total
}

fragment subscriptionsRevenueAggregateFragment on SubscriptionRevenueAggregate {
  total
  tierOneSubs {
    ...revenueAmountBySubscriptionFragment
  }
  tierTwoSubs {
    ...revenueAmountBySubscriptionFragment
  }
  tierThreeSubs {
    ...revenueAmountBySubscriptionFragment
  }
}

fragment revenueAmountBySubscriptionFragment on RevenueAmountBySubscription {
  subCount
  value
}
fragment alertViewerSoundFragment on AlertViewerSound {
  id
  url
  volume
  isMuted
  assetType
  assetMimeType
  name
}
fragment VideoMutedSegment on VideoMutedSegment {
  duration
  offset
}

query VideoPlayer_VODSeekbar($vodID: ID, $includePrivate: Boolean = false) {
  video(id: $vodID, options: {includePrivate: $includePrivate}) {
    id
    lengthSeconds
    muteInfo {
      mutedSegmentConnection {
        nodes {
          ...VideoMutedSegment
        }
      }
    }
  }
}
query ChannelLeaderboards($channelID: ID!, $first: Int = 10) {
  user(id: $channelID) {
    id
    login
    channel {
      id
      leaderboardTimePeriod
      leaderboardSet(first: $first) {
        bits {
          ...channelLeaderboard
        }
        subGift {
          ...channelLeaderboard
        }
      }
    }
    cheer {
      id
      settings {
        id
        cheerMinimumBits
      }
    }
    subscriptionProducts {
      ...channelLeaderboardSubscriptionProduct
    }
  }
  currentUser {
    id
  }
  badges {
    ...badge
  }
}
query GuestStarActiveDropIn {
  guestStarActiveDropIn {
    host {
      id
    }
    requestStatus
  }
}
query WithIsStreamLiveQuery($id: ID!) {
  user(id: $id) {
    id
    stream {
      id
      createdAt
    }
  }
}
query FeatureClips_FeatureSettings($channelLogin: String) {
  user(login: $channelLogin) {
    id
    channel {
      id
      clipsSettings {
        isClipsFeatureToggleDefaultEnabled
        featuringRestrictedTo {
          shouldAllowMods
        }
      }
    }
  }
}
mutation PublishClip($input: PublishClipInput!) {
  publishClip(input: $input) {
    clip {
      id
      title
      slug
    }
    error {
      message
    }
  }
}
mutation UpdateUnviewableStatus($input: UpdateChannelVODSettingsInput!) {
  updateChannelVODSettings(input: $input) {
    channel {
      id
      vodSettings {
        isUnviewable
      }
    }
  }
}
query LoyaltyBadgesManageSection_Query($channelID: ID, $login: String!) {
  user(login: $login) {
    id
    hasBadgesTimedOut
    relationship(targetUserID: $channelID) {
      cumulativeTenure: subscriptionTenure(tenureMethod: CUMULATIVE) {
        daysRemaining
        months
      }
    }
    roles {
      isPartner
    }
  }
}
query AlertWidget_GetAlertFiltersQuery($channelID: ID!, $alertSetToken: Token) {
  channel(id: $channelID) {
    id
    activityFeed {
      alertSettings(token: $alertSetToken) {
        isDNDModeEnabled
        categories {
          id
          displayName
          isIgnored
        }
      }
    }
  }
}
query PinnedCheersSettings($login: String!) {
  user(login: $login) {
    id
    cheer {
      id
      enrolledExperiments
      settings {
        id
        isPinnedCheersEnabled
      }
    }
  }
}
mutation DeleteFounderBadges($input: DeleteFounderBadgesInput!) {
  deleteFounderBadges(input: $input) {
    channel {
      id
    }
    users {
      id
    }
  }
}
query OneClickCheckout_CustomGiftingCheckoutPrice($params: PurchasableOfferParams!, $quantity: Int!) {
  purchasableOffer(params: $params) {
    id
    listing {
      chargeModel {
        internal {
          self {
            recurlyCheckoutPrice: checkoutPrice(quantity: $quantity, paymentProvider: RECURLY) {
              errorCode
              checkoutPriceSummary {
                currency
                exponent
                id
                description
                pricingIdentifier
                isTaxInclusive
                price
                tax
                total
                discount {
                  price
                  total
                  tax
                }
              }
            }
          }
          plan {
            interval {
              duration
            }
          }
        }
      }
    }
    promotion {
      id
      name
      promoDisplay {
        discountPercent
        discountType
      }
      priority
    }
    quantity {
      min
      max
    }
  }
}
fragment streamMarkers on Video {
  bookmarks(first: 51) {
    edges {
      node {
        id
      }
    }
  }
}
mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {
  unbanUserFromChatRoom(input: $input) {
    ban {
      bannedUser {
        id
        login
        displayName
      }
      createdAt
      expiresAt
      isPermanent
      moderator {
        id
        login
        displayName
      }
    }
    error {
      code
    }
  }
}
query SpotlightFollowersTileQuery($login: String!) {
  user(login: $login) {
    id
    followers {
      totalCount
    }
  }
}
query SupportPanelTitleSectionIsVerified($login: String!) {
  user(login: $login) {
    id
    roles {
      isPartner
    }
  }
}
mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {
  banUserFromChatRoom(input: $input) {
    ban {
      bannedUser {
        id
        login
        displayName
      }
      createdAt
      expiresAt
      isPermanent
      moderator {
        id
        login
        displayName
      }
      reason
    }
    error {
      code
      minTimeoutDurationSeconds
      maxTimeoutDurationSeconds
    }
  }
}
query CoreActionsCurrentUser {
  currentUser {
    displayName
    id
    login
    roles {
      isStaff
    }
    settings {
      preferredLanguageTag
    }
  }
}
fragment primeSubProductOfferFragment on Offer {
  id
  tplr
  platform
  eligibility {
    benefitsStartAt
    isEligible
  }
  giftType
  listing {
    chargeModel {
      internal {
        previewPrice {
          id
          currency
          exponent
          price
          total
          discount {
            price
            total
          }
        }
        plan {
          interval {
            duration
            unit
          }
        }
      }
      credit {
        creditType
        amount
      }
    }
  }
  promotion {
    id
    name
    promoDisplay {
      discountPercent
      discountType
    }
    priority
  }
  quantity {
    min
    max
  }
}
mutation UpdateHeroPreset($input: UpdateChannelHomePreferencesInput!) {
  updateChannelHomePreferences(input: $input) {
    channel {
      id
      home {
        preferences {
          heroPreset
        }
      }
    }
    error
  }
}
query ViewerDiscovery_ReferralsTimeseries($channelID: ID!, $start: Time!, $end: Time!, $timeZone: String!, $granularity: Granularity!, $dimension: ReferralsDimension!, $filter: ReferralsFilter!, $first: Int!) {
  videoPlayReferralsTimeseries(channelID: $channelID, start: $start, end: $end, granularity: $granularity, dimension: $dimension, filter: $filter, timeZone: $timeZone, first: $first) {
    ...referralTimeseriesFragment
  }
}

fragment referralTimeseriesFragment on VideoPlayReferralsTimeseries {
  referrers {
    name
    items {
      count
      timestamp
    }
  }
}
mutation JoinRaid($input: JoinRaidInput!) {
  joinRaid(input: $input) {
    raidID
  }
}
query AutoBannerEvents($channelID: ID!, $sort: AutoBanEventSort, $limit: Int = 25, $after: Cursor) {
  channelShieldMode(channelID: $channelID) {
    id
    autoBanner {
      bannedUserCount
      events(sort: $sort, limit: $limit, after: $after) {
        edges {
          node {
            ...autoBanEvent
          }
          cursor
        }
        pageInfo {
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}

fragment autoBanEvent on AutoBanEvent {
  id
  targetUser {
    id
    login
    displayName
    profileImageURL(width: 50)
  }
  bannedAt
  bannedBy {
    id
    login
    displayName
  }
  messageID
}
query SquadStream($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    squadStream {
      id
      members {
        id
      }
      status
    }
  }
}
fragment availableClaimFragment on User {
  channel {
    id
    self {
      communityPoints {
        availableClaim {
          id
        }
      }
    }
  }
}
query CustomSubBenefitsQuery($channelLogin: String!, $state: CustomSubBenefitState!) {
  channel(name: $channelLogin) {
    id
    customSubBenefits(state: $state) {
      id
      state
    }
  }
}
query ChannelAnalyticsAdBreaksTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      adBreaksInSeconds {
        value
        timestamp
      }
    }
  }
}
query ChannelPointsAvailableEarns($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    channel {
      id
      self {
        communityPoints {
          limitedEarnings {
            id
            cheerAvailableAt
            subscriptionGiftAvailableAt
          }
        }
      }
    }
  }
}
fragment ContentPolicyPropertiesVideo on Video {
  id
  broadcastType
  contentPolicyProperties {
    hasBrandedContent
  }
  owner {
    id
    login
  }
}
mutation SyncedSettingsSetChatPauseSetting($input: SetChatPauseSettingInput!) {
  setChatPauseSetting(input: $input) {
    chatPauseSetting
  }
}
fragment subscriptionProductEmote on Emote {
  id
  setID
  token
  assetType
}
query IsInInviteRaidersExperimentClusterQuery($clusterID: ID!, $userID: ID!) {
  experimentCluster(input: {clusterID: $clusterID, userID: $userID}) {
    id
    isEligible
    experimentGroup
  }
}
query ChatInput($channelLogin: String!, $isEmbedded: Boolean!) {
  currentUser {
    id
    bitsBalance
    isPartner @include(if: $isEmbedded)
  }
  channel: user(login: $channelLogin) {
    id
    self {
      banStatus {
        isPermanent
        expiresInMs
        reason
      }
    }
    displayName
    profileImageURL(width: 50)
    cheer {
      id
      settings {
        id
        emoteMinimumBits
        cheerMinimumBits
        event
      }
    }
  }
}
query SyncedSettingsReadableChatColors {
  currentUser {
    id
    chatUISettings {
      isReadableChatColorsEnabled
    }
  }
}
query SearchTray_SearchSuggestions($queryFragment: String!, $requestID: ID, $withOfflineChannelContent: Boolean) {
  searchSuggestions(queryFragment: $queryFragment, requestID: $requestID, withOfflineChannelContent: $withOfflineChannelContent) {
    edges {
      ...searchSuggestionNode
    }
    tracking {
      modelTrackingID
      responseID
    }
  }
}

fragment searchSuggestionNode on SearchSuggestionEdge {
  node {
    content {
      __typename
      ... on SearchSuggestionChannel {
        id
        isLive
        isVerified
        login
        profileImageURL(width: 50)
        user {
          id
          stream {
            id
            game {
              id
            }
          }
        }
      }
      ... on SearchSuggestionCategory {
        id
        boxArtURL(width: 30, height: 40)
        game {
          id
          slug
        }
      }
    }
    matchingCharacters {
      start
      end
    }
    id
    text
  }
}
query SubModal($login: String!) {
  user(login: $login) {
    id
    subscriptionProducts {
      id
    }
    self {
      subscriptionBenefit {
        id
      }
    }
  }
}
query ClipsDownloadButton($slug: ID!) {
  clip(slug: $slug) {
    id
    createdAt
    durationSeconds
    viewCount
    broadcaster {
      id
    }
    curator {
      id
    }
    game {
      id
      name
    }
    playbackAccessToken(params: {platform: "web", playerType: "clips-download"}) {
      signature
      value
    }
    videoQualities {
      sourceURL
    }
  }
}
query StreamSchedule($login: String!, $startAt: Time!, $endAt: Time!, $startingWeekday: String, $utcOffsetMinutes: Int) {
  currentUser {
    id
    login
  }
  user(login: $login) {
    id
    primaryColorHex
    lastBroadcast {
      id
      startedAt
    }
    broadcastSettings {
      id
      title
    }
    stream {
      id
      createdAt
      viewersCount
      previewImageURL(width: 320, height: 180)
      game {
        id
        slug
        name
      }
    }
    videos(first: 30, type: ARCHIVE, sort: TIME, options: {searchRangeEndAt: $endAt, searchRangeStartAt: $startAt}) {
      edges {
        node {
          id
          title
          createdAt
          lengthSeconds
          viewCount
          previewThumbnailURL(width: 320, height: 180)
          game {
            id
            slug
            name
          }
        }
      }
    }
    channel {
      id
      schedule {
        id
        nextSegment {
          id
          startAt
        }
        interruption {
          startAt
          endAt
          reason
        }
        segments(startingWeekday: $startingWeekday, utcOffsetMinutes: $utcOffsetMinutes, relativeDate: $startAt) {
          id
          baseSegmentID
          title
          startAt
          endAt
          isCancelled
          cancelledUntil
          hasReminder
          repeatEndsAfterCount
          categories {
            id
            slug
            name
            boxArtURL(width: 144, height: 192)
          }
        }
      }
    }
  }
}
query StreamCategoryLinkCategorySlugByID($id: ID!) {
  game(id: $id) {
    id
    slug
  }
}
query IsInCreatorGoalsCardExperiment($clusterID: ID!) {
  experimentCluster(input: {clusterID: $clusterID}) {
    id
    isEligible
    experimentGroup
  }
}
mutation SetAlertStatusMutation($input: UpdateActivityFeedAlertStatusInput!) {
  updateActivityFeedAlertStatus(input: $input) {
    alert {
      id
      status
    }
    error
  }
}
query UserColor($channelID: ID) {
  user(id: $channelID) {
    id
    primaryColorHex
  }
}
mutation AdsSettingsSection_SetChannelAdSchedule($input: SetChannelAdScheduleInput!) {
  setChannelAdSchedule(input: $input) {
    targetChannelID
    isAdScheduleEnabled
  }
}
mutation CancelRaid($input: CancelRaidInput!) {
  cancelRaid(input: $input) {
    raid {
      id
    }
    error {
      code
    }
  }
}
query AccessIsPartnerQuery($channelLogin: String!, $isChannelLoginSameAsUserLogin: Boolean!) {
  user(login: $channelLogin) {
    id
    payoutInvite @include(if: $isChannelLoginSameAsUserLogin) {
      id
      category
    }
    roles {
      isPartner
    }
  }
}
query ChatHighlightSettings {
  chatHighlightSettings {
    firstTimeChatters {
      displaySetting {
        chatHighlightDisplayMode
        isEnabled
        durationMinutes
      }
      releaseDate
    }
    mentions {
      displaySetting {
        chatHighlightDisplayMode
        isEnabled
        durationMinutes
      }
      releaseDate
    }
    mods {
      displaySetting {
        chatHighlightDisplayMode
        isEnabled
        durationMinutes
      }
      releaseDate
    }
    raiders {
      displaySetting {
        chatHighlightDisplayMode
        isEnabled
        durationMinutes
      }
      releaseDate
    }
    returningChatters {
      displaySetting {
        chatHighlightDisplayMode
        isEnabled
        durationMinutes
      }
      releaseDate
    }
    subscribers {
      displaySetting {
        chatHighlightDisplayMode
        isEnabled
        durationMinutes
      }
      releaseDate
    }
    suspiciousUsers {
      displaySetting {
        chatHighlightDisplayMode
        isEnabled
        durationMinutes
      }
      releaseDate
    }
    vips {
      displaySetting {
        chatHighlightDisplayMode
        isEnabled
        durationMinutes
      }
      releaseDate
    }
    shouldHideIcon
    lastSeen
  }
}
fragment broadcastTagFragment on Tag {
  id
  isLanguageTag
  localizedName
  tagName
  isAutomated
  localizedDescription
}
mutation CollectionCreator_CreateCollection($input: CreateCollectionInput!) {
  createCollection(input: $input) {
    collection {
      id
      title
    }
  }
}
query SearchFreeformTags($userQuery: String!, $first: Int) {
  searchFreeformTags(userQuery: $userQuery, first: $first) {
    edges {
      node {
        tagName
      }
    }
  }
}
query GetPortraitClipByID($portraitClipID: ID!) {
  portraitClip(portraitClipID: $portraitClipID) {
    portraitClipID
    renderPayload {
      status
      temporaryPortraitClipURL
      temporaryThumbnailURL
    }
    youtubeExportPayload {
      status
      youtubeURL
    }
    tiktokExportPayload {
      status
      tiktokURL
    }
  }
}
mutation SubsOnlyChatToggle($input: UpdateSubscriptionProductInput!) {
  updateSubscriptionProduct(input: $input) {
    product {
      id
      hasSubOnlyChat
    }
  }
}
query SubtemberCalloutQuery($id: ID!) {
  user(id: $id) {
    id
    subscriptionProducts {
      id
    }
  }
}
fragment bitsUserSettings on BitsUserSettings {
  firstCheerTutorial {
    hasAbandoned
    hasSkipped
  }
}
mutation ChatSettings_SelectBadgeModifier($input: UpdateUserSubscriptionSettingsInput!) {
  updateUserSubscriptionSettings(input: $input) {
    subscriptionSettings {
      isBadgeModifierHidden
    }
  }
}
query SupportPanelCommunituyGifting_UserInfo($login: String!) {
  user(login: $login) {
    id
    displayName
  }
}
mutation DashboardCensus_PostSurvey($input: SubmitCensusSurveyInput!) {
  submitCensusSurvey(input: $input) {
    isSuccess
  }
}
fragment subscriptionsManagementExpiredSubscriptionProduct on SubscriptionProduct {
  id
  tier
  url
  state
  name
}
fragment watchTrackGameFragment on Game {
  id
  name
}

fragment watchTrackBroadcastFragment on BroadcastSettings {
  id
  language
}

query WatchTrackQuery($channelLogin: String, $videoID: ID, $hasVideoID: Boolean!) {
  user(login: $channelLogin) {
    id
    lastBroadcast {
      id
      game {
        ...watchTrackGameFragment
      }
    }
    broadcastSettings {
      ...watchTrackBroadcastFragment
    }
    self {
      follower {
        node {
          id
        }
      }
    }
    stream {
      id
    }
  }
  video(id: $videoID) @include(if: $hasVideoID) {
    id
    broadcastType
    language
    game {
      ...watchTrackGameFragment
    }
  }
}
fragment extensionDiscoveryManifest on ExtensionDiscoveryManifest {
  authorName
  categories {
    id
    name
  }
  description
  games {
    id
    name
    displayName
  }
  iconURLs {
    discoverySplash
    square24
    square100
  }
  name
  privacyPolicyURL
  screenshotURLs
  summary
  supportEmail
  termsURL
  viewerSummary
}
query CommercialCommandHandler_ChannelData($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    roles {
      isPartner
      isAffiliate
    }
  }
}
query DashboardTeamSettings {
  currentUser {
    id
    ownedTeams {
      id
      name
      displayName
      logoURL
    }
    teamMemberships {
      isPrimary
      isRevenueRevealed
      isStatsRevealed
      team {
        id
        name
        displayName
        logoURL
      }
    }
    invitedTeams {
      id
      name
      displayName
      logoURL
    }
  }
}
fragment watchPartySession on WatchParty {
  id
  progress {
    ...watchPartyProgress
  }
  state
  viewersCount
}
mutation UpdateRecentlyStreamedCategories($input: UpdateChannelHomePreferencesInput!) {
  updateChannelHomePreferences(input: $input) {
    channel {
      id
      home {
        shelves {
          categoryShelfSuggestions {
            edges {
              isHidden
              node {
                id
                boxArtURL(width: 144, height: 192)
                displayName
              }
            }
          }
        }
      }
    }
    error
  }
}
mutation PauseRaids($input: PauseRaidsInput!) {
  pauseRaids(input: $input) {
    user {
      id
      raidSettings {
        isAllowingRaids
        pausedUntil
      }
    }
    error {
      code
    }
  }
}
query VideoChatChannelAndVideoTrackingContext($videoCreatorID: ID, $videoID: ID) {
  video(id: $videoID) {
    id
    broadcastType
    title
    game {
      id
      name
    }
  }
  user(id: $videoCreatorID) {
    id
    login
  }
}
query ClipsViewModerationModals($slug: ID!) {
  clip(slug: $slug) {
    id
    broadcaster {
      id
    }
    curator {
      id
    }
  }
}
fragment contentClassificationLabelPoliciesFields on ContentClassificationLabelPolicyProperties {
  signPostProperties {
    signPost
    contentClassificationLabels
  }
  contentGateProperties {
    contentGate
  }
}
query AccountCheckupSecurityStateQuery {
  currentUser {
    id
    accountHealth {
      accountSecurityState
    }
  }
}
fragment insightsUserFragment on User {
  id
  login
  displayName
  profileImageURL(width: 70)
  isPartner
  followers {
    totalCount
  }
}
query SupportPanelBenefitsSectionUser($login: String!) {
  user(login: $login) {
    id
    displayName
    subscriptionProducts {
      id
      hasAdFree
    }
  }
}
fragment filterTagFragment on Tag {
  id
  isLanguageTag
  localizedName
  tagName
  scope
}

query TagHandlerTag($id: ID!) {
  contentTag(id: $id) {
    ...filterTagFragment
  }
}
fragment alertFeatureFlags on AlertsFeatureLaunchFlags {
  isSecondaryMessagesEnabled
  isTextToSpeechEnabled
  isCustomCssAndHtmlEnabled
  isPaidPinnedChatEnabled
  isChannelPointsRedemptionEnabled
  isPhoneNumberVerificationAudioScanningDisclosureEnabled
  isStreamElementsEnabled
  isStreamLabsEnabled
  isThroneEnabled
  isCrowdControlEnabled
  isEmotesInPrimaryTextEnabled
}

query AlertsFeatureLaunchFlags($channelID: ID!) {
  alertsFeatureLaunchFlags(channelID: $channelID) {
    ...alertFeatureFlags
  }
}
fragment bitsBadgeTierEmote on Emote {
  id
  setID
  token
  bitsBadgeTierSummary {
    threshold
    self {
      isUnlocked
      numberOfBitsUntilUnlock
    }
  }
}
query OfflineEmbedVODAndSchedule($login: String!) {
  user(login: $login) {
    id
    displayName
    bannerImageURL
    offlineImageURL
    primaryColorHex
    channel {
      id
      schedule {
        id
        segmentList {
          edges {
            node {
              id
              title
              startAt
              endAt
              hasReminder
              isCancelled
              categories {
                id
                name
                boxArtURL(width: 144, height: 192)
              }
            }
          }
        }
      }
    }
    videos(first: 1) {
      edges {
        node {
          id
          title
          previewThumbnailURL(width: 320, height: 180)
          game {
            id
            name
          }
        }
      }
    }
  }
}
fragment bitsAdOffer on BitsAdOffer {
  id
  type
  bits
}
mutation DeleteAlertVariation($input: DeleteAlertVariationInput!) {
  deleteAlertVariation(input: $input) {
    error
  }
}
mutation UpdatePhoneNumberConfirmation($input: UpdatePhoneNumberConfirmationInput!) {
  updatePhoneNumberConfirmation(input: $input) {
    error {
      code
      message
    }
  }
}
mutation CloseRTJQueue($input: CloseRTJQueueInput!) {
  closeRTJQueue(input: $input) {
    error {
      code
    }
  }
}
fragment clipModalFragment on Clip {
  id
  broadcast {
    id
  }
  broadcaster {
    id
    login
  }
  curator {
    id
    login
  }
  game {
    id
    displayName
  }
  thumbnailURL
  createdAt
  viewCount
  title
  durationSeconds
  video {
    id
    broadcastType
    title
  }
  language
  isPublished
}
query GetTikTokVideoDefaults($userID: ID!) {
  tikTokVideoDefaults(userID: $userID) {
    creatorUsername
    creatorNickname
    privacyOptions
    isCommentsEnabled
    isDuetEnabled
    isStitchEnabled
    error
  }
}
fragment clipsFullVideoButtonClip on Clip {
  id
  videoOffsetSeconds
  durationSeconds
  title
  broadcaster {
    id
    login
  }
  video {
    id
    broadcastType
  }
  game {
    id
    displayName
  }
}

query ClipsFullVideoButton($slug: ID!) {
  clip(slug: $slug) {
    ...clipsFullVideoButtonClip
  }
}
fragment trailerVideo on Video {
  previewThumbnailURL(height: 360, width: 640)
  lengthSeconds
  title
  id
  createdAt
}
query Prime_PrimeOffers_PrimeOfferIds_Eligibility($dateOverride: Time, $countryCode: String) {
  primeOffersWithoutEligibility(dateOverride: $dateOverride, countryCode: $countryCode) {
    id
    catalogOfferID
    self {
      status
    }
  }
}
query ChannelVideosContent_Game($categoryID: ID!) {
  game(id: $categoryID) {
    id
    displayName
    name
  }
}
query ImpressionAnalytics($channelID: ID!, $start: Time!, $end: Time!, $filter: ImpressionAnalyticsFilter = ALL, $dimension: ImpressionAnalyticsDimension!, $first: Int = 15, $includes: [String]) {
  impressions: impressionAnalytics(channelID: $channelID, start: $start, end: $end, filter: $filter, dimension: $dimension, first: $first, includes: $includes) {
    items {
      count
      name
    }
  }
}
query GetTrackDspLinks($trackID: ID!) {
  getTrackDspLinks(trackID: $trackID) {
    url
    dsp
  }
}
query GetGuestStarUserPreferences($guestIDs: [ID!], $userID: ID, $viewOnlyToken: String) {
  guestStarUserPreferences(guestIDs: $guestIDs, userID: $userID, viewOnlyToken: $viewOnlyToken) {
    ...guestStarPreferences
  }
}

fragment guestStarPreferences on GuestStarUserPreferences {
  host {
    id
  }
  guest {
    id
    self {
      hasGuestStarFavorited
    }
    stream {
      id
    }
  }
  volume
  cohostPermission
  isMuted
  screenshareVolume
  isScreenshareMuted
}
fragment tcData on TCData {
  tcString
  tcfPolicyVersion
  cmpID
  cmpVersion
  ifGDPRApplies
  isServiceSpecific
  hasNonStandardStacks
  publisherCountryCode
  hasPurposeOneTreatment
  purpose {
    consents
    legitimateInterests
  }
  vendor {
    consents
    legitimateInterests
  }
  specialFeatureOptins
}

fragment iabInformation on IABSpecifiedInformation {
  id
  name
  description
  legalDescription {
    header
    bullets
  }
  legalDescriptions {
    header
    bullets
  }
}

fragment gdprUserPreferences on GDPRUserPreferences {
  tcData {
    ...tcData
  }
  purpose {
    iabInformation {
      ...iabInformation
    }
    consentStatus
    hasUserSetConsent
  }
  specialPurpose {
    ...iabInformation
  }
  features {
    ...iabInformation
  }
  specialFeatureOptIns {
    iabInformation {
      ...iabInformation
    }
    consentStatus
    hasUserSetConsent
  }
  hasUserSetPurposeConsent
}

fragment dmaUserPreferences on DMAUserPreferences {
  hasDmaOptIn
}
query ModActionFilterCategories {
  moderationActionsFilterCategories {
    id
    label
  }
}
mutation ChannelTrailerSettings_SetChannelTrailer($input: SetChannelTrailerInput!) {
  setChannelTrailer(input: $input) {
    error
    channel {
      id
      owner {
        id
        channel {
          id
          trailer {
            video {
              id
            }
          }
        }
      }
    }
  }
}
query VIPs($login: String!) {
  user(login: $login) {
    id
    vips(first: 100) {
      edges {
        node {
          id
          login
        }
      }
    }
  }
}
query TeamsDashboard_CsvExportMetrics($teamName: String!, $teamMemberIDs: [ID!], $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timezone: String!) {
  team(name: $teamName) {
    id
    creatorTimeseriesMetrics(startAt: $startAt, endAt: $endAt, channelIDs: $teamMemberIDs, granularity: $granularity, timeZone: $timezone) {
      adBreaksInSeconds {
        items {
          timestamp
          value
        }
      }
      adTimePerHour {
        items {
          timestamp
          value
        }
      }
      averageViewers {
        items {
          timestamp
          value
        }
      }
      chatMessages {
        items {
          timestamp
          value
        }
      }
      follows {
        items {
          timestamp
          value
        }
      }
      minutesWatched {
        items {
          timestamp
          value
        }
      }
      timeStreamed {
        items {
          timestamp
          value
        }
      }
      uniqueChatters {
        items {
          timestamp
          value
        }
      }
    }
  }
}
query ClipsViewTitleEdit($slug: ID!) {
  clip(slug: $slug) {
    id
    broadcaster {
      id
    }
    title
  }
}
fragment sponsorshipActivity on SponsoredActivity {
  ... on ChannelSkin {
    ...sponsorshipChannelSkin
  }
  ... on HostReadAd {
    ...sponsorshipHostReadAd
  }
  ... on SubsidizedSubscriptions {
    ...sponsorshipSubSub
  }
  activation {
    id
    startsAt
    endsAt
  }
}

fragment sponsorshipChannelSkin on ChannelSkin {
  advertiser {
    name
    imageAsset {
      lightModeURL
      darkModeURL
    }
    iconBackgroundColorHexCode
  }
  placements {
    colorHexCode
  }
}

fragment sponsorshipHostReadAd on HostReadAd {
  advertiserName
}

fragment sponsorshipSubSub on SubsidizedSubscriptions {
  advertiser {
    name
    imageAsset {
      lightModeURL
      darkModeURL
    }
    iconBackgroundColorHexCode
  }
}

fragment sponsorshipCampaignInstance on CampaignInstance {
  id
  terms {
    body
    id
    name
    signedAt
  }
  activities {
    ...sponsorshipActivity
  }
  payment {
    amount
    currencyCode
    minorUnits
  }
}

query SponsorshipCampaignInstances($state: CampaignInstanceState) {
  sponsorshipCampaignInstances(query: {state: $state}) {
    ...sponsorshipCampaignInstance
  }
}
query StreamInfoBoostStatus($channelID: ID!) {
  channel(id: $channelID) {
    id
    hypeTrain {
      isBoosted
    }
  }
}
mutation Thread_SetMuteThread($input: UpdateWhisperThreadInput!) {
  updateWhisperThread(input: $input) {
    thread {
      id
      isMuted
    }
  }
}
query FeaturedUpcomingStreams($categoryID: ID!, $options: FeaturedUpcomingStreamsOptions!) {
  featuredUpcomingStreams(categoryID: $categoryID, limit: 3, options: $options) {
    nodes {
      id
      reminderCount
      segment {
        id
        title
        baseSegmentID
        repeatEndsAfterCount
        channel {
          id
          name
          owner {
            id
            profileImageURL(width: 150)
            bannerImageURL
            primaryColorHex
            login
            tags {
              id
              localizedName
            }
          }
          stream {
            id
            viewersCount
          }
        }
        startAt
        endAt
        hasReminder
        isCancelled
      }
    }
  }
}
query getHourlyViewersHeatmapQuery($input: HourlyViewersInput!) {
  hourlyViewers(input: $input) {
    hourlyHeatMap {
      dayOfWeek
      hourOfDay
      averageConcurrentUsers
      weeklyProportion
      averageViewers
      averageBroadcasters
    }
    dataStatus
    releaseStatus
    error
  }
}
query ExtensionSearchPage($afterCursor: Cursor, $search: String, $includeCurrentUser: Boolean!) {
  extensions(first: 21, after: $afterCursor, search: $search) {
    edges {
      ...ExtensionSearchPage_ExtensionEdge
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
    }
  }
  currentUser @include(if: $includeCurrentUser) {
    id
    cheer {
      id
    }
    login
    installedExtensions {
      id
      extension {
        id
      }
    }
  }
}

fragment ExtensionSearchPage_ExtensionEdge on ExtensionEdge {
  cursor
  node {
    id
    authorName
    clientID
    iconURLs {
      discoverySplash
      square100
    }
    isBitsEnabled
    bitsSupportLevel
    name
    self {
      canInstall
    }
    sku
    state
    summary
    vendorCode
    version
    views {
      component {
        viewerURL
      }
      hidden {
        viewerURL
      }
      mobile {
        viewerURL
      }
      panel {
        viewerURL
      }
      videoOverlay {
        viewerURL
      }
    }
  }
}
mutation ModUser($input: ModUserInput!) {
  modUser(input: $input) {
    channel {
      id
      login
    }
    target {
      id
      login
    }
    error {
      code
    }
  }
}
mutation BitsThresholdSettingsForm_SetIsPinnedCheersEnabled($input: UpdateCheerPartnerSettingsInput!) {
  updateCheerPartnerSettings(input: $input) {
    cheer {
      id
      pinnedCheers {
        isEnabled
      }
    }
  }
}
query GuestStarTeam($login: String, $first: Int, $after: Cursor) {
  user(login: $login) {
    id
    teamMemberships {
      team {
        id
        members(first: $first, after: $after) {
          edges {
            cursor
            node {
              id
            }
          }
          pageInfo {
            hasNextPage
          }
        }
      }
    }
  }
}
query PrimeSubPurchase($purchaseOrderID: ID!, $includeOrder: Boolean!) {
  currentUser {
    id
    purchaseOrder(id: $purchaseOrderID) @include(if: $includeOrder) {
      id
      actionTokenID
      failureReason
      state
    }
  }
}
fragment channelLeaderboardSubscriptionProduct on SubscriptionProduct {
  id
  name
  price
  priceInfo {
    currency
    exponent
    price
    id
  }
  gifting {
    ...subCommunityGiftingFragment
  }
}
mutation MultiStreamPlayer_UnfollowUser($input: UnfollowUserInput!) {
  unfollowUser(input: $input) {
    follow {
      disableNotifications
    }
  }
}
mutation createClip($input: CreateClipInput!) {
  createClip(input: $input) {
    clip {
      id
      url
    }
    error {
      code
    }
  }
}
fragment hypeTrainApproachingEventsRemaining on HypeTrainApproachingEventsRemaining {
  events
  secondsRemaining
}
mutation EditVideoPropertiesModal_UpdateVideo($input: UpdateVideoInput!) {
  updateVideo(input: $input) {
    video {
      id
      title
      description
      previewThumbnailURL
      game {
        id
        name
      }
      language
    }
  }
}
mutation UpdateBitsBadgeTierNotification($input: UpdateBitsBadgeTierNotificationInput!) {
  updateBitsBadgeTierNotification(input: $input) {
    user {
      id
    }
  }
}
query GuestStarExampleClipsQuery($id: ID!) {
  clip(slug: $id) {
    id
    title
    thumbnailURL(width: 480, height: 272)
    broadcaster {
      id
      displayName
      profileImageURL(width: 70)
    }
    game {
      id
      name
    }
  }
}
query PaidPinnedChatSettings($channelID: ID!) {
  channel(id: $channelID) {
    id
    paidPinnedChatSettings {
      isEnabled
      minimumLevel
    }
  }
}
query ChannelVideoCore($videoID: ID!) {
  video(id: $videoID) {
    id
    owner {
      ...coreChannelFragment
    }
  }
}
mutation UpdateCharityCampaign($input: UpdateCharityCampaignInput!) {
  updateCharityCampaign(input: $input) {
    campaign {
      id
    }
    error {
      code
    }
  }
}
mutation FollowButton_UnfollowUser($input: UnfollowUserInput!) {
  unfollowUser(input: $input) {
    follow {
      disableNotifications
      user {
        ...followButtonFragment
      }
    }
  }
}
mutation TOS_Banner_Update_Consent($userID: ID!, $update: [UserProductConsentInput!]!) {
  updateUserProductConsent(input: {productConsentUpdate: $update, userID: $userID}) {
    user {
      id
      productConsent {
        ... on ProductConsentError {
          code
        }
        ... on UserConsent {
          ...userConsent
        }
      }
    }
    errorCode
  }
}
query DevGetExtensionSecrets($extensionID: ID!) {
  extensionSecrets(extensionID: $extensionID) {
    secrets {
      activeAt
      content
      expiresAt
    }
  }
}
query CommunityIntroSettingsQuery($login: String!) {
  currentUser {
    id
  }
  channel(name: $login) {
    id
    communityIntrosSettings {
      isEnabled
      prompt
      isModAccessEnabled
    }
  }
}
fragment watchPartyEligibilitySelfEdge on WatchPartyItem {
  self {
    eligibility {
      ...watchPartyEligibility
    }
    willShowPrimeUpsell
  }
}

fragment watchPartyEligibility on WatchPartyItemEligibility {
  reason
  canView
}
query ProfileBannerPreferences($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    displayName
    bannerImageURL
    primaryColorHex
    channel {
      id
      home {
        preferences {
          heroPreset
        }
      }
    }
  }
}
fragment tcfVendorStatus on TCFCookieVendor {
  name
  consentStatus
  hasUserSetConsent
  isVisible
  cookieVendorType
  features
  purposes
  specialFeatures
  specialPurposes
  policyURL
  cookieMaxAgeSeconds
}

fragment nonTCFVendorStatus on NonTCFCookieVendor {
  name
  consentStatus
  hasUserSetConsent
  isVisible
  cookieVendorType
  policyURL
}

fragment vendorConsentStatuses on VendorConsent {
  ... on GDPRVendorConsent {
    ...GDPRVendorStatus
  }
}

fragment GDPRVendorStatus on GDPRVendorConsent {
  status {
    ... on TCFCookieVendor {
      ...tcfVendorStatus
    }
    ... on NonTCFCookieVendor {
      ...nonTCFVendorStatus
    }
  }
}
fragment devCompanyGame on Game {
  id
  boxArtURL(width: 85, height: 113)
  coverURL(width: 566, height: 85)
  displayName
}
mutation SetGameDropAccountLinkClient($input: SetGameDropAccountLinkClientInput!) {
  setGameDropAccountLinkClient(input: $input) {
    game {
      id
      dropAccountLink {
        clientID
        updatedAt
      }
    }
    error {
      code
      message
    }
  }
}
query TeamsDashboard_ChatMessages($teamName: String!, $teamMembers: [ID!], $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timezone: String!) {
  team(name: $teamName) {
    id
    creatorTimeseriesMetrics(startAt: $startAt, endAt: $endAt, channelIDs: $teamMembers, granularity: $granularity, timeZone: $timezone) {
      metric: chatMessages {
        items {
          timestamp
          value
        }
        total
      }
    }
  }
}
query VideoPlayer_VideoSourceManager($input: UserByAttribute!) {
  userByAttribute(input: $input) {
    id
  }
}
query GuestStarStreamInfo($login: String!) {
  user(login: $login) {
    id
    lastBroadcast {
      id
      title
      game {
        id
        displayName
      }
    }
  }
}
mutation DeleteOauthApp($input: DeleteOauthAppInput!) {
  deleteOauthApp(input: $input) {
    error {
      code
    }
  }
}
fragment pollTokenBreakdown on PollTokenBreakdown {
  communityPoints
  id
}
query ChannelShell($login: String!) {
  userOrError: userResultByLogin(login: $login) {
    ...coreChannelWithHomePrefsFragment
    ... on UserDoesNotExist {
      userDoesNotExist: key
      reason
    }
    ... on UserError {
      userError: key
    }
  }
}
mutation Clips_DeleteClips($input: DeleteClipsInput!) {
  deleteClips(input: $input) {
    clips {
      id
      slug
    }
  }
}
query DevExtensionGetVersionManifests($id: ID!, $after: Cursor) {
  extensionManifests(id: $id, after: $after) {
    edges {
      cursor
      node {
        id
        developerManifest {
          versionState
        }
        capabilities {
          bitsSupportLevel
        }
      }
    }
    pageInfo {
      hasPreviousPage
      hasNextPage
    }
  }
}
mutation UpdateRestrictStreamViewingSettings($input: UpdateRestrictStreamViewingSettingsInput!) {
  updateRestrictStreamViewingSettings(input: $input) {
    error {
      code
    }
  }
}
fragment subProductOfferFragment on Offer {
  id
  tplr
  platform
  eligibility {
    benefitsStartAt
    isEligible
  }
  giftType
  listing {
    chargeModel {
      internal {
        previewPrice {
          id
          currency
          exponent
          price
          total
          discount {
            price
            total
          }
        }
        plan {
          interval {
            duration
            unit
          }
        }
      }
    }
  }
  promotion {
    id
    name
    promoDisplay {
      discountPercent
      discountType
    }
    priority
  }
  quantity {
    min
    max
  }
}
fragment loyaltyBadge on LoyaltyBadge {
  id
  requiredTenureMonths
  channelTenureMethodID
  image1xURL
  image2xURL
  image4xURL
  title
}
query IsPartnerQuery($channelID: ID!) {
  channel: user(id: $channelID) {
    id
    roles {
      isPartner
    }
  }
}
query PartnerPlusPanel_Query($channelID: ID!, $startDate: Time!, $endDate: Time!) {
  premiumWithCap: premiumWithCap(channelID: $channelID) {
    subRevCents
    threshold
  }
  creatorProgramInfo: creatorProgramInfo(channelID: $channelID, startDate: $startDate, endDate: $endDate) {
    partnerPlusProgram {
      isQualified
      qualifiedEndDate
      qualifiedStartDate
      restrictedUntilDate
      disallowedReason
      threshold
      subPoints {
        year
        month
        count
        isRestricted
      }
    }
  }
}
fragment devBountyCampaignVideo on BountyCampaignVideo {
  country
  title
  url
}
query Chat_ShareBitsBadgeTier_ChannelData($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    self {
      bitsBadge {
        id
        tierNotification {
          id
          threshold
          canShare
          unlockedEmoticons {
            id
            token
          }
        }
      }
    }
  }
}
query GetHostSettings($sessionOptions: GuestStarSessionOptions!) {
  guestStarSession(options: $sessionOptions) {
    id
    host {
      id
      login
    }
    hostSettings {
      browserSourceLayout
      isBrowserSourceAudioEnabled
      slotCount
      isCostreamingEnabled
      guestScreensharePermission
    }
  }
}
query GiftRecipientSearchBar_SearchUsers($query: String!, $after: Cursor) {
  searchUsers(userQuery: $query, first: 50, after: $after) {
    edges {
      cursor
      node {
        id
        login
        displayName
        profileImageURL(width: 150)
      }
    }
    pageInfo {
      hasNextPage
    }
    totalCount
  }
}
fragment extensionManifest on ExtensionManifest {
  id
  version
  assetManifest {
    assetHash
    fileName
    fileSize
    baseURI
    uploadedAt
    uploader {
      id
      displayName
    }
  }
  developerManifest {
    authorEmail
    createdAt
    lastTransitionedAt
    testingBaseURI
    versionState
  }
  discoveryManifest {
    authorName
    categories {
      id
      name
    }
    description
    games {
      id
      name
      displayName
    }
    iconURLs {
      discoverySplash
      square24
      square100
    }
    name
    privacyPolicyURL
    screenshotURLs
    summary
    supportEmail
    termsURL
    viewerSummary
  }
  capabilities {
    configurationLocation
    hasBitsSupport
    bitsSupportLevel
    hasChatSupport
    requiredConfiguration
    subscriptionsSupportLevel
    whitelists {
      broadcasters
      configURLs
      panelURLs
      testers
      imageDomains
      mediaDomains
      connectDomains
    }
    willRequestIdentityLink
  }
  views {
    component {
      aspectRatioX
      aspectRatioY
      canLinkExternalContent
      hasAutoscale
      scalePixels
      targetHeight
      viewerPath
      viewerURL
    }
    config {
      canLinkExternalContent
      viewerURL
      viewerPath
    }
    liveConfig {
      canLinkExternalContent
      viewerURL
      viewerPath
    }
    mobile {
      viewerURL
      viewerPath
    }
    panel {
      canLinkExternalContent
      height
      viewerURL
      viewerPath
    }
    videoOverlay {
      canLinkExternalContent
      viewerURL
      viewerPath
    }
  }
}
query ViewerDiscovery_NewVsReturning($channelID: ID!, $startAt: Time!, $endAt: Time!, $numberOfIntervals: Int!) {
  user(id: $channelID) {
    id
    creatorMetricsByInterval(startAt: $startAt, endAt: $endAt, numberOfIntervals: $numberOfIntervals) {
      items {
        uniqueViewersString
        uniqueEngagedString
        uniqueNewEngagedString
        uniqueReturningEngagedString
      }
    }
  }
}
query PopoutExtension_UserQuery($login: String!) {
  currentUser {
    id
    login
  }
  user(login: $login) {
    id
    login
  }
}
fragment user on User {
  id
  broadcastSettings {
    id
    title
  }
  displayName
  login
  profileImageURL(width: $imageWidth)
  largeProfileImageURL: profileImageURL(width: 300)
  primaryColorHex
  roles {
    isPartner
  }
}
query ChatSettingsFollowersOnlySetting($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    chatSettings {
      followersOnlyDurationMinutes
    }
  }
}
fragment alertsChannelPointsReward on CommunityPointsCustomReward {
  id
  title
  isEnabled
  cost
  isUserInputRequired
}
mutation EnableChannelPointsSettingsMutation($input: UpdateCommunityPointsChannelSettingsInput!) {
  updateCommunityPointsChannelSettings(input: $input) {
    error {
      code
    }
    channel {
      id
      communityPointsSettings {
        isEnabled
      }
    }
  }
}
fragment hypeTrainReward on HypeTrainReward {
  id
  type
  ... on HypeTrainEmoteReward {
    emote {
      id
      token
    }
  }
  ... on HypeTrainBadgeReward {
    badge {
      id
      setID
      imageURL(size: DOUBLE)
    }
  }
}
mutation DevRotateExtensionSecrets($input: RotateExtensionSecretsInput!) {
  rotateExtensionSecrets(input: $input) {
    secrets {
      activeAt
      content
      expiresAt
    }
    error
  }
}
mutation RegenerateStreamKeyMutation($input: RegenerateStreamKeyInput!) {
  regenerateStreamKey(input: $input) {
    channel {
      id
    }
  }
}
mutation StartAd($input: StartAdInput!) {
  startAd(input: $input) {
    adSession {
      lengthSeconds
      id
    }
    error {
      code
      retryAfterSeconds
    }
  }
}
mutation TutorialStatusSetting($input: SetModViewSettingsInput!) {
  setModViewSettings(input: $input) {
    modViewSettings {
      tutorialSeenAt
      tutorialState
    }
  }
}
query ReactionsTimeseriesStats_StreamSummary($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      granularity
      viewerFeedback {
        timestamp
        funny
        hype
        love
        ohNo
        whaaat
        total
      }
    }
  }
}
query Bits_BuyCard_Offers($withChannel: Boolean!, $isLoggedIn: Boolean!, $channelLogin: String!) {
  bitsOffers @skip(if: $isLoggedIn) {
    ...bitsOffer
  }
  currentUser @include(if: $isLoggedIn) {
    id
    idSHA1
    bitsBalance
    bitsOffers {
      ...bitsOffer
    }
  }
  user(login: $channelLogin) @include(if: $withChannel) {
    id
    displayName
    cheer {
      id
      settings {
        id
        cheerMinimumBits
      }
    }
  }
}
mutation ContentPolicyPropertiesMutation($input: SetContentPolicyPropertiesInput!) {
  setContentPolicyProperties(input: $input) {
    contentPolicyProperties {
      hasBrandedContent
    }
    error
  }
}
query SubsBroadcaster_RENAME1($currentChannelLogin: String!) {
  user(login: $currentChannelLogin) {
    id
    displayName
    login
    description
    roles {
      isPartner
    }
    bannerImageURL
    profileImageURL(width: 300)
  }
}
fragment contentTag on Tag {
  id
  isLanguageTag
  tagName
  localizedName
  isAutomated
  localizedDescription
}
mutation DashboardSettingsUserColorDelete($input: DeleteUserColorsInput!) {
  deleteUserColors(input: $input) {
    user {
      id
      primaryColorHex
    }
  }
}
query PollsEnabled($login: String!) {
  channel: user(login: $login) {
    id
    roles {
      isAffiliate
      isPartner
    }
  }
}
mutation InviteUserToGuestStarSession($input: InviteUserToGuestStarSessionInput!) {
  inviteUserToGuestStarSession(input: $input) {
    error {
      code
    }
  }
}
query IsInRaidBrowserExperimentClusterQuery($clusterID: ID!, $userID: ID!) {
  experimentCluster(input: {clusterID: $clusterID, userID: $userID}) {
    id
    isEligible
    experimentGroup
  }
}
query SunlightHomePage($login: String!) {
  channel: user(login: $login) {
    id
    login
    displayName
    roles {
      isPartner
      isAffiliate
    }
    streamSessions(first: 1) {
      startedAt
      endedAt
      archiveVideo {
        previewThumbnailURL
        id
        viewCount
        owner {
          id
        }
      }
    }
    self {
      isEditor
    }
  }
}
query UnbanRequestsListItemUser($id: ID!) {
  user(id: $id) {
    id
    login
    createdAt
    displayName
    profileImageURL(width: 28)
  }
}
mutation UpdateShieldModeShortcutEnabled($input: UpdateShieldModeShortcutEnabledInput!) {
  updateShieldModeShortcutEnabled(input: $input) {
    isShieldModeShortcutEnabled
  }
}
mutation ContentClassificationLabelsMutation($input: SetContentClassificationLabelsInput!) {
  setContentClassificationLabels(input: $input) {
    contentClassificationLabels {
      id
      localizedName
      description
      isEnabled
      isLocked
      lockedUntil
      isSelectable
    }
    error {
      code
      message
    }
  }
}
query VideoCommentsByOffsetOrCursor($videoID: ID!, $contentOffsetSeconds: Int, $cursor: Cursor) {
  video(id: $videoID) {
    id
    creator {
      id
      channel {
        id
      }
    }
    comments(after: $cursor, contentOffsetSeconds: $contentOffsetSeconds) {
      edges {
        cursor
        node {
          id
          commenter {
            id
            login
            displayName
          }
          contentOffsetSeconds
          createdAt
          message {
            fragments {
              emote {
                id
                emoteID
                from
              }
              text
            }
            userBadges {
              id
              setID
              version
            }
            userColor
          }
        }
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
      }
    }
  }
}
query UserProfileEditor($login: String!) {
  user(login: $login) {
    id
    login
    profileImageURL70x70: profileImageURL(width: 70)
    profileImageURL300x300: profileImageURL(width: 300)
  }
}
query ChannelAnalytics_CIPOffersQuery($login: String!, $shouldSkipCIP: Boolean!) {
  user(login: $login) @skip(if: $shouldSkipCIP) {
    id
    adProperties {
      availableOffers: incentiveOffers(status: AVAILABLE) {
        id
        setID
        isViewed
        campaignID
        isTest
      }
      selectedOffers: incentiveOffers(status: SELECTED) {
        id
        setID
        isViewed
        campaignID
        isTest
      }
    }
  }
}
mutation RemoveSelfFromTeam($input: RemoveSelfFromTeamInput!) {
  removeSelfFromTeam(input: $input) {
    user {
      id
      teamMemberships {
        isPrimary
        isRevenueRevealed
        isStatsRevealed
        team {
          id
          name
          displayName
          logoURL
        }
      }
    }
  }
}
mutation BulkUpdateRedemptions_Reward($input: UpdateCommunityPointsCustomRewardRedemptionStatusesByRewardInput!) {
  updateCommunityPointsCustomRewardRedemptionStatusesByReward(input: $input) {
    error {
      code
    }
  }
}
mutation RedeemCustomReward($input: RedeemCommunityPointsCustomRewardInput!) {
  redeemCommunityPointsCustomReward(input: $input) {
    error {
      code
    }
  }
}
query TurboSubscriptionProduct($name: String!) {
  subscriptionProduct(productName: $name) {
    id
    offers {
      id
      listing {
        chargeModel {
          internal {
            previewPrice {
              id
              currency
              exponent
              total
              discount {
                total
              }
            }
          }
        }
      }
    }
    self {
      benefit {
        id
        states {
          state
          createdAt
        }
        renewsAt
        pendingSubscription {
          startsAt
        }
      }
    }
  }
}
query Moment_Command_CommunityMomentDetails($channelID: ID!) {
  broadcasterCommunityMomentDetails(channelID: $channelID) {
    availableMoments
  }
}
mutation UpdateCollabStatus($input: SetGuestStarUserSettingsInput!) {
  setGuestStarUserSettings(input: $input) {
    error {
      code
    }
  }
}
query RoleRestricted($contentOwnerLogin: String!) {
  currentUser {
    id
    roles {
      isStaff
    }
  }
  user(login: $contentOwnerLogin) {
    id
    self {
      isEditor
    }
  }
}
mutation DismissCreatorHomeCardCommunityChannel($input: DismissCreatorHomeCardCommunityChannelInput!) {
  dismissCreatorHomeCardCommunityChannel(input: $input) {
    identifier
    error
  }
}
query BlockedUsers {
  currentUser {
    id
    blockedUsers {
      id
    }
  }
}
query Dac7InterviewBannerQuery {
  currentUser {
    id
    payout {
      firstOnboarded
      taxIntents {
        type
        state
      }
    }
  }
}
fragment UploadConfigs on GetEmoteUploadConfigPayload {
  uploadConfigs {
    ID
    URL
    assetType
    images {
      ID
      Size
      assetType
    }
    size
  }
}
mutation ScheduleFutureGuestStarInvite($input: ScheduleFutureGuestStarInviteInput!) {
  scheduleFutureGuestStarInvite(input: $input) {
    error {
      code
    }
  }
}
fragment bitsBundleOfferPromotion on BitsPromotion {
  id
  type
}
fragment BannedUser on ChannelBannedUser {
  bannedAt
  bannedUser {
    id
    login
  }
  modUser {
    id
    displayName
  }
}
fragment badgeFlairAsset on CreatorBadgeFlairAsset {
  tier
  image1xURL
  image2xURL
  image4xURL
}
mutation CancelUnbanRequest($input: CancelUnbanRequestInput!) {
  cancelUnbanRequest(input: $input) {
    unbanRequest {
      id
      status
    }
    error {
      code
    }
  }
}
query VODPreviewOverlay($vodID: ID) {
  video(id: $vodID) {
    id
    previewThumbnailURL(width: 1280, height: 720)
    title
  }
}
mutation AddFavorite($input: AddUserToGuestStarFavoritesInput!) {
  addUserToGuestStarFavorites(input: $input) {
    error {
      code
    }
  }
}
query MWDropAvailableHighlight {
  currentUser {
    id
    dropCurrentSession {
      channel {
        id
        displayName
      }
      dropID
      currentMinutesWatched
      requiredMinutesWatched
    }
  }
}
query ExtensionLiveConfigureModal($userLogin: String!) {
  user(login: $userLogin) {
    id
    installedExtensions {
      id
      activationConfig {
        anchor
      }
      extension {
        id
        name
        iconURLs {
          square100
        }
      }
    }
  }
}
mutation DismissCreatorHomeCardCommunityCategory($input: DismissCreatorHomeCardCommunityCategoryInput!) {
  dismissCreatorHomeCardCommunityCategory(input: $input) {
    identifier
    error
  }
}
query VideoPlayer_VODSeekbarPreviewVideo($videoID: ID, $includePrivate: Boolean = false) {
  video(id: $videoID, options: {includePrivate: $includePrivate}) {
    id
    seekPreviewsURL
  }
}
mutation UpdateInviteStatus($input: UpdateGuestStarInviteStateInput!) {
  updateGuestStarInviteState(input: $input) {
    error {
      code
    }
    invite {
      guest {
        id
        login
      }
      readyState
      audio {
        isEnabled
        isAvailable
      }
      video {
        isEnabled
        isAvailable
      }
      willNotifyFollowers
    }
  }
}
fragment videoManagerVideo on Video {
  id
  broadcastType
  description
  game {
    id
    name
  }
  language
  lengthSeconds
  muteInfo {
    mutedSegmentConnection {
      nodes {
        duration
        offset
      }
    }
  }
  previewThumbnailURL
  publishedAt
  scope
  status
  tags
  thumbnailURLs
  title
  viewableAt
  viewCount
  deletedAt
}
query ChannelPointsAvailable($login: String) {
  user(login: $login) {
    id
    channel {
      id
      communityPointsSettings {
        isAvailable
      }
    }
  }
}
query GuestStarRecents($channelID: ID, $channelLogin: String, $after: Cursor, $first: Int) {
  guestStarRecentGuests(channelID: $channelID, channelLogin: $channelLogin, after: $after, first: $first) {
    pageInfo {
      hasNextPage
    }
    edges {
      cursor
      node {
        lastInvitedAt
        recentGuest {
          id
          self {
            hasGuestStarFavorited
          }
        }
      }
    }
  }
}
mutation SetModSettings($input: SetGuestStarUserSettingsInput!) {
  setGuestStarUserSettings(input: $input) {
    error {
      code
    }
  }
}
mutation RemoveEditorUser($input: RemoveEditorInput!) {
  removeEditor(input: $input) {
    channel {
      id
    }
    targetUser {
      id
    }
    error {
      code
    }
  }
}
fragment freeformTagFragment on FreeformTag {
  id
  name
}
fragment recentPredictionFragment on Prediction {
  id
  event {
    id
  }
  isResultAcknowledged
  outcome {
    id
  }
  points
  pointsWon
  predictedAt
  result
  updatedAt
}
mutation FollowGameCard_UnfollowGame($input: UnfollowGameInput!) {
  unfollowGame(input: $input) {
    game {
      id
      self {
        follow {
          followedAt
        }
      }
    }
  }
}
query RequireTwoFactorEnabled {
  currentUser {
    id
    settings {
      hasTwoFactorEnabled
    }
  }
}
mutation UpdateMutingThresholdStatus($input: UpdateChannelVODSettingsInput!) {
  updateChannelVODSettings(input: $input) {
    channel {
      id
      vodSettings {
        publishSettings {
          wasDisabled
        }
      }
    }
  }
}
fragment progressCardFragment on ProgressCreatorHomeCard {
  previousValue
  currentValue
  delta
  startAt
  endAt
  error {
    code
  }
}
mutation DevExtensionSettingsSetBillingManager($input: AssignExtensionBillingManagerInput!) {
  assignExtensionBillingManager(input: $input) {
    error {
      code
    }
  }
}
query SupportPanelBenefitsSectionEmotes($login: String!) {
  user(login: $login) {
    id
    subscriptionProducts {
      id
      emotes {
        id
        token
      }
    }
  }
}
mutation RemoveOrgMember($input: RemoveOrganizationMemberInput!) {
  removeOrganizationMember(input: $input) {
    error {
      code
    }
  }
}
query ViewerCard_CommunityMoments($userLogin: String!, $channelLogin: String!, $first: Int!, $cursor: Cursor) {
  channelViewer(userLogin: $userLogin, channelLogin: $channelLogin) {
    id
    earnedCommunityMoments(first: $first, after: $cursor) {
      edges {
        cursor
        node {
          id
          claimCount
          createdAt
          clip {
            id
            title
            thumbnailURL
            url
          }
        }
      }
      totalCount
      pageInfo {
        hasNextPage
      }
    }
  }
  user(login: $channelLogin) {
    id
    primaryColorHex
  }
}
mutation setFavoriteManagementStatus($input: SetFavoriteManagementStatusInput!) {
  setFavoriteManagementStatus(input: $input) {
    error {
      code
    }
    status
  }
}
query ExtensionsDiscoveryPage($first: Int!, $afterCursor: Cursor, $skipCurrentUser: Boolean!, $featuredCategoryID: ID!) {
  currentUser @skip(if: $skipCurrentUser) {
    id
    broadcastSettings {
      id
      game {
        id
        extensionRecommendations {
          extension {
            ...ExtensionsDiscoveryPage_Extension
          }
        }
      }
    }
    cheer {
      id
    }
    installedExtensions {
      ...ExtensionsDiscoveryPage_ExtensionInstallation
    }
    login
  }
  extensionCategory(id: $featuredCategoryID) {
    id
    description
    extensions {
      edges {
        extension: node {
          ...ExtensionsDiscoveryPage_Extension
        }
      }
    }
    name
  }
  extensionCategories(first: $first, after: $afterCursor) {
    edges {
      cursor
      category: node {
        id
        description
        extensions(first: 6) {
          edges {
            extension: node {
              ...ExtensionsDiscoveryPage_Extension
            }
          }
        }
        name
        type
      }
    }
    pageInfo {
      hasNextPage
    }
  }
}

fragment ExtensionsDiscoveryPage_Extension on Extension {
  id
  authorName
  clientID
  iconURLs {
    square100
  }
  screenshotURLs
  isBitsEnabled
  bitsSupportLevel
  name
  self {
    canInstall
  }
  state
  summary
  version
}

fragment ExtensionsDiscoveryPage_ExtensionInstallation on ExtensionInstallation {
  id
  activationConfig {
    state
  }
  extension {
    id
    version
    clientID
  }
}
query DirectoryRoot_Directory($slug: String) {
  game(slug: $slug) {
    id
    name
    displayName
    slug
  }
}
fragment AdRequestCurrentUser on User {
  id
  hasTurbo
}
query StreamSummary_NoVodErrorConditions($channelID: ID!) {
  user(id: $channelID) {
    id
    roles {
      isAffiliate
      isPartner
    }
    hasPrime
    hasTurbo
    channel {
      id
      videoStreamSettings {
        shouldArchiveVODs
      }
    }
  }
}
mutation updateSquadInvitePolicy($input: UpdateSquadInvitePolicyInput!) {
  updateSquadInvitePolicy(input: $input) {
    user {
      id
      squadStreamSettings {
        incomingInvitePolicy
      }
    }
  }
}
query VideoPlayerStreamInfoOverlayClip($slug: ID!) {
  clip(slug: $slug) {
    id
    title
    slug
    broadcaster {
      id
      login
      displayName
      profileURL
      profileImageURL(width: 150)
    }
    game {
      id
      displayName
      name
    }
    viewCount
  }
}
query ChatClip($clipSlug: ID!) {
  clip(slug: $clipSlug) {
    id
    videoOffsetSeconds
    durationSeconds
    video {
      id
    }
  }
}
query RestrictStreamViewingSettings($channelID: ID!) {
  restrictStreamViewingSettings(channelID: $channelID) {
    shouldRestrictBannedChatters
  }
}
query RewardCodeModal($rewardCampaignID: ID!, $rewardID: ID!) {
  currentUser {
    id
    inventory {
      rewardValue(rewardCampaignID: $rewardCampaignID, rewardID: $rewardID) {
        value
        rewardID
        rewardCampaignID
        expiresAt
      }
    }
  }
}
query AdBreakLiveEventService_QueryAdProperties($login: String!) {
  user(login: $login) {
    id
    adProperties {
      density {
        reminder {
          isChatReminderEnabled
        }
      }
    }
  }
}
mutation RemoveInviteFromSession($input: RemoveGuestStarInviteInput!) {
  removeGuestStarInvite(input: $input) {
    error {
      code
    }
  }
}
query DevOnlyEngineTest1($first: Int) {
  games(first: $first) {
    edges {
      node {
        id
        name
        boxArtURL(width: 250, height: 300)
        viewersCount
      }
    }
  }
}
fragment commerceNoticeFragment on CommerceNotice {
  type
  data {
    key
    value
  }
}
fragment broadcasterInfo on User {
  id
  displayName
}

fragment contentClassificationLabelFields on ContentClassificationLabel {
  id
  localizedName
}

fragment gameTrackingFields on Game {
  id
  name
}

query ContentClassificationContext($login: String, $clipSlug: ID!, $vodID: ID, $isStream: Boolean!, $isVOD: Boolean!, $isClip: Boolean!) {
  user(login: $login) @include(if: $isStream) {
    id
    stream {
      id
      game {
        ...gameTrackingFields
      }
      contentClassificationLabels {
        ...contentClassificationLabelFields
      }
      contentClassificationLabelPolicyProperties {
        ...contentClassificationLabelPoliciesFields
      }
    }
    ...broadcasterInfo
  }
  video(id: $vodID) @include(if: $isVOD) {
    id
    broadcastType
    game {
      ...gameTrackingFields
    }
    owner {
      ...broadcasterInfo
    }
    contentClassificationLabels {
      ...contentClassificationLabelFields
    }
    contentClassificationLabelPolicyProperties {
      ...contentClassificationLabelPoliciesFields
    }
  }
  clip(slug: $clipSlug) @include(if: $isClip) {
    id
    slug
    broadcaster {
      ...broadcasterInfo
    }
    game {
      ...gameTrackingFields
    }
    contentClassificationLabels {
      ...contentClassificationLabelFields
    }
    contentClassificationLabelPolicyProperties {
      ...contentClassificationLabelPoliciesFields
    }
  }
}
query AdIncentiveOffer_RecommendationsPage($login: String) {
  user(login: $login) {
    id
    adProperties {
      density {
        isInPartnerRevshareProgram
        targetAdMinutesForRevenueShare
        interval {
          desiredSeconds
        }
        duration {
          desiredSeconds
        }
        startDelay {
          desiredSeconds
        }
        reminder {
          isEnabled
          seconds
        }
      }
      availableOffers: incentiveOffers(status: AVAILABLE) {
        ...AdIncentiveOffer_RecommendationFields
      }
      selectedOffers: incentiveOffers(status: SELECTED) {
        ...AdIncentiveOffer_RecommendationFields
      }
    }
  }
}

fragment AdIncentiveOffer_RecommendationFields on AdIncentiveOffer {
  id
  selectionPeriodStartAt
  targetHoursBroadcast
  startAt
  endAt
  rank
  density
  status
  isViewed
  setID
  suggestedAdDurationSeconds
  suggestedAdIntervalSeconds
  id
  type
  campaignID
  isTest
  revenueForecastInCents {
    min
    max
  }
}
mutation EditBroadcastContext_ChannelRerunStatusMutation($input: SetChannelRerunStatusInput!) {
  setChannelRerunStatus(input: $input) {
    channel {
      id
    }
    channelRerunStatus {
      isRerun
    }
    error {
      code
    }
  }
}
query DetailedBanStatus($targetUserID: ID!, $channelID: ID!) {
  chatRoomBanStatus(channelID: $channelID, userID: $targetUserID) {
    bannedUser {
      id
      login
      displayName
    }
    createdAt
    expiresAt
    isPermanent
    moderator {
      id
      login
      displayName
    }
  }
}
mutation ChannelPanelsCreatePanel($input: CreatePanelInput!) {
  createPanel(input: $input) {
    ...createPanelPayload
  }
}

fragment createPanelPayload on CreatePanelPayload {
  panel {
    id
    type
    ... on DefaultPanel {
      title
      imageURL
      linkURL
      description
    }
    ... on ExtensionPanel {
      slotID
    }
  }
  error
}
query Game_FollowGameCard($name: String) {
  game(name: $name) {
    id
    displayName
    self {
      follow {
        followedAt
      }
    }
  }
}
query GetGuestStarBrowserSourceProps($channelLogin: String!, $sessionOptions: GuestStarSessionOptions!, $viewOnlyToken: String) {
  user(login: $channelLogin) {
    id
  }
  guestStarSession(options: $sessionOptions) {
    id
    host {
      id
      login
    }
    hostSettings {
      browserSourceLayout
    }
  }
  guestStarSettings(userLogin: $channelLogin, viewOnlyKey: $viewOnlyToken) {
    id
    hostSettings {
      isBrowserSourceAudioEnabled
      isSelfCamEnabled
      shouldSendSelfCamAudioViaBrowserSource
      browserSourceLayout
    }
  }
}
mutation CommonHooks_BlockUser($input: BlockUserInput!) {
  blockUser(input: $input) {
    targetUser {
      id
      login
      profileImageURL(width: 28)
      displayName
    }
  }
}
query UsernameRenameStatus {
  currentUser {
    id
    loginRenameStatus {
      isEligible
      eligibleAt
    }
  }
}
query TopNav_CurrentUser {
  currentUser {
    id
    createdAt
    hasPresto
    hasPrime
    hasTurbo
  }
  requestInfo {
    countryCode
  }
}
query WatchLivePrompt($slug: ID!) {
  clip(slug: $slug) {
    id
    durationSeconds
    broadcaster {
      id
      login
      displayName
      stream {
        id
        game {
          displayName
          id
        }
      }
    }
    thumbnailURL(width: 86, height: 45)
  }
}
query IsInLinkOutExperimentClusterQuery($clusterID: ID!, $userID: ID!) {
  experimentCluster(input: {clusterID: $clusterID, userID: $userID}) {
    id
    isEligible
    experimentGroup
  }
}
mutation ChannelPage_SetSessionStatus($input: SetSessionStatusInput!) {
  setSessionStatus(input: $input) {
    setAgainInSeconds
  }
}
fragment pointsImageFragment on CommunityPointsImage {
  url
  url2x
  url4x
}
mutation BanVideoCommenter($channelID: ID!, $commenterID: ID!) {
  banVideoCommenter(input: {channelID: $channelID, commenterID: $commenterID}) {
    __typename
  }
}
query FoundersBadgePanelQuery($channelID: ID!) {
  channel(id: $channelID) {
    id
    founders {
      entitlementStart
      entitlementOwnerID
      isSubscribed
      isBanned
      isBlocked
      user {
        id
        login
        displayName
        profileImageURL(width: 70)
      }
    }
  }
}
fragment AdRequestTag on Tag {
  id
  tagName
}
fragment guestStarUser on User {
  id
  login
  displayName
  profileImageURL(width: 300)
  primaryColorHex
}
query ChannelAnalytics_ViewerOverlapPanel($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    login
    channelAnalyticsContentOverlap {
      channels {
        viewersAlsoWatch {
          id
          login
          displayName
          profileImageURL(width: 70)
        }
        score
      }
    }
  }
}
query AccessIsChannelPointsPredictionsEnabledQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    channel {
      id
      predictionSettings {
        isEligibleForPredictions
        canModeratorsManagePredictions
      }
    }
  }
}
mutation removeEditor($input: RemoveEditorInput!) {
  removeEditor(input: $input) {
    error {
      code
    }
  }
}
query ChannelPanels($id: ID!) {
  currentUser {
    id
    login
    roles {
      isStaff
      isSiteAdmin
    }
  }
  user(id: $id) {
    id
    cheer {
      id
    }
    login
    panels {
      ...channelPanelsPanel
    }
    self {
      banStatus {
        isPermanent
        expiresInMs
      }
    }
  }
}

fragment channelPanelsPanel on Panel {
  ...channelPanelsDefaultPanel
  ...channelPanelsExtensionPanel
}

fragment channelPanelsExtensionPanel on ExtensionPanel {
  id
  type
  slotID
}

fragment channelPanelsDefaultPanel on DefaultPanel {
  id
  type
  title
  imageURL
  linkURL
  description
}
query DevGetExtensionManifestsSummary($id: ID!) {
  extensionManifestsSummary(id: $id) {
    isDeleted
  }
}
query DirectoryGameRedirect($name: String!) {
  game(name: $name) {
    id
    slug
  }
}
query SpotlightSubscriptionsEnabledQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    subscriptionProducts {
      id
    }
  }
}
query ChatScreenReaderAutoAnnounce {
  currentUser {
    id
    isChatScreenReaderAutoAnnounceEnabled
  }
}
query CharityParticipationPageQuery($channelName: String!, $charityID: ID!, $first: Int!, $after: Cursor) {
  channel(name: $channelName) {
    id
    charityCampaignParticipationEvents(id: $charityID, first: $first, after: $after) {
      edges {
        node {
          ...charityCampaignParticipationEvents
        }
        cursor
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}

fragment charityCampaignParticipationEvents on CharityDonationEvent {
  donator {
    displayName
    id
    login
    profileImageURL(width: 50)
  }
  time
  donation {
    amount
    exponent
    currencyType
  }
}
mutation ExtensionDetailsPage_InstallExtension($input: InstallExtensionInput!) {
  installExtension(input: $input) {
    installedExtension {
      id
      extension {
        id
        clientID
        version
      }
    }
  }
}
fragment watchPartyProgress on WatchPartyProgress {
  durationSeconds
  positionSeconds
  start
}
query AdsManagerFirstTimeUserExperienceQuery($login: String!) {
  user(login: $login) {
    id
    adProperties {
      density {
        adManagerFirstTimeUserExperienceConfig {
          hasSeenManagerFull
          installRemindedAt
        }
      }
    }
  }
}
mutation ExtensionConfigureModal_ApplyExtensionActivations($input: ApplyExtensionActivationsInput!) {
  applyExtensionActivations(input: $input) {
    installedExtensions {
      id
      activationConfig {
        anchor
        slot
        state
      }
      extension {
        id
        clientID
        contentMatchedGames {
          id
          displayName
        }
        name
        hasChatSupport
        bitsSupportLevel
        isBitsEnabled
        subscriptionsSupportLevel
        version
      }
      permittedFeatures {
        canSendChat
        canRetrieveSubscriptionStatus
        canUseBits
        dynamicManagement {
          game {
            id
            displayName
          }
          isManaged
        }
      }
      requiredActions {
        type
      }
      self {
        canActivate
      }
    }
  }
}
query OnboardingChannelsSearch($query: String!, $target: SearchForTarget) {
  searchFor(userQuery: $query, platform: "web", target: $target) {
    channels {
      ...onboardingChannelsFragment
    }
  }
}

fragment onboardingChannelsFragment on SearchForResultUsers {
  cursor
  items {
    ...onboardingChannelFragment
  }
}

fragment onboardingChannelFragment on User {
  id
  displayName
  followers {
    totalCount
  }
  login
  profileImageURL(width: 150)
}
query CommonHooks_BlockedUsersWithDetails {
  currentUser {
    id
    blockedUsersWithMetadata(first: 1000, after: "") {
      edges {
        node {
          id
          login
          profileImageURL(width: 28)
          displayName
        }
        blockedAt
      }
    }
  }
}
query WatchPartyChannelPage($channelLogin: String!, $accessToken: String, $withLWAAccessToken: Boolean!) {
  currentUser {
    ...watchPartyPageCurrentUser
  }
  user(login: $channelLogin) {
    id
    displayName
    watchParty(accessToken: $accessToken, decorated: true) {
      ...watchPartyPagePayload
    }
  }
}
query PurchaseOrderSuccessSnackbar($channelID: ID) {
  currentUser {
    id
    bitsBalance
    bitsOffers {
      id
      bits
    }
  }
  channel(id: $channelID) {
    id
    name
  }
}
fragment dashboardDropCampaign on DropCampaign {
  id
  name
  owner {
    id
    name
  }
  game {
    id
    displayName
    boxArtURL(width: 120, height: 160)
  }
  status
  startAt
  endAt
}
query ChannelInfo($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    login
    displayName
  }
}
fragment chanlet on Channel {
  id
  owner {
    id
    login
    profileImageURL(width: 28)
    broadcastSettings {
      id
      title
    }
  }
  stream {
    id
    previewImageURL(height: 214, width: 380)
    viewersCount
  }
  contentAttributes {
    ...chanletContentAttribute
  }
  restriction {
    id
    type
    exemptions {
      startsAt
      endsAt
      type
    }
  }
  self {
    isAuthorized
  }
}

fragment chanletContentAttribute on MultiviewContentAttribute {
  createdAt
  id
  imageURL
  key
  name
  ownerChannel {
    id
  }
  parentID
  parentKey
  updatedAt
  value
  valueShortName
}

query MultiviewGetChanletDetails($channelLogin: String) {
  user(login: $channelLogin) {
    id
    displayName
    stream {
      id
      type
    }
    offlineImageURL
    subscriptionProducts {
      id
      name
      type
    }
    channel {
      id
      chanlets(sort: VIEWER_COUNT) {
        ...chanlet
      }
    }
    self {
      subscriptionBenefit {
        id
      }
    }
  }
}
mutation ExtensionDetailsPage_UninstallExtension($input: UninstallExtensionInput!) {
  uninstallExtension(input: $input) {
    id
  }
}
query VideoPlayerPremiumContentOverlayChannel($channel: String) {
  user(login: $channel) {
    id
    stream {
      id
      restriction {
        id
        options
        type
      }
    }
  }
}
mutation SetHappeningNowSettings($input: SetChatHappeningNowSettingsInput!) {
  setChatHappeningNowSettings(input: $input) {
    isChatHappeningNowEnabled
  }
}
mutation DownloadSubsListMutation($input: GenerateSubscribersCSVInput!) {
  generateSubscribersCSV(input: $input) {
    channelID
  }
}
mutation SetCustomSubBenefit($input: SetCustomSubBenefitInput!) {
  setCustomSubBenefit(input: $input) {
    error {
      code
    }
  }
}
mutation UpdateStreamerShelfPreferences($input: UpdateChannelHomePreferencesInput!) {
  updateChannelHomePreferences(input: $input) {
    channel {
      id
      home {
        preferences {
          streamerShelfType
        }
      }
    }
    error
  }
}
query ViewerCardModLogsPermissions($channelLogin: String!) {
  channelUser: user(login: $channelLogin) {
    id
    login
    self {
      isModerator
    }
  }
  channel(name: $channelLogin) {
    id
    moderationSettings {
      canAccessViewerCardModLogs
    }
  }
  currentUser {
    login
    id
  }
}
query ActivityFeed_IsFollowingV2($login: String!) {
  user(login: $login) {
    id
    self {
      follower {
        disableNotifications
      }
    }
  }
}
mutation UpdateUserSponsorshipSettings($input: UpdateUserSponsorshipSettingsInput!) {
  updateUserSponsorshipSettings(input: $input) {
    settings {
      activationSettings {
        channelSkinVideoOverlayAssetPosition
      }
    }
    error {
      code
    }
  }
}
query Announcement_CreatorColor($login: String!) {
  user(login: $login) {
    id
    primaryColorHex
  }
}
query Follow_User($login: String!) {
  user(login: $login) {
    id
    login
    displayName
    bannerImageURL
    description
    profileImageURL(width: 150)
    roles {
      isPartner
    }
    stream {
      id
      type
    }
    settings {
      visibility
    }
    followers {
      totalCount
    }
    self {
      canFollow
      follower {
        disableNotifications
        followedAt
      }
    }
  }
}
query Prime_PrimeOffers_CurrentUser {
  currentUser {
    id
    hasPrime
  }
  requestInfo {
    countryCode
  }
}
mutation SendSubsOnlyMessage($input: SendChatMessageThroughSubscriberModeInput!) {
  sendChatMessageThroughSubscriberMode(input: $input) {
    balance
    error {
      code
    }
  }
}
query Spotlight_General_Settings {
  currentUser {
    id
    profileImageURL(width: 70)
  }
}
query CelebrationEmotes($channelID: ID!) {
  user(id: $channelID) {
    id
    subscriptionProducts {
      id
      emoteGroups {
        id
        emotes {
          id
          setID
          token
          assetType
        }
      }
      tier
    }
  }
}
query StreamerAccentColor($channelID: ID!) {
  user(id: $channelID) {
    id
    primaryColorHex
  }
}
query LiveDashboard_PollsWidget_IsEnabled($login: String!) {
  channel: user(login: $login) {
    id
    roles {
      isPartner
      isAffiliate
    }
  }
}
query ClipsCreatedTimeseriesStats_StreamSummary($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      granularity
      clipsCreated {
        value
        timestamp
      }
    }
  }
}
mutation updateAutohostSettings($input: UpdateAutohostSettingsInput!) {
  updateAutohostSettings(input: $input) {
    user {
      id
      autohostSettings {
        enabled
        strategy
      }
    }
  }
}
query Dev_Only_GQL($shouldSkip: Boolean!) {
  currentUser {
    id
  }
  includeUser: currentUser @include(if: $shouldSkip) {
    id
  }
  skipUser: currentUser @skip(if: $shouldSkip) {
    id
  }
}
mutation CancelPaidUpgradeSubscription($input: CancelPaidUpgradeSubscriptionInput!) {
  cancelPaidUpgradeSubscription(input: $input) {
    subscriptionID
    errorCode
  }
}
mutation SendWhisper($input: SendWhisperInput!) {
  sendWhisper(input: $input) {
    message {
      id
      nonce
      content {
        content
        emotes {
          id
          emoteID
          setID
          from
          to
          __typename
        }
        __typename
      }
      from {
        id
        __typename
      }
      sentAt
      editedAt
      deletedAt
      thread {
        id
        participants {
          id
          self {
            whisperPermissions {
              receive
            }
          }
        }
      }
      __typename
    }
    error {
      code
      __typename
    }
    __typename
  }
}
fragment clipReferrals on ClipReferrals {
  total
  referrers {
    name
    total
    referrals {
      total
      timestamp
    }
  }
}
fragment unbanRequestFragment on UnbanRequest {
  id
  createdAt
  status
  requester {
    id
    login
    displayName
    profileImageURL(width: 50)
  }
  requesterMessage
  resolvedAt
  resolverMessage
  resolvedBy {
    id
    login
    displayName
    chatColor
  }
}
query AdsSchedulerSettingsPage_AdProperties($login: String!) {
  user(login: $login) {
    id
    roles {
      isPartner
      isAffiliate
    }
    adProperties {
      density {
        isAutoSnoozeEnabled
        isAdScheduleEnabled
        targetAdMinutesForRevenueShare
        interval {
          ...allAdScheduleFields
        }
        duration {
          ...allAdScheduleFields
        }
        startDelay {
          ...allAdScheduleFields
        }
        reminder {
          isEnabled
          seconds
          maxSeconds
          isChatReminderEnabled
          isModChatReminderEnabled
        }
        adManagerFirstTimeUserExperienceConfig {
          hasSeenManagerFull
          hasSeenManagerIntro
          hasSeenScheduler
          hasAcceptedP55Terms
          installRemindedAt
        }
        isInPartnerRevshareProgram
        isOptimizedAdScheduleEnabled
        isInToadExperiment
      }
      disablePrerollsAbility {
        hasDisablePrerollsAbilityAccess
        hasDisablePrerollsAbilityEnabled
        disablePrerollsTimeEarned {
          midrollLengthSeconds
          prerollFreeTimeSeconds
        }
      }
    }
  }
}

fragment allAdScheduleFields on AdScheduleConfig {
  desiredSeconds
  minSeconds
  maxSeconds
}
query SinceLastAdTileQuery($login: String!) {
  user(login: $login) {
    id
    adProperties {
      lastTriggeredAt
    }
  }
}
mutation SetViewerCardModLogsAccessMutation($input: SetViewerCardModLogsAccessInput!) {
  setViewerCardModLogsAccess(input: $input) {
    error {
      code
    }
    channel {
      id
      moderationSettings {
        canAccessViewerCardModLogs
      }
    }
  }
}
mutation UpdateRoomModes($input: UpdateRoomModesInput!) {
  updateRoomModes(input: $input) {
    room {
      id
      modes {
        slowModeDurationSeconds
        r9kModeEnabled
        emotesOnlyModeEnabled
      }
    }
    error {
      code
      minimumSlowModeDurationSeconds
      maximumSlowModeDurationSeconds
    }
  }
}
mutation rejectSquadStreamOutOfNetworkInvitations($input: RejectSquadStreamOutOfNetworkInvitationsInput!) {
  rejectSquadStreamOutOfNetworkInvitations(input: $input) {
    error {
      code
    }
  }
}
query ContentMatchedExtensionConfigure($hasStreamCategory: Boolean!, $streamCategoryID: ID) {
  currentUser {
    id
    installedExtensions {
      id
      activationConfig {
        anchor
        state
      }
      extension {
        id
        clientID
        name
        version
        views {
          component {
            viewerURL
          }
          videoOverlay {
            viewerURL
          }
        }
      }
      requiredActions {
        type
      }
    }
  }
  game(id: $streamCategoryID) @include(if: $hasStreamCategory) {
    id
    name
  }
}
mutation SyncedSettingsSetDeletedMessageDisplaySetting($input: SetDeletedMessageDisplaySettingInput!) {
  setDeletedMessageDisplaySetting(input: $input) {
    deletedMessageDisplaySetting
  }
}
mutation SyncedSettingsSetReadableChatColors($input: SetReadableChatColorsEnabledInput!) {
  setReadableChatColorsEnabled(input: $input) {
    isReadableChatColorsEnabled
  }
}
query CheckoutPaymentsDisclaimer {
  requestInfo {
    countryCode
  }
}
query ChatModeratorStrikeStatus($targetUserID: ID!, $channelID: ID!) {
  chatModeratorStrikeStatus(channelID: $channelID, userID: $targetUserID) {
    moderatedUser {
      id
      login
      displayName
    }
    roomOwner {
      id
      login
      displayName
    }
    banDetails {
      bannedBy {
        id
        displayName
        login
      }
      createdAt
      reason
    }
    timeoutDetails {
      timedOutBy {
        id
        displayName
        login
      }
      createdAt
      expiresAt
      reason
    }
    warningDetails {
      warnedBy {
        id
        displayName
        login
      }
      createdAt
      reason
      chatRulesCited
    }
  }
}
fragment shelfTitleGame on Game {
  id
  displayName
}

fragment shelfTitle on ShelfTitle {
  key
  fallbackLocalizedTitle
  localizedTitleTokens {
    ...titleToken
  }
  context {
    ...shelfTitleGame
  }
}

fragment titleToken on TitleTokenEdge {
  node {
    ... on Game {
      id
      categorySlug: slug
      name
      displayName
    }
    ... on TextToken {
      text
      hasEmphasis
      location
    }
    ... on User {
      id
      login
      nameForDisplay: displayName
    }
    ... on Tag {
      id
      tagName
    }
    ... on IntegerToken {
      value
    }
    ... on DateToken {
      time
    }
    ... on BrowsableCollection {
      id
      slug
      collectionName: name {
        fallbackLocalizedTitle
      }
    }
  }
}
query DevExtensionPayoutInviteStatus_CurrentUser {
  currentUser {
    id
    login
    roles {
      isAffiliate
      isExtensionsDeveloper
      isPartner
    }
    payoutInvite {
      id
      category
      workflow {
        id
        currentStep
      }
    }
  }
}
query ReferralAnalyticsCollectionsCategories($channelID: ID!, $start: Time!, $end: Time!, $first: Int!, $dimension: ReferralsDimension!, $filter: ReferralsFilter!) {
  channel: user(id: $channelID) {
    id
    referrals: videoPlayReferrals(start: $start, end: $end, first: $first, dimension: $dimension, filter: $filter) {
      items {
        count
        name
      }
    }
  }
}
mutation UnmodUser($input: UnmodUserInput!) {
  unmodUser(input: $input) {
    channel {
      id
      login
    }
    target {
      id
      login
    }
    error {
      code
    }
  }
}
query DevOnlyEngineTest2($first: Int) {
  games(first: $first) {
    edges {
      node {
        id
        name
        boxArtURL(width: 250, height: 300)
      }
    }
  }
}
query StreamRefetchManager($channel: String) {
  user(login: $channel) {
    id
    stream {
      id
      isEncrypted
    }
  }
}
query DropsProgressBar_DropCurrentSession {
  currentUser {
    id
    dropCurrentSession {
      channel {
        id
        name
      }
      game {
        id
        displayName
      }
      currentMinutesWatched
      requiredMinutesWatched
      dropID
    }
  }
}
query BitsConfigContext_Global {
  ...globalCheerInfo
}
fragment activityFeedEmote on Emote {
  id
  token
  setID
  modifiers {
    code
    name
  }
  type
  assetType
}

fragment activityFeedCheermote on ActivityFeedCheermote {
  prefix
  bitsAmount
  tier
}

fragment activityFeedUser on User {
  userID: id
  displayName
  login
}

fragment activityFeedTokens on ActivityFeedText {
  fragments {
    token {
      ... on ActivityFeedTextToken {
        text
      }
      ... on ActivityFeedIntegerToken {
        number
      }
      ... on ActivityFeedPercentToken {
        percent
      }
      ... on User {
        ...activityFeedUser
      }
      ... on Emote {
        ...activityFeedEmote
      }
      ...activityFeedCheermote
      ... on UserDoesNotExist {
        key
      }
      ... on UserError {
        key
      }
    }
    hasEmphasis
  }
}

fragment crowdControlPurchase on CrowdControlPurchase {
  value
  unit
}

fragment crowdControlAlert on ActivityFeedCrowdControlAlert {
  crowdControlType: type
  data {
    ... on CrowdControlEffectData {
      thirdPartyHandle
      itemName
      purchase {
        ...crowdControlPurchase
      }
    }
    ... on CrowdControlExchangeData {
      thirdPartyHandle
      itemName
      purchase {
        ...crowdControlPurchase
      }
      exchangeValue
    }
    ... on CrowdControlPoolData {
      itemName
      poolPercentage
    }
  }
}

fragment streamElementsAlert on ActivityFeedStreamElementsAlert {
  streamElementsType: type
  data {
    ... on StreamElementsMerchData {
      thirdPartyHandle
      message
      itemName
    }
  }
}

fragment streamLabsAlert on ActivityFeedStreamLabsAlert {
  streamLabsType: type
  data {
    ... on StreamLabsTipData {
      thirdPartyHandle
      message
      money {
        amount
        currencyCode
        minorUnits
      }
    }
    ... on StreamLabsMediaData {
      thirdPartyHandle
      itemName
      message
      money {
        amount
        currencyCode
        minorUnits
      }
    }
    ... on StreamLabsMerchData {
      thirdPartyHandle
      itemName
      message
    }
    ... on StreamLabsCharityDonationData {
      thirdPartyHandle
      message
      charityName
      money {
        amount
        currencyCode
        minorUnits
      }
    }
  }
}

fragment throneAlert on ActivityFeedThroneAlert {
  throneType: type
  data {
    ... on ThroneGiftData {
      type
      thirdPartyHandle
      message
      itemName
      link
    }
    ... on ThroneContributionPurchasedData {
      thirdPartyHandle
      itemName
      money {
        amount
        currencyCode
        minorUnits
      }
      link
    }
    ... on ThroneBadgeEarnedData {
      itemName
      itemDescription
      link
    }
  }
}

fragment AlertMessageContent on ActivityFeedAlertMessageContent {
  fragments {
    __typename
    ... on ActivityFeedAlertMessageTextFragment {
      text
    }
    ... on ActivityFeedAlertMessageEmoteFragment {
      emote {
        ...activityFeedEmote
      }
    }
    ... on ActivityFeedAlertMessageCheermoteFragment {
      cheermote {
        ...activityFeedCheermote
      }
    }
    ... on ActivityFeedAlertMessageEmoteNotFound {
      emoteID
    }
  }
}

fragment alertEvent on ActivityFeedAlert {
  __typename
  id
  status
  createdAt
  updatedAt
  ... on ActivityFeedCheerAlert {
    cheerer {
      ...activityFeedUser
    }
    amount
    isAnonymous
    isFirstTimeCheer
    messageContent {
      ...AlertMessageContent
    }
  }
  ... on ActivityFeedCommunityGiftSubscriptionAlert {
    gifter {
      ...activityFeedUser
    }
    isAnonymous
    quantity
    multiMonthDuration
    tier
    totalGiftCount
  }
  ... on ActivityFeedFollowAlert {
    follower {
      ...activityFeedUser
    }
  }
  ... on ActivityFeedHostAlert {
    host {
      ...activityFeedUser
    }
    viewerCount
    isAutoHost
  }
  ... on ActivityFeedIndividualGiftSubscriptionAlert {
    gifter {
      ...activityFeedUser
    }
    recipient {
      ...activityFeedUser
    }
    isAnonymous
    multiMonthDuration
    tier
    totalGiftCount
  }
  ... on ActivityFeedPrimeResubscriptionAlert {
    subscriber {
      ...activityFeedUser
    }
    totalDuration
    messageContent {
      ...AlertMessageContent
    }
    viewerCustomizationSelection {
      alertSetID
      viewerCustomizationID
      image {
        assetMimeType
        assetType
        id
        url
        volume
      }
      sound {
        assetMimeType
        assetType
        id
        isMuted
        name
        url
        volume
      }
    }
  }
  ... on ActivityFeedPrimeSubscriptionAlert {
    subscriber {
      ...activityFeedUser
    }
  }
  ... on ActivityFeedRaidAlert {
    raider {
      ...activityFeedUser
    }
    partySize
  }
  ... on ActivityFeedSubscriptionAlert {
    subscriber {
      ...activityFeedUser
    }
    multiMonthDuration
    tier
  }
  ... on ActivityFeedResubscriptionAlert {
    subscriber {
      ...activityFeedUser
    }
    multiMonthDuration
    streakDuration
    totalDuration
    messageContent {
      ...AlertMessageContent
    }
    tier
    viewerCustomizationSelection {
      alertSetID
      viewerCustomizationID
      image {
        id
        url
        volume
        assetType
        assetMimeType
      }
      sound {
        id
        url
        volume
        isMuted
        assetType
        assetMimeType
        name
      }
    }
  }
  ... on ActivityFeedCreatorGoalAlert {
    goalState
    goalType
    description
    contributions {
      ... on ChannelGoalIntegerContributions {
        currentIntegerContributions: currentContributions
        targetIntegerContributions: targetContributions
      }
      ... on ChannelGoalMoneyContributions {
        currentMoneyContributions: currentContributions {
          amount
          currencyCode
          minorUnits
        }
        targetMoneyContributions: targetContributions {
          amount
          currencyCode
          minorUnits
        }
      }
    }
  }
  ... on ActivityFeedCharityDonationAlert {
    donor {
      ...activityFeedUser
    }
    charityName
    money {
      amount
      currencyCode
      minorUnits
    }
  }
  ... on ActivityFeedChannelPointsRedemptionAlert {
    pointsSpent
    messageContent {
      ...AlertMessageContent
    }
    redeemer {
      ...activityFeedUser
    }
    reward {
      id
      title
    }
  }
  ... on ActivityFeedHypeTrainAlert {
    level
    allTimeHighLevel
    isAllTimeHighLevel
    hypeTrainState
  }
  ... on ActivityFeedPaidPinnedChatAlert {
    purchaser {
      ...activityFeedUser
    }
    messageContent {
      ...AlertMessageContent
    }
    money {
      amount
      currencyCode
      minorUnits
    }
    paidPinnedChatLevel
  }
  ... on ActivityFeedCrowdControlAlert {
    ...crowdControlAlert
  }
  ... on ActivityFeedStreamElementsAlert {
    ...streamElementsAlert
  }
  ... on ActivityFeedStreamLabsAlert {
    ...streamLabsAlert
  }
  ... on ActivityFeedThroneAlert {
    ...throneAlert
  }
}

fragment ActivityFeedEventDetailItem on ActivityFeedEventDetailItem {
  title {
    ...activityFeedTokens
  }
  content {
    ...activityFeedTokens
  }
  value {
    ... on ActivityFeedEventDetailItemNumber {
      value
    }
    ... on ActivityFeedEventDetailItemPercentage {
      value
      total
    }
  }
}

fragment activityFeedEvent on ActivityFeedEvent {
  id
  type
  filterCategoryID
  timestamp
  title {
    ...activityFeedTokens
  }
  content {
    ...activityFeedTokens
  }
  contentBody {
    ...activityFeedTokens
  }
  user {
    id
    displayName
    login
  }
  userContent {
    ...activityFeedTokens
  }
  alert {
    ...alertEvent
  }
  details {
    ... on ActivityFeedEventDetailList {
      items {
        ...ActivityFeedEventDetailItem
      }
      pinnedItems {
        ...ActivityFeedEventDetailItem
      }
    }
  }
}

query ActivityListContextV2Query($channelID: ID!, $limit: Int!, $cursor: Cursor) {
  channel(id: $channelID) {
    id
    activityFeed {
      events(first: $limit, after: $cursor) {
        edges {
          node {
            ...activityFeedEvent
          }
          cursor
        }
        pageInfo {
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
mutation MultiStreamPlayer_FollowUser($input: FollowUserInput!) {
  followUser(input: $input) {
    follow {
      disableNotifications
    }
  }
}
query GuestStarViewerFollowing($login: String!) {
  user(login: $login) {
    id
    self {
      follower {
        followedAt
      }
    }
  }
}
query Mods($login: String!) {
  user(login: $login) {
    id
    mods(first: 100) {
      edges {
        node {
          id
          login
        }
      }
    }
  }
}
fragment tagFragment on Tag {
  id
  isLanguageTag
  localizedName
  tagName
}
query GetUserID($login: String!, $lookupType: UserLookupType!) {
  user(login: $login, lookupType: $lookupType) {
    id
  }
}
query ChannelAvatar($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    followers {
      totalCount
    }
    isPartner
    primaryColorHex
  }
}
mutation convertAlertTextToSpeech($input: ConvertAlertTextToSpeechInput!) {
  convertAlertTextToSpeech(input: $input) {
    speech {
      id
      url
    }
    error
  }
}
fragment yourCommunityGameFragment on Game {
  name
  id
  boxArtURL(width: 200, height: 300)
  viewersCount
  slug
}
query NewSubscriptionsTimeseriesStats_StreamSummary($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      granularity
      newSubscriptions {
        value
        timestamp
      }
    }
  }
}
query ClipsEditPoller($slug: ID!) {
  clip(slug: $slug) {
    id
    broadcaster {
      id
      displayName
      login
    }
    game {
      id
      name
    }
    creationState
  }
}
query ChannelRoot_AboutPanel($channelLogin: String!, $skipSchedule: Boolean!) {
  currentUser {
    id
    login
  }
  user(login: $channelLogin) {
    id
    description
    displayName
    isPartner
    primaryColorHex
    profileImageURL(width: 300)
    followers {
      totalCount
    }
    channel {
      id
      socialMedias {
        ...SocialMedia
      }
      schedule @skip(if: $skipSchedule) {
        id
        nextSegment {
          id
          startAt
          hasReminder
        }
      }
    }
    lastBroadcast {
      id
      game {
        id
        displayName
      }
    }
    primaryTeam {
      id
      name
      displayName
    }
    videos(first: 30, sort: TIME, type: ARCHIVE) {
      edges {
        ...userBioVideo
      }
    }
  }
}

fragment userBioVideo on VideoEdge {
  node {
    id
    game {
      id
      displayName
    }
    status
  }
}

fragment SocialMedia on SocialMedia {
  id
  name
  title
  url
}
query VideoAdRequestDecline($context: AdRequestContext!) {
  adContext(context: $context) {
    id
    radToken
    declineState {
      reason
      shouldDecline
    }
  }
}
query Channel_Analytics_Sub_Counts($startAt: Time!, $endAt: Time!, $period: TimeSeriesPeriod!, $channel: String!) {
  creatorDashboard(startAt: $startAt, endAt: $endAt, period: $period, channel: $channel) {
    channelAnalytics {
      subCountSeries {
        subCountSeriesDataPoints {
          giftSubTierBreakdown {
            count
            tier
          }
          multiMonthSubTierBreakdown {
            count
            tier
          }
          paidSubTierBreakdown {
            count
            tier
          }
          timeStamp
          totalPrimeSubCount
        }
      }
    }
  }
}
mutation RegenerateGuestStarViewOnlyToken($input: RegenerateGuestStarViewOnlyTokenInput!) {
  regenerateGuestStarViewOnlyToken(input: $input) {
    error {
      code
    }
  }
}
query VideoPlayerStatusOverlayChannel($channel: String) {
  user(login: $channel) {
    id
    stream {
      id
      type
    }
  }
}
fragment alertAssetFragment on AlertAsset {
  id
  url
  type
  size
  uploadedAt
  filename
  mimeType
}
query TeamsDashboard_TeamAndUser($login: String!, $teamName: String!) {
  team(name: $teamName) {
    id
  }
  user(login: $login) {
    id
    login
    displayName
    profileImageURL(width: 70)
  }
}
query VideoAdBanner($input: UserByAttribute!) {
  userByAttribute(input: $input) {
    ...VideoAdBannerChannel
  }
}
fragment badge on Badge {
  id
  setID
  version
  title
  image1x: imageURL(size: NORMAL)
  image2x: imageURL(size: DOUBLE)
  image4x: imageURL(size: QUADRUPLE)
  clickAction
  clickURL
}
query ChatLoginModerationTracking($channelID: ID!, $targetUserID: ID!) {
  target: user(id: $targetUserID) {
    id
    login
  }
  channel: user(id: $channelID) {
    id
    login
    self {
      isModerator
      isEditor
    }
  }
  currentUser {
    id
    login
    roles {
      isStaff
    }
  }
}
query Invites_Badge_SquadStreamWidget($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    incomingSquadStreamInvitations {
      totalCount
    }
    squadStreamSettings {
      canAccessSquads
    }
  }
}
query PbyPGame($channelLogin: String!, $tagType: TagType!) {
  user(login: $channelLogin) {
    id
    stream {
      id
      game {
        id
        name
        tags(tagType: $tagType) {
          id
          tagName
        }
      }
    }
  }
}
mutation Chat_UpdateChatColor($input: UpdateChatColorInput!) {
  updateChatColor(input: $input) {
    user {
      id
      chatColor
    }
  }
}
query LoyaltyBadgesCurrentSection_Query($channelID: ID, $login: String!) {
  user(login: $login) {
    id
    relationship(targetUserID: $channelID) {
      cumulativeTenure: subscriptionTenure(tenureMethod: CUMULATIVE) {
        daysRemaining
        months
      }
    }
    roles {
      isPartner
    }
  }
}
query QuickAction_ManageGoals($channelID: ID!) {
  user(id: $channelID) {
    id
    bannerImageURL
    primaryColorHex
    subscriptionProducts {
      id
    }
    subscriberScore {
      current
      count
      breakdown {
        score
        tier
      }
    }
    followers {
      totalCount
    }
  }
}
mutation QuickActions_CreateCommunityMoment($input: CreateCommunityMomentInput!) {
  createCommunityMoment(input: $input) {
    moment {
      id
      createdAt
    }
    error
  }
}
mutation UnlockModifiedEmote($input: UnlockChosenModifiedSubscriberEmoteInput!) {
  unlockChosenModifiedSubscriberEmote(input: $input) {
    balance
    error {
      code
    }
  }
}
fragment channelLeaderboard on UserLeaderboard {
  id
  items {
    edges {
      cursor
      node {
        ...channelLeaderboardItem
      }
    }
  }
  myPosition {
    ...channelLeaderboardItem
  }
  secondsRemaining
}
query VideoPlayerPixelAnalyticsUrls($login: String, $allowAmazon: Boolean, $allowComscore: Boolean, $allowGoogle: Boolean, $allowNielsen: Boolean) {
  channel: user(login: $login) {
    id
    adProperties {
      trackingPixels(consent: {allowAmazon: $allowAmazon, allowComscore: $allowComscore, allowGoogle: $allowGoogle, allowNielsen: $allowNielsen}) {
        origin
        service
        type
        url
        timeOffsetSeconds
      }
    }
  }
}
query AccessIsAffiliateQuery($channelLogin: String!, $isChannelLoginSameAsUserLogin: Boolean!) {
  user(login: $channelLogin) {
    id
    payoutInvite @include(if: $isChannelLoginSameAsUserLogin) {
      id
      category
    }
    roles {
      isAffiliate
    }
  }
}
query SupportPanelSubTokenOffers($id: ID!, $withSingleGifting: Boolean!, $withCommunityGifting: Boolean!, $withRecurringSubscriptions: Boolean!, $recipientLogin: String) {
  user(id: $id) {
    id
    subscriptionProducts {
      id
      gifting {
        community @include(if: $withCommunityGifting) {
          offer {
            ...subTokenOffer
          }
        }
        standard(recipientLogin: $recipientLogin) @include(if: $withSingleGifting) {
          offer {
            ...subTokenOffer
          }
        }
      }
      offers @include(if: $withRecurringSubscriptions) {
        ...subTokenOffer
      }
      tier
    }
  }
}

fragment subTokenOffer on Offer {
  id
  eligibility {
    isEligible
  }
  listing {
    chargeModel {
      credit {
        amount
        creditType
      }
    }
  }
}
query PaidPinnedChatOffer($params: PurchasableOfferParams!, $quantity: Int!, $inputAmount: MoneyInput) {
  purchasableOffer(params: $params) {
    id
    listing {
      chargeModel {
        internal {
          self {
            recurlyCheckoutPrice: checkoutPrice(quantity: $quantity, paymentProvider: RECURLY, userInputTotal: $inputAmount) {
              errorCode
              checkoutPriceSummary {
                currency
                exponent
                id
                isTaxInclusive
                price
                tax
                total
                wasPriceAdjusted
              }
            }
            xsollaCheckoutPrice: checkoutPrice(quantity: $quantity, paymentProvider: XSOLLA_V3, userInputTotal: $inputAmount) {
              errorCode
              checkoutPriceSummary {
                currency
                exponent
                id
                isTaxInclusive
                price
                tax
                total
                wasPriceAdjusted
              }
            }
          }
          previewPrice {
            currency
            exponent
            id
            isTaxInclusive
            price
            tax
          }
        }
      }
    }
    eligibility {
      isEligible
      purchaseType
      reasonCode
    }
  }
}
query SecurityPage_UserSessions($limit: Int!, $cursor: Cursor, $persistentCookie: String!) {
  currentUser {
    id
    settings {
      userSignedInDevices(first: $limit, after: $cursor, persistentCookie: $persistentCookie) {
        edges {
          cursor
          node {
            browser
            os
            createdAt
            location
            isActiveSession
          }
        }
        totalCount
      }
    }
  }
}
query SubmitAppeal__CurrentUser {
  currentUser {
    id
    login
  }
}
query VideoManagerArchiveUpsell_Channel($channelLogin: String!) {
  channel(name: $channelLogin) {
    id
    videoStreamSettings {
      shouldArchiveVODs
    }
  }
}
fragment categoryTagFragment on Tag {
  id
  tagName
  localizedName
}
mutation CollectionsList_RemoveCollectionItem($input: RemoveCollectionItemInput!) {
  removeCollectionItem(input: $input) {
    collection {
      id
    }
  }
}
query WatchStreakExperiment($channelID: ID!) {
  channelViewerMilestoneSettings(channelID: $channelID) {
    id
    isWatchStreakOptOut
    isInWatchStreakProgressExperiment
  }
}
query StreamSummaryPage_GetRecentStreamSessions($channelID: ID!) {
  user(id: $channelID) {
    id
    streamSessions(first: 30) {
      startedAt
      endedAt
    }
  }
}
query SunlightHomeVideoStreamSettings($channelID: ID!) {
  channel(id: $channelID) {
    id
    videoStreamSettings {
      shouldArchiveVODs
    }
  }
}
fragment bitsCheermoteCampaign on CheermoteCampaign {
  id
  brandImageURL
  brandName
  thresholds {
    id
    minimumBits
    matchedPercent
  }
  minimumBitsAmount
  bitsTotal
  bitsUsed
  bitsPercentageRemaining
  userLimit
  self {
    id
    bitsUsed
    canBeSponsored
  }
}
mutation FollowGameCard_FollowGame($input: FollowGameInput!) {
  followGame(input: $input) {
    game {
      id
      self {
        follow {
          followedAt
        }
      }
    }
  }
}
query MultiStreamPlayer_GetUser($login: String!) {
  user(login: $login) {
    id
    subscriptionProducts {
      id
    }
    self {
      follower {
        disableNotifications
      }
      subscriptionBenefit {
        id
      }
    }
    channel {
      id
      stream {
        id
        self {
          canWatch
        }
      }
    }
  }
}
query PopoutViewerCard_UserQuery($login: String!) {
  user(login: $login) {
    id
    login
  }
}
mutation EndCharityCampaign($input: EndCharityCampaignInput!) {
  endCharityCampaign(input: $input) {
    endedCampaign {
      id
      endsAt
    }
  }
}
fragment guestStarFavoriteUserFragment on GuestStarFavoriteGuestEdge {
  cursor
  node {
    favoriteGuest {
      ...guestStarStreamTogetherUser
    }
    markedAsFavoriteAt
    isMutualFavorite
  }
}

fragment guestStarStreamTogetherUser on User {
  id
  login
  displayName
  profileImageURL(width: 70)
  stream {
    id
    game {
      id
      displayName
    }
  }
}
mutation ChannelPanelsOrderPanels($input: OrderPanelsInput!) {
  orderPanels(input: $input) {
    panels {
      id
      type
      ... on DefaultPanel {
        title
        imageURL
        linkURL
        description
      }
      ... on ExtensionPanel {
        slotID
      }
    }
  }
}
fragment autoModConfiguration on AutoModConfiguration {
  overallLevel
  detailedLevels {
    ableismLevel
    aggressionLevel
    homophobiaLevel
    misogynyLevel
    nameCallingLevel
    profanityLevel
    racismLevel
    sexualityLevel
    smartDetectionLevel
  }
}
query AccessMaxAdBreakLengthQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    adProperties {
      maxAdBreakLength
    }
  }
}
fragment questionAndAnswerSession on QuestionAndAnswerSession {
  id
  channel {
    id
  }
  prompt
  status
  createdAt
  createdBy {
    id
    login
    displayName
  }
  endedAt
  endedBy {
    id
    login
    displayName
  }
}
query WhispersSearchUsersQuery($userQuery: String!) {
  searchUsers(userQuery: $userQuery) {
    edges {
      node {
        id
        login
        displayName
        profileImageURL(width: 50)
      }
    }
  }
}
query LowerHomeHeader($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    self {
      isEditor
    }
  }
}
fragment rewardCampaign on RewardCampaign {
  id
  name
  brand
  startsAt
  endsAt
  status
  summary
  instructions
  externalURL
  rewardValueURLParam
  aboutURL
  image {
    image1xURL
  }
  rewards {
    id
    name
    bannerImage {
      image1xURL
    }
    thumbnailImage {
      image1xURL
    }
    earnableUntil
    redemptionInstructions
    redemptionURL
  }
}
fragment heroNoStreamSummaryCardFragment on GenericCreatorHomeCard {
  display
  error {
    code
  }
}
mutation AdsManagerInstallReminder_SetFirstTimeUserExperienceConfig($input: SetAdManagerFirstTimeUserExperienceConfigInput!) {
  setAdManagerFirstTimeUserExperienceConfig(input: $input) {
    config {
      hasSeenManagerFull
      installRemindedAt
    }
  }
}
query CommunityTabWhisperUser($login: String) {
  currentUser {
    id
  }
  user(login: $login) {
    id
  }
}
fragment subEmoteFragment on Emote {
  id
  token
  setID
  modifiers {
    code
    name
  }
  type
  assetType
}
mutation DismissCreatorHomeCard($input: DismissCreatorHomeCardInput!) {
  dismissCreatorHomeCard(input: $input) {
    identifier
    error
  }
}
mutation SetUnbanRequestsSettings($input: SetUnbanRequestsSettingsInput!) {
  setUnbanRequestsSettings(input: $input) {
    settings {
      isEnabled
      cooldownMinutes
    }
    error {
      code
    }
  }
}
query SwitcherStreamMetadata($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    stream {
      id
      type
    }
  }
}
fragment yourCommunityUserFragment on User {
  displayName
  login
  id
  profileImageURL(width: 300)
  followers {
    totalCount
  }
}
mutation EndGuestStarSession($input: EndGuestStarSessionInput!) {
  endGuestStarSession(input: $input) {
    error {
      code
    }
  }
}
query ChannelShellFollowing($channelLogin: String) {
  user(login: $channelLogin) {
    id
    self {
      follower {
        node {
          id
        }
      }
    }
  }
}
mutation incrementClipViewCount($input: UpdateClipViewCountInput!) {
  updateClipViewCount(input: $input) {
    clip {
      id
    }
  }
}
fragment messageContent on MessageContent {
  text
  fragments {
    ...messageParticle
  }
  __typename
}

fragment messageParticle on MessageFragment {
  text
  content {
    ... on CheermoteToken {
      ...cheermoteFragment
    }
    ... on Emote {
      ...emoteFragment
    }
    ... on User {
      ...mentionFragment
    }
    ... on AutoMod {
      ...automodFragment
    }
    __typename
  }
  __typename
}

fragment cheermoteFragment on CheermoteToken {
  bitsAmount
  prefix
  tier
  __typename
}

fragment emoteFragment on Emote {
  emoteID: id
  setID
  token
  __typename
}

fragment mentionFragment on User {
  id
  login
  displayName
  __typename
}

fragment automodFragment on AutoMod {
  topics {
    type
    weight
    __typename
  }
  __typename
}
query IsWatchStreakShared($channelID: ID!) {
  channel(id: $channelID) {
    id
    self {
      watchStreakMilestone {
        watchStreakMilestone {
          id
          shareStatus
        }
      }
    }
  }
}
mutation ExtensionConfigure_CreatePanel($input: CreatePanelInput!) {
  createPanel(input: $input) {
    panel {
      id
      type
      ... on ExtensionPanel {
        slotID
      }
    }
  }
}
query PopoutDashboardLiveCardPageQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    login
    self {
      isEditor
    }
  }
}
mutation removeAllGuestsFromSession($input: RemoveAllUsersFromGuestStarSlotsInput!) {
  removeAllUsersFromGuestStarSlots(input: $input) {
    error {
      code
    }
  }
}
query SyncedSettingsEmoteAnimations {
  currentUser {
    id
    chatUISettings {
      isEmoteAnimationsEnabled
    }
  }
}
mutation createShoutout($input: CreateShoutoutInput!) {
  createShoutout(input: $input) {
    error
    cooldownEndsAt
  }
}
query Prime_Current_User {
  currentUser {
    id
    hasPrime
  }
}
query GuestStarSubscribers($channelID: ID, $limit: Int, $cursor: String, $order: Int) {
  channel(id: $channelID) {
    id
    allSubscriptions(limit: $limit, cursor: $cursor, order: $order) {
      edges {
        cursor
        node {
          userID
          startsAt
          tier
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
mutation VideoManagerActions_UpdateAllChannelVideosViewability($input: UpdateAllChannelVideosViewabilityInput!) {
  updateAllChannelVideosViewability(input: $input) {
    status {
      code
    }
  }
}
query ChannelPage__ChannelViewersCount($login: String!) {
  user(login: $login) {
    id
    stream {
      id
      viewersCount
    }
  }
}
query MessageBuffer_Channel($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    chatSettings {
      chatDelayMs
    }
  }
}
query PersonalSections($input: PersonalSectionInput!, $creatorAnniversariesFeature: Boolean!) {
  personalSections(input: $input) {
    type
    title {
      ...personalSectionTitle
    }
    items {
      ...personalSectionItem
    }
  }
}

fragment personalSectionTitle on PersonalSectionTitle {
  localizedFallback
  localizedTokens {
    ... on PersonalSectionTextToken {
      value
    }
    ... on User {
      id
      login
      displayName
    }
  }
}

fragment personalSectionItem on PersonalSectionChannel {
  trackingID
  promotionsCampaignID
  user {
    ...personalSectionItemUser
  }
  label
  content {
    ...personalSectionsStream
  }
}

fragment personalSectionItemUser on User {
  id
  login
  displayName
  profileImageURL(width: 70)
  primaryColorHex
  broadcastSettings {
    id
    title
  }
  channel @include(if: $creatorAnniversariesFeature) {
    id
    activeStreamEventCelebration {
      id
    }
  }
}

fragment personalSectionsStream on Stream {
  id
  previewImageURL(width: 320, height: 180)
  broadcaster {
    id
    broadcastSettings {
      id
      title
    }
  }
  viewersCount
  game {
    id
    slug
    displayName
    name
  }
  type
}
query GuestStarSessionID($channelID: ID!) {
  channel(id: $channelID) {
    id
    guestStarSessionCall {
      id
    }
  }
}
fragment AdRequestContentLabel on ContentClassificationLabel {
  id
  isEnabled
}
query ProfileBannerSetting {
  currentUser {
    id
    login
    displayName
    bannerImageURL
  }
}
query DropsPrivateCallout($dropInstanceID: ID!, $channelID: ID!) {
  dropEligibility(dropInstanceID: $dropInstanceID) {
    dropType {
      id
      ... on TimeBasedDrop {
        id
        name
        campaign {
          id
          imageURL
          detailsURL
        }
        benefitEdges {
          benefit {
            id
            imageAssetURL
          }
        }
      }
    }
  }
  channel(id: $channelID) {
    id
    displayName
  }
}
query ChannelAnalyticsMaxViewersTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      maxViewers {
        value
        timestamp
      }
    }
  }
}
mutation SendAnnouncementMessage($input: SendAnnouncementMessageInput!) {
  sendAnnouncementMessage(input: $input) {
    error
  }
}
fragment clip on Clip {
  id
  slug
  url
  embedURL
  title
  viewCount
  language
  curator {
    id
    login
    displayName
  }
  game {
    id
    name
    boxArtURL(width: 52, height: 72)
  }
  broadcaster {
    id
    login
    displayName
    profileImageURL(width: 50)
    primaryColorHex
  }
  thumbnailURL
  createdAt
  durationSeconds
  champBadge {
    id
  }
  isFeatured
}
query ClipsSocialShare($slug: ID!) {
  clip(slug: $slug) {
    id
    url
    embedURL
    title
    game {
      id
      name
    }
    broadcaster {
      id
      login
    }
  }
}
query UserEmotes($withOwner: Boolean!) {
  currentUser {
    id
    emoteSets {
      id
      emotes {
        id
        setID
        token
        modifiers {
          code
          name
        }
        type
      }
      owner @include(if: $withOwner) {
        id
        login
        displayName
        profileImageURL(width: 28)
      }
    }
  }
}
query VideoPlayerOfflineRecommendationsOverlay($login: String!) {
  user(login: $login) {
    id
    videos(first: 30) {
      edges {
        node {
          ...VideoPlayerOfflineRecommendationsOverlayVideo
        }
      }
    }
  }
}
query PauseRaidsSettings($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    raidSettings {
      isAllowingRaids
      pausedUntil
    }
  }
}
query AvailableEmotesForChannel($channelID: ID!, $withOwner: Boolean!) {
  channel(id: $channelID) {
    id
    self {
      availableEmoteSets {
        id
        emotes {
          id
          setID
          token
          modifiers {
            code
            name
          }
          type
        }
        owner @include(if: $withOwner) {
          id
          login
          displayName
          profileImageURL(width: 28)
        }
      }
    }
  }
}
query VideoOptions_User($contentOwnerID: ID!) {
  user(id: $contentOwnerID) {
    id
    login
    self {
      isEditor
    }
  }
  requestInfo {
    countryCode
  }
}
query FollowedIndex_FollowCount {
  currentUser {
    id
    follows {
      totalCount
    }
  }
}
query RaidNotification_Channels($sourceChannelID: ID!, $targetChannelID: ID!) {
  sourceChannel: user(id: $sourceChannelID) {
    id
    login
    displayName
    profileImageURL(width: 70)
  }
  targetChannel: user(id: $targetChannelID) {
    id
    login
    displayName
    profileImageURL(width: 70)
    self {
      isModerator
    }
  }
}
query UnbanRequestsItemHeaderTabs($channelID: ID!, $targetID: ID!) {
  viewerCardModLogs(channelID: $channelID, targetID: $targetID) {
    bans: targetedActions(first: 99, type: BAN) {
      __typename
      ... on ModLogsTargetedActionsError {
        __typename
        code
      }
      ... on ModLogsTargetedActionsConnection {
        __typename
        count
        pageInfo {
          hasNextPage
        }
      }
    }
    timeouts: targetedActions(first: 99, type: TIMEOUT) {
      __typename
      ... on ModLogsTargetedActionsError {
        __typename
        code
      }
      ... on ModLogsTargetedActionsConnection {
        __typename
        count
        pageInfo {
          hasNextPage
        }
      }
    }
  }
  chatRoomBanStatus(channelID: $channelID, userID: $targetID) {
    createdAt
    moderator {
      id
      login
    }
  }
}
mutation UpdateOauthApp($input: UpdateOauthAppInput!) {
  updateOauthApp(input: $input) {
    error {
      code
    }
  }
}
query ChannelAnalyticsAverageViewersTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      averageViewers {
        value
        timestamp
      }
    }
  }
}
query ChannelPropertiesSettingsPage($channelLogin: String!) {
  channel(name: $channelLogin) {
    id
    videoStreamSettings {
      isLowLatency
      shouldArchiveVODs
      streamKey {
        ... on StreamKey {
          value
          expiresAt
        }
        ... on StreamKeyError {
          code
          links
          message
        }
      }
      isBackupEnabled
      disconnectSlateDurationSeconds
      backupStreamKeys {
        ... on StreamKey {
          value
          expiresAt
        }
        ... on StreamKeyError {
          code
          links
          message
        }
      }
    }
  }
}
query UnbanRequestListItemHeader($requesterID: ID) {
  user(id: $requesterID) {
    id
    login
    createdAt
    displayName
    profileImageURL(width: 50)
  }
}
query CreatorHomeGetEmoteData($channelID: ID!) {
  user(id: $channelID) {
    id
    emoticonPrefix {
      name
    }
    subscriptionProducts {
      id
      tier
      emoteSetID
      emoteGroups {
        id
      }
    }
    isInEmoteGoodStanding
  }
}
query GetGuestStarBrowserSourceList($sessionID: ID!, $userID: ID, $limit: Int = 10, $cursor: Cursor) {
  guestStarBrowserSources(sessionID: $sessionID, userID: $userID, first: $limit, after: $cursor) {
    edges {
      cursor
      node {
        ...guestStarBrowserSource
      }
    }
  }
}

fragment guestStarBrowserSource on GuestStarBrowserSource {
  user {
    id
  }
  status
  createdAt
  updatedAt
  nonce
}
fragment coreUserFragment on User {
  id
  login
  displayName
  primaryColorHex
  profileImageURL(width: 70)
  stream {
    id
    viewersCount
  }
}
mutation DevExtensionCreatePage_CreateExtensionClient($input: CreateExtensionClientInput!) {
  createExtensionClient(input: $input) {
    client {
      id
    }
    error
  }
}
mutation YoutubeExportModal_ExportVideoToYoutube($input: ExportVideoToYoutubeInput!) {
  exportVideoToYoutube(input: $input) {
    video {
      id
    }
  }
}
mutation RemoveBansSharingRequests($input: RemoveBansSharingRequestsInput!) {
  removeBansSharingRequests(input: $input) {
    bansSharingRequests {
      id
      requestedUser {
        id
        displayName
        login
      }
      requestingUser {
        id
      }
    }
  }
}
mutation UpdateSunlightHomeVideoStreamSettings($input: UpdateVideoStreamSettingsInput!) {
  updateVideoStreamSettings(input: $input) {
    channel {
      id
      videoStreamSettings {
        shouldArchiveVODs
      }
    }
    error {
      code
    }
  }
}
query ChannelScheduleSegment($idToFind: ID!, $isVodID: Boolean!, $isSegmentID: Boolean!, $relativeDate: Time!, $startingWeekday: ScheduleSegmentDay!) {
  scheduleSegment(id: $idToFind, options: {relativeDate: $relativeDate, startingWeekday: $startingWeekday}) @include(if: $isSegmentID) {
    id
    startAt
  }
  video(id: $idToFind) @include(if: $isVodID) {
    id
    createdAt
  }
}
query ModViewWhatsNewEntries($first: Int = 50) {
  modViewNewsfeedEntries(first: $first) {
    content
    iconURL
    id
    position
    publishedAt
    title
    linkURL
    linkText
  }
}
mutation RedeemSubMutation($input: RedeemSubscriptionInput!) {
  redeemSubscription(input: $input) {
    errorCode
    product {
      id
      displayName
    }
  }
}
mutation AdsSchedulerTutorial_SetFTUESeen($input: SetAdManagerFirstTimeUserExperienceConfigInput!) {
  setAdManagerFirstTimeUserExperienceConfig(input: $input) {
    config {
      hasSeenScheduler
    }
  }
}
mutation CreateUnbanRequest($input: CreateUnbanRequestInput!) {
  createUnbanRequest(input: $input) {
    unbanRequest {
      id
      status
      createdAt
    }
    error {
      code
    }
  }
}
fragment alertVariationHTMLFragment on AlertVariationCustomMarkup {
  id
  html
  css
  combinedMarkup
}
query VIPArtistStatusQuery($channelID: ID!, $isArtistAlleyFeatureEnabled: Boolean!) {
  channel(id: $channelID) {
    id
    numberOfVIPsAllowed
  }
  channelCommunityRolesSettings(channelID: $channelID) @include(if: $isArtistAlleyFeatureEnabled) {
    roleSettings {
      limit
      role
    }
  }
}
query ContentMomentsPage($channelID: ID!, $first: Int, $cursor: Cursor) {
  channel(id: $channelID) {
    id
    communityMoments(first: $first, after: $cursor) {
      edges {
        cursor
        node {
          id
          createdAt
          claimCount
          clip {
            id
            createdAt
            durationSeconds
            thumbnailURL(width: 260, height: 147)
            title
            slug
            isPublished
          }
        }
      }
      pageInfo {
        hasNextPage
      }
      totalCount
    }
  }
  broadcasterCommunityMomentDetails(channelID: $channelID) {
    availableMoments
  }
}
query PlayerTrackingContextQuery($channel: String, $isLive: Boolean!, $collectionID: ID!, $hasCollection: Boolean!, $videoID: ID!, $hasVideo: Boolean!, $slug: ID!, $hasClip: Boolean!) {
  currentUser {
    id
    login
    isStaff
    hasTurbo
  }
  user(login: $channel) @include(if: $isLive) {
    id
    ...PlayerTrackingBroadcaster
    subscriptionProducts {
      id
      hasAdFree
    }
    stream {
      id
      broadcasterSoftware
      game {
        ...PlayerTrackingGame
      }
      restriction {
        id
        options
        type
        exemptions {
          type
        }
      }
    }
    self {
      subscriptionBenefit {
        id
      }
      isModerator
    }
    broadcastSettings {
      id
      game {
        ...PlayerTrackingGame
      }
    }
  }
  collection(id: $collectionID) @include(if: $hasCollection) {
    id
    items(first: 50) {
      edges {
        node {
          ...PlayerTrackingVOD
        }
      }
    }
    owner {
      id
      ...PlayerTrackingBroadcaster
    }
  }
  video(id: $videoID) @include(if: $hasVideo) {
    id
    ...PlayerTrackingVOD
    owner {
      ...PlayerTrackingBroadcaster
    }
  }
  clip(slug: $slug) @include(if: $hasClip) {
    id
    broadcaster {
      ...PlayerTrackingBroadcaster
    }
    game {
      ...PlayerTrackingGame
    }
  }
}

fragment PlayerTrackingVOD on Video {
  id
  broadcastType
  game {
    id
    name
  }
}

fragment PlayerTrackingBroadcaster on User {
  id
  login
  isPartner
}

fragment PlayerTrackingGame on Game {
  id
  name
}
query GuestStarNameplateSettings($channelLogin: String, $viewOnlyToken: String) {
  guestStarSettings(userLogin: $channelLogin, viewOnlyKey: $viewOnlyToken) {
    id
    hostSettings {
      isNameplatesEnabled
      browserSourceSettings {
        nameplateSize
        nameplateLocation
      }
    }
  }
}
fragment categoryFragment on Game {
  id
  name
  displayName
  boxArtURL(width: 285, height: 380)
}
mutation ExtensionPermissionsPageSetFeatureFlags($input: SetExtensionFeatureFlagsInput!) {
  setExtensionFeatureFlags(input: $input) {
    installedExtension {
      id
      permittedFeatures {
        canSendChat
        canUseBits
        dynamicManagement {
          game {
            id
            displayName
          }
          isManaged
        }
      }
    }
  }
}
query TeamsDashboard_Follows($teamName: String!, $teamMembers: [ID!], $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timezone: String!) {
  team(name: $teamName) {
    id
    creatorTimeseriesMetrics(startAt: $startAt, endAt: $endAt, channelIDs: $teamMembers, granularity: $granularity, timeZone: $timezone) {
      metric: follows {
        items {
          timestamp
          value
        }
        total
      }
    }
  }
}
mutation BulkUpdateRedemptions($input: UpdateCommunityPointsCustomRewardRedemptionStatusesByRedemptionsInput!) {
  updateCommunityPointsCustomRewardRedemptionStatusesByRedemptions(input: $input) {
    error {
      code
    }
  }
}
mutation FollowButton_FollowUser($input: FollowUserInput!) {
  followUser(input: $input) {
    follow {
      disableNotifications
      user {
        ...followButtonFragment
      }
    }
    error {
      code
    }
  }
}
fragment buildACommunityQuest on BuildACommunity {
  badgeURL
  completedAt
  followers {
    current
    goal
  }
  uniqueChatters {
    current
    goal
  }
  maxUniqueChatters {
    current
    goal
  }
  numberOfVIPs
}
query ExtensionPermissionsPage {
  currentUser {
    id
    installedExtensions {
      id
      extension {
        id
        authorName
        clientID
        iconURLs {
          square100
        }
        subscriptionsSupportLevel
        hasChatSupport
        isBitsEnabled
        bitsSupportLevel
        name
        version
      }
      permittedFeatures {
        ...extensionPermissionsPageFeatureFlagsFragment
      }
    }
  }
}

fragment extensionPermissionsPageFeatureFlagsFragment on ExtensionInstallationFeatureFlags {
  canSendChat
  canRetrieveSubscriptionStatus
  canUseBits
  dynamicManagement {
    game {
      id
      displayName
    }
    isManaged
  }
}
query UseLive($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    login
    stream {
      id
      createdAt
    }
  }
}
query AdsManagerTutorial_AdProperties($id: ID!) {
  user(id: $id) {
    id
    adProperties {
      density {
        isAdScheduleEnabled
        adManagerFirstTimeUserExperienceConfig {
          hasSeenManagerFull
          hasSeenManagerIntro
          hasSeenScheduler
          installRemindedAt
        }
      }
    }
  }
}
mutation ClearRTJQueue($input: ClearRTJQueueInput!) {
  clearRTJQueue(input: $input) {
    error {
      code
    }
  }
}
query Collection_LocalizedTitle($slug: String!) {
  collection: browsableCollection(input: {slug: $slug}) {
    id
    slug
    name {
      fallbackLocalizedTitle
    }
  }
}
query ClipsChatCard($slug: ID!) {
  clip(slug: $slug) {
    id
    videoOffsetSeconds
    createdAt
    isFeatured
    curator {
      id
      login
    }
    video {
      id
    }
    broadcaster {
      id
      login
      self {
        isEditor
      }
    }
  }
}
mutation Thread_UnarchiveThread($input: UpdateWhisperThreadInput!) {
  updateWhisperThread(input: $input) {
    thread {
      id
      isArchived
    }
  }
}
mutation ResetUsername($input: ResetUsernameInput!) {
  resetUsername(input: $input) {
    error {
      code
    }
    login
  }
}
fragment hypeTrainNotificationThreshold on HypeTrainNotificationThreshold {
  action
  source
  value
}
mutation SendHighlightedChatMessage($input: SendHighlightedChatMessageInput!) {
  sendHighlightedChatMessage(input: $input) {
    balance
    error {
      code
    }
  }
}
mutation DropsPage_ClaimDropRewards($input: ClaimDropRewardsInput!) {
  claimDropRewards(input: $input) {
    status
    isUserAccountConnected
    dropType {
      id
      campaign {
        id
        detailsURL
      }
    }
  }
}
query FeaturedClipsShelfCover($channelID: ID!) {
  user(id: $channelID) {
    id
    subscriptionProducts {
      id
      emotes {
        id
        assetType
        order
        subscriptionTier
        token
      }
    }
  }
}
mutation deleteAlertAsset($input: DeleteAlertAssetInput!) {
  deleteAlertAsset(input: $input) {
    error
  }
}
mutation VIPUser($input: GrantVIPInput!) {
  grantVIP(input: $input) {
    channel {
      id
    }
    grantee {
      id
      login
    }
    error {
      code
    }
  }
}
mutation SyncedSettingsSetCelebrations($input: SetCelebrationsEnabledInput!) {
  setCelebrationsEnabled(input: $input) {
    isCelebrationsEnabled
  }
}
query GenericSearchCategories($query: String!, $after: Cursor) {
  searchCategories(query: $query, first: 10, after: $after) {
    edges {
      ...GenericSearchCategoriesEdgeFragment
    }
  }
}

fragment GenericSearchCategoriesEdgeFragment on SearchCategoriesEdge {
  cursor
  node {
    boxArtURL(width: 144, height: 192)
    id
    displayName
    name
    slug
  }
}
mutation UpdatePinnedChatAccess($input: UpdatePinnedChatSettingsInput!) {
  updatePinnedChatSettings(input: $input) {
    settings {
      isModAccessEnabled
    }
  }
}
query TeamsDashboardRoot($teamName: String!) {
  team(name: $teamName) {
    id
    name
    displayName
    description
    logoID
    logoURL
    bannerID
    bannerURL
    backgroundImageID
    backgroundImageURL
  }
  currentUser {
    id
    roles {
      isGlobalMod
      isSiteAdmin
      isStaff
    }
    ownedTeams {
      id
    }
    teamMemberships {
      team {
        id
      }
    }
  }
}
query AccessIsCreatorGiftsAvailableQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    creatorGifting {
      id
      subscriptionsBalance
    }
  }
}
mutation AdsSettingsSection_UpdateAdProperties($input: UpdateAdPropertiesInput!) {
  updateAdProperties(input: $input) {
    targetUser {
      id
      adProperties {
        disablePrerollsAbility {
          hasDisablePrerollsAbilityEnabled
          hasDisablePrerollsNotificationsEnabled
        }
        isStreamDisplayAdsDisabled
      }
    }
  }
}
fragment guestStarSessionSelfSlotFragment on GuestStarSessionSelfSlot {
  participantID
  screenshareParticipantID
}
fragment shieldModeUserFragment on User {
  id
  login
  displayName
  profileImageURL(width: 50)
}
fragment productOfferCheckoutPriceDetails on ProductPurchase {
  checkoutPriceSummary {
    id
    description
    pricingIdentifier
    currency
    exponent
    isTaxInclusive
    price
    tax
    total
    discount {
      price
      total
      tax
    }
  }
  errorCode
}

fragment productOfferCheckoutPrices on Offer {
  id
  listing {
    chargeModel {
      internal {
        self {
          recurlyCheckoutPrice1: checkoutPrice(quantity: 1, paymentProvider: RECURLY) {
            ...productOfferCheckoutPriceDetails
          }
          recurlyCheckoutPrice5: checkoutPrice(quantity: 5, paymentProvider: RECURLY) {
            ...productOfferCheckoutPriceDetails
          }
          recurlyCheckoutPrice10: checkoutPrice(quantity: 10, paymentProvider: RECURLY) {
            ...productOfferCheckoutPriceDetails
          }
          recurlyCheckoutPrice20: checkoutPrice(quantity: 20, paymentProvider: RECURLY) {
            ...productOfferCheckoutPriceDetails
          }
          recurlyCheckoutPrice40: checkoutPrice(quantity: 40, paymentProvider: RECURLY) {
            ...productOfferCheckoutPriceDetails
          }
          recurlyCheckoutPrice50: checkoutPrice(quantity: 50, paymentProvider: RECURLY) {
            ...productOfferCheckoutPriceDetails
          }
          recurlyCheckoutPrice100: checkoutPrice(quantity: 100, paymentProvider: RECURLY) {
            ...productOfferCheckoutPriceDetails
          }
        }
      }
    }
  }
  promotion {
    id
    name
    promoDisplay {
      discountPercent
      discountType
    }
    priority
  }
  quantity {
    min
    max
  }
}
mutation OnboardingFollowUser($id: ID!) {
  followUser(input: {disableNotifications: false, targetID: $id}) {
    follow {
      followedAt
    }
  }
}
query CoreAuthCurrentUser {
  currentUser {
    displayName
    id
    login
    roles {
      isStaff
    }
  }
}
query autoModQueueBroadcastLanguageQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    broadcastSettings {
      id
      language
    }
  }
}
fragment predictionSettingsFragment on User {
  id
  predictionsSettings {
    hasAcceptedTOS
    isTemporaryChatBadgeEnabled
  }
}
query UserRolesCacheQuery($channelID: ID!, $includeEditors: Boolean!, $includeMods: Boolean!, $includeVIPs: Boolean!, $includeArtists: Boolean!, $modsCursor: Cursor, $vipsCursor: Cursor, $artistsCursor: Cursor) {
  artists: usersByCommunityRole(channelID: $channelID, role: ARTIST, first: 100, after: $artistsCursor) @include(if: $includeArtists) {
    edges {
      cursor
      grantedAt
      node {
        id
        displayName
        login
        profileImageURL(width: 50)
      }
    }
    pageInfo {
      hasNextPage
    }
  }
  user(id: $channelID) {
    id
    editors @include(if: $includeEditors) {
      edges {
        cursor
        grantedAt
        node {
          id
          displayName
          login
          profileImageURL(width: 50)
        }
      }
      pageInfo {
        hasNextPage
      }
    }
    mods(first: 100, after: $modsCursor) @include(if: $includeMods) {
      edges {
        cursor
        grantedAt
        node {
          id
          displayName
          login
          profileImageURL(width: 50)
        }
      }
      pageInfo {
        hasNextPage
      }
    }
    vips(first: 100, after: $vipsCursor) @include(if: $includeVIPs) {
      edges {
        cursor
        grantedAt
        node {
          id
          displayName
          login
          profileImageURL(width: 50)
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
query VideoPreviewOverlay($login: String!) {
  user(login: $login) {
    id
    stream {
      id
      previewImageURL(width: 1280, height: 720)
      restrictionType
    }
  }
}
query ShoutoutHighlightServiceQuery($targetLogin: String!, $isLoggedOut: Boolean!) {
  user(login: $targetLogin) @skip(if: $isLoggedOut) {
    id
    self {
      canFollow
      follower {
        followedAt
      }
      banStatus {
        expiresAt
      }
    }
  }
}
mutation TeamsDashboard_DeleteTeamInvitation($input: DeleteTeamInvitationInput!) {
  deleteTeamInvitation(input: $input) {
    team {
      id
      invitedUsers {
        pageInfo {
          hasNextPage
        }
        edges {
          cursor
          node {
            id
            login
            displayName
            profileImageURL(width: 70)
          }
        }
      }
    }
  }
}
query SpotlightSubsTileQuery($login: String!) {
  user(login: $login) {
    id
    subscriberScore {
      countBreakdown {
        count
      }
      current
      next
    }
  }
}
query AdsSettingsSection_Query($login: String!, $shouldSkipCIP: Boolean!) {
  user(login: $login) {
    id
    roles {
      isAffiliate
      isPartner
    }
    adProperties {
      maxAdBreakLength
      disablePrerollsAbility {
        hasDisablePrerollsAbilityAccess
        hasDisablePrerollsAbilityEnabled
        hasDisablePrerollsNotificationsEnabled
        maxDisablePrerollsCapacity
        disablePrerollsTimeEarned {
          midrollLengthSeconds
          prerollFreeTimeSeconds
        }
      }
      availableOffers: incentiveOffers(status: AVAILABLE) @skip(if: $shouldSkipCIP) {
        id
        setID
        isViewed
        campaignID
        isTest
        startAt
      }
      selectedOffers: incentiveOffers(status: SELECTED) @skip(if: $shouldSkipCIP) {
        id
        setID
        isViewed
        campaignID
        isTest
        startAt
        suggestedAdDurationSeconds
        suggestedAdIntervalSeconds
      }
      density {
        isInPartnerRevshareProgram
        isAdScheduleEnabled
        targetAdMinutesForRevenueShare
        interval {
          desiredSeconds
        }
        duration {
          desiredSeconds
        }
        startDelay {
          desiredSeconds
        }
        reminder {
          isEnabled
          seconds
        }
        adManagerFirstTimeUserExperienceConfig {
          hasSeenScheduler
        }
      }
      isStreamDisplayAdsDisabled
      isStreamDisplayAdsProductEligible
    }
    payoutPlans {
      category
      isReceivingRevenue
      tags
    }
  }
}
fragment alertSetDisplayFragment on AlertSet {
  id
  name
  description
  state
}
mutation ChannelTrailerSetup_UpdateVideo($input: UpdateVideoInput!) {
  updateVideo(input: $input) {
    video {
      id
      title
      language
      previewThumbnailURL
    }
  }
}
fragment RaidSettingsV2 on RaidSettings {
  __typename
  isAllowingRaids
  minAccountAgeDays
  minViewers
  maxViewers
  pausedUntil
  raidFilterGroups {
    includesAutohost
    includesFollowed
    includesSubs
    includesTeam
    includesAffiliate
    includesPartner
  }
}
fragment loyaltyBadgeUploadConfig on LoyaltyBadgeUploadConfig {
  uploadID
  uploadURL
  imageID
  imageURL
}
mutation BrowserPushNotifications_AddBrowserPushSubscription($input: AddBrowserPushSubscriptionInput!) {
  addBrowserPushSubscription(input: $input) {
    browserPushSubscriptionID
  }
}
mutation BulkUpdateLowTrustTreatment($input: BulkUpdateLowTrustUserTreatmentInput!) {
  bulkUpdateLowTrustUserTreatment(input: $input) {
    properties {
      id
      treatment {
        type
      }
      user {
        id
      }
    }
    error
  }
}
mutation EditProfile_CreateProfileBannerImageUploadURL($input: CreateProfileBannerImageUploadURLInput!) {
  createProfileBannerImageUploadURL(input: $input) {
    uploadID
    uploadURL
    error {
      code
    }
  }
}
query ExtensionsForChannel($channelID: ID!) {
  user(id: $channelID) {
    id
    channel {
      id
      selfInstalledExtensions {
        ...extensionInstallationSelfEdge
      }
    }
  }
}

fragment extensionInstallationSelfEdge on ExtensionInstallationSelfEdge {
  installation {
    id
    extension {
      ...extension
    }
    abilities {
      isChatEnabled
      isBitsEnabled
      isSubscriptionStatusAvailable
    }
    activationConfig {
      anchor
      slot
      state
      x
      y
    }
    self {
      canActivate
    }
  }
  helixToken {
    extensionID
    jwt
  }
  token {
    extensionID
    jwt
  }
  configuration {
    extensionID
    broadcaster {
      version
      content
    }
    developer {
      version
      content
    }
    global {
      version
      content
    }
  }
  issuedAt
}

fragment extension on Extension {
  authorName
  clientID
  description
  hasIdentityLinking
  iconURLs {
    ...extensionIconURLs
  }
  id
  isBitsEnabled
  name
  sku
  summary
  vendorCode
  version
  views {
    ...extensionViews
  }
  state
  allowlistedConfigURLs: whitelistedConfigURLs
  allowlistedPanelURLs: whitelistedPanelURLs
}

fragment extensionIconURLs on ExtensionIcons {
  square100
  square24
  discoverySplash
}

fragment extensionViews on ExtensionViews {
  component {
    viewerURL
    canLinkExternalContent
    aspectRatioX
    aspectRatioY
    targetHeight
    hasAutoscale
    scalePixels
  }
  config {
    canLinkExternalContent
    viewerURL
  }
  hidden {
    canLinkExternalContent
    viewerURL
  }
  liveConfig {
    canLinkExternalContent
    viewerURL
  }
  mobile {
    viewerURL
  }
  panel {
    canLinkExternalContent
    height
    viewerURL
  }
  videoOverlay {
    canLinkExternalContent
    viewerURL
  }
}
query Settings_ChannelClipsSettings($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    channel {
      id
      clipsSettings {
        isClipsCreationEnabled
        creationRestrictedTo {
          isFollower
          isSubscriber
        }
        creationRestrictionOptions {
          followingLengthMinutes
        }
        categoryBlocklist {
          id
          name
          displayName
          boxArtURL(width: 40, height: 55)
        }
      }
    }
  }
}
fragment watchPartyItemMovieDetails on MovieDetails {
  durationSeconds
}
fragment recommendedPostplayGame on Game {
  id
  displayName
  name
}

fragment recommendedPostplayClipBroadcaster on User {
  id
  displayName
  login
}

fragment recommendedPostplayClip on Clip {
  id
  durationSeconds
  slug
  title
  thumbnailURL(width: 480, height: 272)
  viewCount
  broadcaster {
    ...recommendedPostplayClipBroadcaster
  }
  game {
    ...recommendedPostplayGame
  }
}

fragment recommendedPostplayBroadcaster on User {
  ...recommendedPostplayClipBroadcaster
  stream {
    id
    previewImageURL(width: 320, height: 180)
    game {
      ...recommendedPostplayGame
    }
  }
}

fragment recommendedPostplayVideo on Video {
  id
  game {
    ...recommendedPostplayGame
  }
  lengthSeconds
  previewThumbnailURL(width: 320, height: 180)
}

fragment recommendedRelatedClips on ClipRelatedClips {
  broadcaster {
    ...recommendedPostplayClip
  }
  game {
    ...recommendedPostplayClip
  }
  top {
    ...recommendedPostplayClip
  }
}

query VideoPlayerClipPostplayRecommendationsOverlay($slug: ID!) {
  clip(slug: $slug) {
    id
    durationSeconds
    slug
    videoOffsetSeconds
    broadcaster {
      ...recommendedPostplayBroadcaster
    }
    game {
      ...recommendedPostplayGame
    }
    relatedClips {
      ...recommendedRelatedClips
    }
    video {
      ...recommendedPostplayVideo
    }
  }
}
fragment activeMultipliersFragment on CommunityPointsMultiplier {
  reasonCode
  factor
}
fragment homeShelfGame on Game {
  id
  boxArtURL(width: 285, height: 380)
  displayName
  name
  viewersCount
}

query HomeShelfGames($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    primaryColorHex
    channel {
      id
      home {
        shelves {
          categoryShelf(first: 15) {
            edges {
              node {
                ...homeShelfGame
              }
            }
          }
        }
      }
    }
  }
}
fragment billingManager on OrganizationMember {
  id
  firstName
  lastName
  user {
    id
    login
    profileImageURL(width: 50)
    deletedAt
  }
}
mutation ExtensionMonetizationPutProduct($input: UpdateExtensionProductInput!) {
  updateExtensionProduct(input: $input) {
    product {
      displayName
      isInDevelopment
      sku
      expiration
      willNotifyAllExtensions
      cost {
        amount
        type
      }
    }
    error
  }
}
query ChannelPointsEnabled($login: String) {
  user(login: $login) {
    id
    channel {
      id
      communityPointsSettings {
        isEnabled
      }
    }
  }
}
fragment streamScheduleAssetFragment on ScheduleSegment {
  id
  isCancelled
  endAt
  startAt
  title
  firstOccurrenceDate
  repeatEndsAfterCount
  categories {
    id
    displayName
    boxArtURL(width: 144, height: 192)
    name
  }
  cancelledUntil
  reminderCount
}
mutation CheerSettingsForm_OnboardUser($input: UpdateCheerPartnerSettingsInput!) {
  updateCheerPartnerSettings(input: $input) {
    cheer {
      id
      isOnboarded
    }
  }
}
mutation LoyaltyBadges_CreateBadgeFlair($input: CreateBadgeFlairInput!) {
  createBadgeFlair(input: $input) {
    error {
      code
    }
  }
}
query ChannelAnalytics_GameOverlapPanel($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    login
    channelAnalyticsContentOverlap {
      games {
        viewersAlsoWatch {
          boxArtURL(width: 40, height: 55)
          id
          displayName
          name
        }
        score
      }
    }
  }
}
query GetGuestStarSelfTokenQuery($channelLogin: String!, $isAuthenticatedRequest: Boolean!) {
  guestStarSettings(userLogin: $channelLogin) @include(if: $isAuthenticatedRequest) {
    id
    viewOnlyToken
  }
}
query ChannelViewerMilestoneSettings($login: String, $channelID: ID!) {
  channelViewerMilestoneSettings(channelID: $channelID) {
    id
    isWatchStreakOptOut
    isInWatchStreakProgressExperiment
  }
  user(login: $login) {
    id
    channel {
      id
      communityPointsSettings {
        isEnabled
      }
    }
  }
}
query VideoShareBox_TrackingVideoContext($videoID: ID!) {
  video(id: $videoID) {
    id
    broadcastType
    owner {
      id
      login
      roles {
        isPartner
      }
    }
    game {
      id
      name
    }
  }
}
query ExtensionActionSubscribeToChannel($channelID: ID!) {
  currentUser {
    id
    login
  }
  user(id: $channelID) {
    id
    login
    subscriptionProducts {
      ...extensionActionSubscriptionProduct
    }
    self {
      subscriptionBenefit {
        id
        tier
      }
    }
  }
}

fragment extensionActionSubscriptionProduct on SubscriptionProduct {
  id
  name
  tier
}
mutation DevMutationExtensionDeleteImage($input: DeleteExtensionImageInput!) {
  deleteExtensionImage(input: $input) {
    error
    manifest {
      id
      version
      developerManifest {
        createdAt
        versionState
      }
      discoveryManifest {
        name
      }
      views {
        component {
          viewerPath
        }
        mobile {
          viewerPath
        }
        videoOverlay {
          viewerPath
        }
        panel {
          viewerPath
        }
      }
    }
  }
}
mutation FeatureClips_UpdateFeatureSettings($input: UpdateChannelClipsSettingInput!) {
  updateChannelClipsSetting(input: $input) {
    channel {
      id
      clipsSettings {
        isClipsFeatureToggleDefaultEnabled
        featuringRestrictedTo {
          shouldAllowMods
        }
      }
    }
  }
}
query CheckoutInstantlyButton($purchaseOrderID: ID!, $includeOrder: Boolean!) {
  currentUser {
    id
    purchaseOrder(id: $purchaseOrderID) @include(if: $includeOrder) {
      id
      actionTokenID
      failureReason
      state
    }
  }
}
query GetIsBrowserSourceAudioEnabledQuery($channelLogin: String!) {
  guestStarSettings(userLogin: $channelLogin) {
    id
    hostSettings {
      isBrowserSourceAudioEnabled
      shouldSendSelfCamAudioViaBrowserSource
      isSelfCamEnabled
    }
  }
}
mutation ChannelPanelsDeletePanel($input: DeletePanelInput!) {
  deletePanel(input: $input) {
    panel {
      id
      type
      ... on DefaultPanel {
        title
        imageURL
        linkURL
        description
      }
      ... on ExtensionPanel {
        slotID
      }
    }
  }
}
query ClipsViewCount($slug: ID!) {
  clip(slug: $slug) {
    id
    viewCount
  }
}
query SnoozeAdsQuickAction_AdProperties($login: String!) {
  user(login: $login) {
    id
    adProperties {
      density {
        isAdScheduleEnabled
        adSchedule {
          runAtTime
        }
        snooze {
          currentAmount
          maxAmount
          refreshAt
          durationSeconds
        }
      }
    }
  }
}
fragment resourceRestriction on ResourceRestriction {
  id
  type
  exemptions {
    type
    actions {
      name
      title
    }
  }
  options
}
query ModActionsUser($id: ID!) {
  user(id: $id) {
    ...modActionsUserFragment
  }
}

fragment modActionsUserFragment on User {
  id
  login
  displayName
}
query CurrentUserModeratorStatus($channelID: ID, $channelLogin: String) {
  user(id: $channelID, login: $channelLogin) {
    id
    self {
      isModerator
    }
  }
  currentUser {
    id
  }
}
query HomeShelfEditor($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    self {
      isEditor
    }
  }
}
mutation updateUserTeamMembership($input: UpdateUserTeamMembershipInput!) {
  updateUserTeamMembership(input: $input) {
    user {
      id
      teamMemberships {
        isPrimary
        isRevenueRevealed
        isStatsRevealed
        team {
          id
          name
          displayName
          logoURL
        }
      }
    }
  }
}
fragment VideoPlayerBroadcastSettingsUpdate on BroadcastSettings {
  id
  game {
    id
    name
    displayName
    boxArtURL(width: 85, height: 113)
  }
}
query ScheduleEditorSearchCategories($query: String!) {
  searchCategories(query: $query) {
    edges {
      ...SearchCategoriesEdgeFragment
    }
  }
}

fragment SearchCategoriesEdgeFragment on SearchCategoriesEdge {
  node {
    id
    displayName
    name
  }
}
query GuestListQuery($channelID: ID!) {
  channel(id: $channelID) {
    id
    guestStarSessionCall {
      id
      guests {
        ...guestStarSlotForViewers
      }
    }
  }
}

fragment guestStarSlotForViewers on GuestStarSlotForViewers {
  id
  slotID
  user {
    id
    login
    displayName
    profileImageURL(width: 70)
    primaryColorHex
  }
}
query FundraiserSetupPage($channelLogin: String!, $charityID: ID!) {
  user(login: $channelLogin) {
    id
  }
  charity(id: $charityID) {
    id
    offers {
      id
      listing {
        chargeModel {
          internal {
            previewPrice {
              id
              currency
              exponent
            }
          }
        }
      }
    }
  }
}
query StreamTogetherCollabStatus($channelLogin: String!) {
  guestStarSettings(userLogin: $channelLogin) {
    id
    hostSettings {
      collabStatus
    }
  }
}
query AdsSchedulerService_QueryAdProperties($login: String!) {
  user(login: $login) {
    id
    adProperties {
      density {
        isAdScheduleEnabled
        reminder {
          seconds
          isChatReminderEnabled
          isModChatReminderEnabled
        }
        adSchedule {
          runAtTime
          durationSeconds
        }
        snooze {
          currentAmount
          maxAmount
          durationSeconds
        }
      }
    }
  }
}
query TeamsDashboard_TeamRevenues($teamName: String!, $channelIDs: [ID!]!, $startDate: Time!, $endDate: Time!) {
  team(name: $teamName) {
    id
    revenues(channelIDs: $channelIDs, startDate: $startDate, endDate: $endDate, granularity: DAY) {
      revenue {
        channelID
        revenues {
          twitchSubscriptions {
            date
            amount
          }
          giftSubscriptions {
            date
            amount
          }
          ads {
            date
            amount
          }
          bits {
            date
            amount
          }
          primeSubscriptions {
            date
            amount
          }
        }
      }
    }
  }
}
query CreatorColorQuery($channelID: ID) {
  user(id: $channelID) {
    id
    primaryColorHex
  }
}
query FollowGamesModal_Games($limit: Int) {
  games(first: $limit) {
    edges {
      node {
        id
        name
        displayName
        boxArtURL(width: 285, height: 380)
      }
    }
  }
}
mutation SetGuestStarUserPreferences($input: SetGuestStarUserPreferencesInput!) {
  setGuestStarUserPreferences(input: $input) {
    error {
      code
    }
    userPreferences {
      host {
        id
      }
      guest {
        id
      }
      volume
      cohostPermission
      isMuted
      screenshareVolume
    }
  }
}
query UseGetUserLogin($id: ID!) {
  user(id: $id) {
    id
    login
  }
}
mutation SendCommunityIntroduction($input: SendCommunityIntroInput!) {
  sendCommunityIntro(input: $input) {
    messageID
    error {
      code
      promptAnswerErrors {
        code
        promptID
      }
    }
  }
}
query RedeemSubPageEligibility($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    displayName
    subscriptionProducts {
      id
      tier
    }
    self {
      subscriptionBenefit {
        id
      }
    }
  }
  currentUser {
    id
  }
}
mutation ChannelPanelsCreatePanelImageUploadInfo($input: CreatePanelImageUploadInfoInput!) {
  createPanelImageUploadInfo(input: $input) {
    uploadInfo {
      uploadID
      url
    }
  }
}
query TeamsDashboard_VideoPlayReferrals($teamName: String!, $teamMembers: [ID!], $start: Time!, $end: Time!, $first: Int!) {
  team(name: $teamName) {
    id
    countries: videoPlayReferrals(start: $start, end: $end, first: $first, channelIDs: $teamMembers, dimension: COUNTRY, filter: ALL) {
      items {
        count
        name
      }
      total
    }
    platforms: videoPlayReferrals(start: $start, end: $end, first: $first, channelIDs: $teamMembers, dimension: PLATFORM, filter: ALL) {
      items {
        count
        name
      }
      total
    }
    internal: videoPlayReferrals(start: $start, end: $end, first: $first, channelIDs: $teamMembers, dimension: INTERNAL, filter: INTERNAL_LIVE_WEB) {
      items {
        count
        name
      }
      total
    }
    external: videoPlayReferrals(start: $start, end: $end, first: $first, channelIDs: $teamMembers, dimension: EXTERNAL, filter: EXTERNAL_LIVE_WEB) {
      items {
        count
        name
      }
      total
    }
  }
}
query ExtensionManagementPage {
  currentUser {
    id
    installedExtensions {
      ...ExtensionManagementPageExtensionInstallation
    }
    panels {
      id
      type
      ... on ExtensionPanel {
        slotID
      }
    }
  }
}

fragment ExtensionManagementPageExtensionInstallation on ExtensionInstallation {
  id
  activationConfig {
    anchor
    slot
    state
  }
  extension {
    id
    clientID
    iconURLs {
      square100
    }
    hasChatSupport
    isBitsEnabled
    bitsSupportLevel
    name
    sku
    state
    subscriptionsSupportLevel
    vendorCode
    version
    views {
      component {
        viewerURL
      }
      hidden {
        viewerURL
      }
      mobile {
        viewerURL
      }
      panel {
        viewerURL
      }
      videoOverlay {
        viewerURL
      }
    }
  }
  permittedFeatures {
    ...extensionManagementPageFeatureFlagsFragment
  }
  requiredActions {
    type
  }
  self {
    canActivate
  }
}

fragment extensionManagementPageFeatureFlagsFragment on ExtensionInstallationFeatureFlags {
  canSendChat
  canRetrieveSubscriptionStatus
  canUseBits
  dynamicManagement {
    game {
      id
      displayName
    }
    isManaged
  }
}
query AcknowledgeUnbanRequestPrompt($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    profileImageURL(width: 50)
  }
}
query QuickActionsStreamMarkerQuery($login: String!) {
  user(login: $login) {
    id
    stream {
      id
    }
  }
}
query DevCurrentUser_Apps($after: Cursor) {
  currentUser {
    id
    createdAt
    oauthApps(after: $after) {
      edges {
        cursor
        node {
          id
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
query ChannelAnalytics_NotificationsTimeseries($channelName: String!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $numberOfIntervals: Int!, $timeZone: String!) {
  user(login: $channelName) {
    id
    goLiveNotificationsTimeseries(startAt: $startAt, endAt: $endAt, granularity: $granularity, numberOfIntervals: $numberOfIntervals, timeZone: $timeZone) {
      items {
        engagements
        timestamp
      }
    }
  }
}
mutation changeUsername($input: ChangeUsernameInput!) {
  changeUsername(input: $input) {
    error {
      code
    }
    user {
      id
      login
    }
  }
}
fragment itBeginsQuest on ItBegins {
  badgeURL
  completedAt
  hasStreamed
  hasUpdatedCategory
  hasUpdatedStreamTitle
  hasVisitedDashboard
}
query BitsConfigContext_Channel($login: String!) {
  channel: user(login: $login) {
    id
    cheer {
      id
      cheerGroups {
        ...cheermoteGroup
      }
      isEnabled
      isBitsEnabled
    }
  }
}
query ChannelSupportButtons($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    displayName
    self {
      follower {
        disableNotifications
      }
    }
  }
}
query ClipsTrackingBase($slug: ID!) {
  clip(slug: $slug) {
    id
    broadcaster {
      id
      login
      isPartner
      stream {
        id
      }
    }
    game {
      id
      name
    }
    video {
      id
    }
  }
}
query OnboardingGamesSearch($query: String!, $target: SearchForTarget) {
  searchFor(userQuery: $query, platform: "web", target: $target) {
    games {
      ...onboardingGamesFragment
    }
  }
}

fragment onboardingGamesFragment on SearchForResultGames {
  cursor
  items {
    ...onboardingGameFragment
  }
}

fragment onboardingGameFragment on Game {
  id
  name
  displayName
  boxArtURL(height: 120, width: 90)
  viewersCount
}
query CurrentUserStreamQuery {
  currentUser {
    channel {
      id
      videoStreamSettings {
        streamKey {
          ... on StreamKey {
            expiresAt
            value
          }
          ... on StreamKeyError {
            code
            links
            message
          }
        }
      }
    }
    id
    settings {
      hasTwoFactorEnabled
    }
    stream {
      id
      broadcasterSoftware
    }
  }
}
query StreamSummaryPage_GetStreamSession($channelID: ID!, $lastStartedAt: Time!) {
  user(id: $channelID) {
    id
    streamSessions(first: 1, lastStartedAt: $lastStartedAt) {
      startedAt
      endedAt
    }
  }
}
query BuyBitsCheckout {
  currentUser {
    id
    bitsUserState
  }
}
mutation AdsSchedulerSettingsPage_SetChannelAdSchedule($input: SetChannelAdScheduleInput!) {
  setChannelAdSchedule(input: $input) {
    targetChannelID
    isAdScheduleEnabled
    intervalSeconds
    durationSeconds
    startDelaySeconds
    isAdReminderEnabled
    isChatReminderEnabled
    isModChatReminderEnabled
    adReminderTimeSeconds
    isOptimizedAdScheduleEnabled
    isAutoSnoozeEnabled
  }
}
query ModViewUserDetails_GiftSubEligibility($giftRecipientLogin: String, $subProductId: String!) {
  user(login: $giftRecipientLogin) {
    id
    self {
      canGift(product: $subProductId)
    }
  }
}
mutation ExtensionRecommendationsInstallExtension($input: InstallExtensionInput!) {
  installExtension(input: $input) {
    installedExtension {
      id
      activationConfig {
        anchor
        slot
        state
      }
      extension {
        id
        clientID
        version
      }
    }
  }
}
mutation SetGuestStarCostreamingEarlyAccessSettings {
  setGuestStarCostreamingEarlyAccessSettings {
    status
    error {
      code
    }
  }
}
mutation SetGuestStarUserSettings($input: SetGuestStarUserSettingsInput!) {
  setGuestStarUserSettings(input: $input) {
    error {
      code
    }
  }
}
query GuestStarUserSettings($channelLogin: String!) {
  guestStarSettings(userLogin: $channelLogin) {
    id
    slotCount
    canModeratorsSendSlotsLive
    hostSettings {
      browserSourceLayout
      isCostreamingEnabled
      guestScreensharePermission
    }
  }
}
fragment hypeTrainKickoffConfig on HypeTrainKickoffConfig {
  eventsThreshold
  periodSeconds
  minPoints
}
query ShieldModeSidebarHeader($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    login
    displayName
    profileImageURL(width: 50)
  }
}
query ExtensionMonetizationProducts($extensionID: ID!, $extensionVersion: String) {
  extension(id: $extensionID, version: $extensionVersion) {
    id
    products(includeAll: true) {
      displayName
      isInDevelopment
      sku
      expiration
      willNotifyAllExtensions
      cost {
        amount
        type
      }
    }
  }
}
mutation AddOrgInvite($input: CreateOrganizationInviteInput!) {
  createOrganizationInvite(input: $input) {
    error {
      code
    }
  }
}
fragment AnimatedEmotesPayload on GenerateAnimatedEmotePayload {
  id
  animatedAssets {
    id
    size
  }
}
mutation SwapGuestStarSlotAssignment($input: SwapGuestStarSlotAssignmentInput!) {
  swapGuestStarSlotAssignment(input: $input) {
    error {
      code
    }
  }
}
query CreatorHomeSuggestedExtensions($categoryID: ID!) {
  extensionCategory(id: $categoryID) {
    id
    extensions(first: 4) {
      edges {
        ...CreatorHomeSuggestedExtensions_ExtensionEdge
      }
    }
  }
}

fragment CreatorHomeSuggestedExtensions_ExtensionEdge on ExtensionEdge {
  node {
    id
    clientID
    version
    iconURLs {
      square100
    }
    name
    summary
  }
}
mutation ResumeSchedule($input: ResumeScheduleInput!) {
  resumeSchedule(input: $input) {
    error
    schedule {
      id
      interruption {
        endAt
        reason
        startAt
      }
    }
  }
}
fragment channelHomeClip on Clip {
  id
  slug
  clipTitle: title
  clipViewCount: viewCount
  curator {
    id
    login
    displayName
  }
  clipGame: game {
    id
    name
    displayName
    boxArtURL(width: 52, height: 72)
  }
  broadcaster {
    id
    login
    displayName
    profileImageURL(width: 50)
    primaryColorHex
  }
  thumbnailURL
  createdAt
  durationSeconds
  isFeatured
}
query SponsorshipChannelSettings($channelLogin: String!) {
  userSponsorshipSettings(input: {userLogin: $channelLogin}) {
    activationSettings {
      channelSkinVideoOverlayAssetPosition
    }
  }
}
mutation ClientSideAdEventHandling_RecordAdEvent($input: RecordAdEventInput!) {
  recordAdEvent(input: $input) {
    error {
      code
    }
  }
}
query RequestToJoinAccentColor($channelID: ID!) {
  user(id: $channelID) {
    id
    primaryColorHex
  }
}
mutation SendPinnedChatMessage($input: SendPinnedChatMessageInput!) {
  sendPinnedChatMessage(input: $input) {
    pinnedChatMessage {
      id
      pinnedMessage {
        id
      }
    }
    error {
      code
    }
  }
}
mutation SyncedSettingsSetEmoteAnimations($input: SetEmoteAnimationsEnabledInput!) {
  setEmoteAnimationsEnabled(input: $input) {
    isEmoteAnimationsEnabled
  }
}
fragment metadataFragment on CategoryRatingMetadata {
  totalMinutesBroadcast
  totalMinutesWatched
  uniqueCreators
  totalDaysBroadcastForWeek
  ratio
  currentViewers
  currentStreamers
  analysisEndDate
  averageCreatorsDaily
  estimatedBrowsePosition
}
fragment hypeTrainParticipationConversionRate on HypeTrainParticipationConversionRate {
  action
  source
  value
}
mutation BitsThresholdSettingsForm_SetMinBitsToCheer($input: UpdateCheerPartnerSettingsInput!) {
  updateCheerPartnerSettings(input: $input) {
    cheer {
      id
      chatMessage {
        minBitsToCheer
      }
    }
  }
}
query EmoteByIdQuery($id: ID!) {
  emote(id: $id) {
    id
    token
    setID
    modifiers {
      code
      name
    }
    type
    assetType
  }
}
fragment cheerDisplayConfig on CheermoteDisplayConfig {
  backgrounds
  colors {
    bits
    color
  }
  order
  scales
  types {
    animation
    extension
  }
}

fragment globalCheerInfo on Query {
  cheerConfig {
    displayConfig {
      ...cheerDisplayConfig
    }
    groups {
      ...cheermoteGroup
    }
  }
}
mutation updatePrimeOfferStatus($input: UpdatePrimeOfferStatusInput!) {
  updatePrimeOfferStatus(input: $input) {
    self {
      hasEntitlement
      claimData
      status
    }
    error {
      code
    }
  }
}
mutation RedeemSubTokenMutation($input: PurchaseOfferInput!) {
  purchaseOffer(input: $input) {
    purchaseOrder {
      id
      actionTokenID
      state
    }
    error
  }
}
fragment VideoPlayerVODPostplayRecommendationsVideo on Video {
  id
  createdAt
  lengthSeconds
  title
  previewThumbnailURL(width: 640, height: 360)
  game {
    id
    name
  }
  self {
    viewingHistory {
      position
    }
  }
}

query VideoPlayerVODPostplayRecommendations($videoID: ID!) {
  video(id: $videoID) {
    id
    owner {
      id
      displayName
      videos(first: 32, sort: TIME, type: ARCHIVE) {
        edges {
          node {
            ...VideoPlayerVODPostplayRecommendationsVideo
          }
        }
      }
    }
  }
}
query AdFrequencyQuery($login: String!) {
  user(login: $login) {
    id
    adProperties {
      frequency
      lastTriggeredAt
    }
  }
}
mutation GoRaid($input: GoRaidInput!) {
  goRaid(input: $input) {
    raid {
      id
    }
    error {
      code
    }
  }
}
mutation CreateCharityCampaign($input: CreateCharityCampaignInput!) {
  createCharityCampaign(input: $input) {
    campaign {
      id
      goal {
        id
      }
      charities {
        id
      }
      startsAt
      endsAt
    }
    error {
      code
    }
  }
}
query VideoPlayer_CollectionContent($id: ID!) {
  collection(id: $id) {
    id
    items(first: 1) {
      edges {
        cursor
        node {
          ... on Video {
            id
          }
        }
      }
    }
  }
}
mutation UpdateQuestCreatorCampaignSettings($userID: ID!, $rewardCampaignID: ID!, $isHidden: Boolean!) {
  updateRewardCampaignHidden(input: {isHidden: $isHidden, rewardCampaignID: $rewardCampaignID, userID: $userID}) {
    rewardCampaignChannelSettings {
      rewardCampaignsHidden {
        rewardCampaignID
        isHidden
      }
    }
  }
}
query PollsPageRoot($login: String!) {
  channel: user(login: $login) {
    id
    self {
      isEditor
      isModerator
    }
  }
  currentUser: currentUser {
    id
    isStaff
  }
}
query TeamsDashboard_MinutesWatched($teamName: String!, $teamMembers: [ID!], $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timezone: String!) {
  team(name: $teamName) {
    id
    creatorTimeseriesMetrics(startAt: $startAt, endAt: $endAt, channelIDs: $teamMembers, granularity: $granularity, timeZone: $timezone) {
      metric: minutesWatched {
        items {
          timestamp
          value
        }
        total
      }
    }
  }
}
query PhoneVerificationAudioScanningDisclosureContextQuery($channelID: ID!) {
  currentUser {
    id
    isPhoneNumberVerified
  }
  alertsAudioScanningDisclosureStatus(channelID: $channelID) {
    id
    hasAcknowledgedAudioScanningDisclosure
  }
}
fragment CollectionsListCollection on Collection {
  id
  items(first: 100) {
    totalCount
    edges {
      node {
        ...collectionVideo
      }
    }
  }
  lengthSeconds
  thumbnailURL(width: 80, height: 45)
  title
}

fragment collectionVideo on Video {
  id
}
mutation updateUserViewedVideo($input: UpdateUserViewedVideoInput!) {
  updateUserViewedVideo(input: $input) {
    video {
      id
    }
  }
}
fragment watchPartyPagePayload on WatchPartyResult {
  error {
    ...watchPartyError
  }
  session {
    ...watchPartyPageDecoratedSession
  }
}

fragment watchPartyPageDecoratedSession on WatchParty {
  ...watchPartySession
  decoration {
    item {
      ...watchPartyPageItem
      ...watchPartyEligibilitySelfEdge @include(if: $withLWAAccessToken)
    }
  }
}

fragment watchPartyPageItem on WatchPartyItem {
  id
  isMature
  contentRating
  details {
    ...watchPartyItemEpisodeDetails
  }
  genres
  primeVideoLink
  primeVideoRating {
    count
    stars
  }
  starring
  summary
  title
  thumbnailURL
  type
  yearPublished
}

fragment watchPartyPageCurrentUser on User {
  id
  displayName
  login
  roles {
    isStaff
    isSiteAdmin
  }
}
fragment emotesSettingsEmote on Emote {
  id
  token
  state
  suffix
  setID
  assetType
  createdAt
  order
  type
  imageSource
}
mutation VideoManagerActions_DeleteVideos($input: DeleteVideosInput!) {
  deleteVideos(input: $input) {
    videos {
      id
    }
  }
}
fragment guestStarDropInHostData on User {
  id
  displayName
  profileImageURL(width: 50)
}
mutation ExtensionManagementPage_ApplyExtensionActivations($input: ApplyExtensionActivationsInput!) {
  applyExtensionActivations(input: $input) {
    installedExtensions {
      id
      activationConfig {
        anchor
        slot
        state
      }
      extension {
        id
        clientID
        contentMatchedGames {
          id
          displayName
        }
        name
        hasChatSupport
        bitsSupportLevel
        isBitsEnabled
        subscriptionsSupportLevel
        version
      }
      permittedFeatures {
        canSendChat
        canRetrieveSubscriptionStatus
        canUseBits
        dynamicManagement {
          game {
            id
            displayName
          }
          isManaged
        }
      }
      requiredActions {
        type
      }
      self {
        canActivate
      }
    }
  }
}
mutation Chat_DeleteChatMessage($input: DeleteChatMessageInput!) {
  deleteChatMessage(input: $input) {
    responseCode
    message {
      id
      sender {
        id
        login
        displayName
      }
      content {
        text
      }
    }
  }
}
mutation Thread_RevokeWhisperAccess($input: UpdateWhisperThreadInput!) {
  updateWhisperThread(input: $input) {
    thread {
      id
      participants {
        id
        self {
          whisperPermissions {
            receive
          }
        }
      }
    }
  }
}
query DevSiteCurrentUser_OauthApps($after: Cursor) {
  oauthApps(after: $after) {
    edges {
      cursor
      node {
        category
        createdAt
        id
        groupID
        name
        owner {
          id
        }
        redirectURIs
        willTokensExpire
        updatedAt
        otherDescription
        redirectURI
        isPublic
      }
    }
    pageInfo {
      hasNextPage
    }
  }
}
query SyncedSettingsEmoteAnimationsSettingCalloutDismissed {
  currentUser {
    id
    chatUISettings {
      isEmoteAnimationsSettingCalloutDismissed
    }
  }
}
query UserProfileImage($login: String!) {
  user(login: $login) {
    id
    profileImageURL(width: 50)
  }
}
query SubscribersByGeoQuery($startAt: Time!, $endAt: Time!, $period: TimeSeriesPeriod!, $channel: String!) {
  creatorDashboard(startAt: $startAt, endAt: $endAt, period: $period, channel: $channel) {
    channelAnalytics {
      subCountSeries {
        totalCount
        subGeoBreakdown {
          distributions {
            countryCode
            percentage
          }
          isSufficientlyAnonymized
        }
      }
    }
  }
}
fragment trailerSetupVideo on Video {
  id
  createdAt
  lengthSeconds
  previewThumbnailURL(height: 360, width: 640)
  title
}

fragment trailerSetupVideos on VideoConnection {
  totalCount
  edges {
    node {
      ...trailerSetupVideo
    }
  }
}

query ChannelTrailerSelect($channelLogin: String!, $limit: Int!, $cursor: Cursor) {
  user(login: $channelLogin) {
    id
    videos(first: $limit, after: $cursor, type: UPLOAD, options: {maxLengthSeconds: 61}) {
      ...trailerSetupVideos
    }
  }
}
query ExtensionDashboardNav {
  currentUser {
    id
    login
  }
  extensionCategory(id: "whitelisted") {
    id
    extensions(first: 1) {
      totalCount
    }
  }
}
fragment CollectionFields on Collection {
  id
  description
  owner {
    id
    login
  }
  thumbnailURL(width: 320, height: 180)
  title
  type
  updatedAt
  lengthSeconds
}
mutation ResetOauthAppSecret($input: ResetOauthAppSecretInput!) {
  resetOauthAppSecret(input: $input) {
    error {
      code
    }
    oauthApp {
      secret
      id
    }
  }
}
mutation AddRecommendationFeedback($input: AddRecommendationFeedbackInput!) {
  addRecommendationFeedback(input: $input) {
    recommendationFeedback {
      id
    }
  }
}
fragment accountVerificationOptions on ChatAccountVerificationOptions {
  emailVerificationMode
  partialEmailVerificationConfig {
    minimumAccountAgeInMinutes
    minimumFollowerAgeInMinutes
    shouldRestrictBasedOnAccountAge
    shouldRestrictFirstTimeChatters
    shouldRestrictBasedOnFollowerAge
  }
  phoneVerificationMode
  partialPhoneVerificationConfig {
    minimumAccountAgeInMinutes
    minimumFollowerAgeInMinutes
    shouldRestrictBasedOnAccountAge
    shouldRestrictFirstTimeChatters
    shouldRestrictBasedOnFollowerAge
  }
  isSubscriberExempt
  isVIPExempt
  isModeratorExempt
}
query GetSubscriberFollowersCount($channelID: ID!) {
  user(id: $channelID) {
    id
    subscriberScore {
      count
    }
    followers {
      totalCount
    }
  }
}
mutation WhisperThread_SetThreadSpamStatus($input: UpdateWhisperThreadInput!) {
  updateWhisperThread(input: $input) {
    thread {
      id
      spamInfo {
        lastMarkedNotSpamAt
        likelihood
      }
    }
  }
}
mutation BulkReportUsers($input: ModViewBulkReportUsersInput!) {
  modViewBulkReportUsers(input: $input) {
    reportErrors {
      targetUser {
        id
        login
        displayName
      }
      code
    }
  }
}
mutation DeleteChanlet($input: ArchiveChanletInput!) {
  archiveChanlet(input: $input) {
    chanlet {
      id
    }
  }
}
mutation IncomingAdAlert_SnoozeAd($input: SnoozeAdInput!) {
  snoozeAd(input: $input) {
    status
  }
}
query FrontPageNew_User($limit: Int) {
  currentUser {
    id
    createdAt
    followedGames(first: $limit) {
      nodes {
        id
      }
    }
    roles {
      isPartner
      isStaff
    }
  }
}
query Core_Services_Spade_CurrentUser {
  currentUser {
    id
    login
    hasTurbo
    hasPrime
    language
  }
}
query ContentPolicyPropertiesQuery($login: String!, $vodID: ID!, $isLive: Boolean!, $isVOD: Boolean!) {
  user(login: $login) @include(if: $isLive) {
    ...ContentPolicyPropertiesStream
  }
  video(id: $vodID) @include(if: $isVOD) {
    ...ContentPolicyPropertiesVideo
  }
}
query PlaybackAccessToken($login: String!, $isLive: Boolean!, $vodID: ID!, $isVod: Boolean!, $playerType: String!) {
  streamPlaybackAccessToken(channelName: $login, params: {platform: "web", playerBackend: "mediaplayer", playerType: $playerType}) @include(if: $isLive) {
    value
    signature
    authorization {
      isForbidden
      forbiddenReasonCode
    }
  }
  videoPlaybackAccessToken(id: $vodID, params: {platform: "web", playerBackend: "mediaplayer", playerType: $playerType}) @include(if: $isVod) {
    value
    signature
  }
}
mutation CommonHooks_UnblockUser($input: UnblockUserInput!) {
  unblockUser(input: $input) {
    targetUser {
      id
      login
      profileImageURL(width: 28)
      displayName
    }
  }
}
query GetGuestStarChangelogReadTimestamp {
  guestStarChangelogReadTimestamp {
    timestamp
  }
}
mutation UpdateDragAndDropLayout($input: UpdateDashboardViewMosaicLayoutInput!, $isStreamManagerMosaicLayout: Boolean!, $isTwitchStudioMosaicLayout: Boolean!) {
  updateDashboardViewMosaicLayout(input: $input) {
    errorCode
    layout {
      id
      name
      version
      lastUpdated
      ... on StreamManagerMosaicLayout @include(if: $isStreamManagerMosaicLayout) {
        data
      }
      ... on TwitchStudioMosaicLayout @include(if: $isTwitchStudioMosaicLayout) {
        data
      }
    }
  }
}
query streamDelayWidget($channelID: ID!) {
  channel(id: $channelID) {
    id
    videoStreamSettings {
      isDelayEnabled
      delaySeconds
    }
  }
}
mutation UnpauseRaids($input: UnpauseRaidsInput!) {
  unpauseRaids(input: $input) {
    user {
      id
      raidSettings {
        isAllowingRaids
        pausedUntil
      }
    }
    error {
      code
    }
  }
}
mutation AdsManagerTutorial_SetAdManagerFTUE($input: SetAdManagerFirstTimeUserExperienceConfigInput!) {
  setAdManagerFirstTimeUserExperienceConfig(input: $input) {
    config {
      hasSeenManagerFull
      hasSeenManagerIntro
      hasSeenScheduler
      installRemindedAt
    }
  }
}
fragment updatedBy on User {
  id
  login
  displayName
}
query GuestStarVips($login: String, $first: Int, $after: Cursor) {
  user(login: $login) {
    id
    vips(first: $first, after: $after) {
      edges {
        cursor
        grantedAt
        node {
          id
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
query SubscribersPanelQuery($channelID: ID!, $productLines: [OverrideProductLine!]!) {
  user(id: $channelID) {
    id
    payoutPlans {
      tags
    }
    subscriptionProducts {
      id
      displayName
      tier
      priceInfo {
        id
        price
      }
      revenueConfig {
        id
        splitPercent
      }
    }
    subscriptionProductOverrides(productLines: $productLines) {
      productLine
      channelRevSplitPercent
    }
    subscriberScore {
      breakdown {
        score
        tier
      }
      countBreakdown {
        count
        tier
      }
    }
  }
  premiumWithCap: premiumWithCap(channelID: $channelID) {
    programType
  }
}
fragment neoCheermote on Cheermote {
  id
  prefix
  type
  campaign {
    ...bitsCheermoteCampaign
  }
  tiers {
    id
    bits
    canShowInBitsCard
  }
}

fragment cheermoteGroup on CheermoteGroup {
  templateURL
  nodes {
    ...neoCheermote
  }
}
query GuestStarSessionsQuery($options: GuestStarSessionsOptions) {
  guestStarSessionsForViewers(options: $options) {
    ...guestStarOngoingSession
  }
}

fragment sideNavGuestStarUser on User {
  id
  login
  displayName
  profileImageURL(width: 70)
  primaryColorHex
}

fragment guestStarOngoingSession on GuestStarSessionForViewers {
  id
  host {
    ...sideNavGuestStarUser
  }
  guests {
    ...guestStarGuestSlotForViewers
  }
}

fragment guestStarGuestSlotForViewers on GuestStarSlotForViewers {
  id
  slotID
  user {
    ...sideNavGuestStarUser
  }
}
query RecommendedExtension($extensionID: ID!) {
  currentUser {
    id
    installedExtensions {
      id
      activationConfig {
        slot
        state
      }
      extension {
        id
        version
        clientID
        isBitsEnabled
        bitsSupportLevel
      }
      permittedFeatures {
        canSendChat
        canRetrieveSubscriptionStatus
        canUseBits
        dynamicManagement {
          game {
            id
            displayName
          }
          isManaged
        }
      }
    }
  }
  extension(id: $extensionID) {
    id
    clientID
    summary
    name
    anchor
    version
    isBitsEnabled
    bitsSupportLevel
    hasChatSupport
    subscriptionsSupportLevel
    contentMatchedGames {
      id
      name
      displayName
    }
    iconURLs {
      square100
    }
  }
}
fragment moderatedChannel on User {
  id
  displayName
  login
  profileImageURL(width: 70)
  broadcastSettings {
    id
    title
    game {
      id
      displayName
    }
  }
  stream {
    id
    viewersCount
  }
}
query RecentRaids_ModerationTools($channelID: ID) {
  user(id: $channelID) {
    id
    recentRaids {
      id
      goAt
      sourceChannel {
        id
        login
      }
    }
  }
  currentUser {
    id
  }
}
mutation ExtensionConfigureApplyExtensionActivations($input: ApplyExtensionActivationsInput!) {
  applyExtensionActivations(input: $input) {
    installedExtensions {
      id
      activationConfig {
        anchor
        slot
        state
      }
      extension {
        id
        clientID
        name
        version
      }
      requiredActions {
        type
      }
      self {
        canActivate
      }
    }
  }
}
query CommunityIntroductionStatus($channelID: ID) {
  channel(id: $channelID) {
    id
    owner {
      id
      displayName
      profileImageURL(width: 28)
    }
    self {
      communityIntroStatus {
        code
        prompt
        promptID
      }
    }
  }
}
query GuestStarExampleVodsQuery($id: ID!) {
  video(id: $id) {
    id
    creator {
      id
      displayName
      profileImageURL(width: 70)
    }
    previewThumbnailURL(height: 360, width: 640)
    game {
      id
      name
    }
    title
  }
}
query DevOrganizationPanel_GamesDrops($id: ID!) {
  organization(id: $id) {
    id
    games {
      id
    }
  }
}
mutation QuickActionsCreateClip($input: CreateClipInput!) {
  createClip(input: $input) {
    clip {
      id
      url
    }
    error {
      code
    }
  }
}
query CreatorCollaborationInitialChannelData($channelID: ID!) {
  user(id: $channelID) {
    id
    displayName
    login
    profileImageURL(width: 50)
    stream {
      id
      game {
        id
        displayName
      }
      viewersCount
    }
  }
}
query Dashboard_CensusGetBirthdate {
  currentUser {
    id
    login
    onboardingInvitations {
      payout {
        id
        workflow {
          id
          registration {
            birthdate
          }
        }
      }
    }
  }
}
mutation LeaveRaid($input: LeaveRaidInput!) {
  leaveRaid(input: $input) {
    raidID
  }
}
mutation FollowGameButton_FollowGame($input: FollowGameInput!) {
  followGame(input: $input) {
    game {
      id
      self {
        follow {
          followedAt
        }
      }
    }
  }
}
query ComscoreStreamingQuery($channel: String, $isLive: Boolean!, $isVodOrCollection: Boolean!, $vodID: ID!, $isClip: Boolean!, $clipSlug: ID!) {
  user(login: $channel) @include(if: $isLive) {
    id
    displayName
    stream {
      id
      createdAt
      game {
        id
        name
      }
    }
    broadcastSettings {
      id
      title
    }
  }
  video(id: $vodID) @include(if: $isVodOrCollection) {
    id
    broadcastType
    createdAt
    game {
      id
      name
    }
    lengthSeconds
    owner {
      id
      displayName
    }
    title
  }
  clip(slug: $clipSlug) @include(if: $isClip) {
    id
    broadcaster {
      id
      displayName
    }
    createdAt
    durationSeconds
    title
    game {
      id
      name
    }
  }
}
fragment subscriptionProductEmoteModifier on EmoteModifier {
  code
  name
}
mutation VideoManagerActions_DeleteAllChannelVideos($input: DeleteAllChannelVideosInput!) {
  deleteAllChannelVideos(input: $input) {
    status {
      code
    }
  }
}
fragment AdRequestVOD on Video {
  id
  lengthSeconds
  broadcastType
  title
  game {
    ...AdRequestGame
  }
  owner {
    ...AdRequestBroadcaster
  }
  contentTags {
    ...AdRequestTag
  }
  contentClassificationLabels {
    ...AdRequestContentLabel
  }
}
query RedeemSubPageQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    displayName
    self {
      subscriptionBenefit {
        id
      }
      canRedeemSubscription
    }
  }
}
fragment sponsorshipActivationSettings on UserSponsorshipSettings {
  activationSettings {
    channelSkinVideoOverlayAssetPosition
  }
}

query SponsorshipActivationSettings($input: UserSponsorshipSettingsInput!) {
  userSponsorshipSettings(input: $input) {
    ...sponsorshipActivationSettings
  }
}
query UsernameValidator_User($username: String!) {
  isUsernameAvailable(username: $username)
}
query SubsTileQuery($login: String!) {
  user(login: $login) {
    id
    subscriberScore {
      countBreakdown {
        count
      }
      current
      next
    }
  }
}
mutation ApproveUnbanRequest($input: ApproveUnbanRequestInput!) {
  approveUnbanRequest(input: $input) {
    unbanRequest {
      id
      status
      resolvedAt
    }
    error {
      code
    }
  }
}
query SpotlightStreamInfoPreviewQuery($login: String!) {
  user(login: $login) {
    id
    login
    displayName
    lastBroadcast {
      id
      title
      game {
        id
        name
        boxArtURL(width: 85, height: 113)
      }
    }
    broadcastSettings {
      id
      game {
        id
        name
        boxArtURL(width: 85, height: 113)
      }
      title
    }
  }
}
query CreatorDropsDashboardCurrentUser {
  currentUser {
    id
    login
  }
}
query GetBitsButton_Bits($isLoggedIn: Boolean!, $withChannel: Boolean!, $login: String!) {
  bitsOffers @skip(if: $isLoggedIn) {
    ...bitsOffer
  }
  currentUser @include(if: $isLoggedIn) {
    id
    idSHA1
    bitsBalance
    bitsOffers {
      ...bitsOffer
    }
    bitsUserSettings {
      ...bitsUserSettings
    }
    bitsUserState
  }
  user(login: $login) @include(if: $withChannel) {
    id
    cheer {
      id
    }
  }
}
query DropCurrentSessionContext {
  currentUser {
    id
    dropCurrentSession {
      ...dropCurrentSessionData
    }
  }
}

fragment dropCurrentSessionData on DropCurrentSession {
  channel {
    id
    name
    displayName
  }
  game {
    id
    displayName
  }
  currentMinutesWatched
  requiredMinutesWatched
  dropID
}
query ChannelSkins($channelLogin: String) {
  channel(name: $channelLogin) {
    id
    sponsorships {
      channelSkin {
        ...ChannelSkinsTracking
        adsAudiencePolicy {
          ...ChannelSkinsAdsAudiencePolicy
        }
        advertiser {
          ...ChannelSkinsAdvertiser
        }
        placements {
          ...ChannelSkinsPlacement
        }
      }
    }
  }
  user(login: $channelLogin) {
    id
    displayName
    profileImageURL(width: 70)
    login
    primaryColorHex
    self {
      subscriptionBenefit {
        id
        product {
          id
          hasAdFree
        }
      }
    }
  }
  currentUser {
    id
    hasTurbo
  }
}

fragment ChannelSkinsAdsAudiencePolicy on AdsAudiencePolicy {
  shouldShowToTurbo
  shouldShowToChannelSubscriber
}

fragment ChannelSkinsAdvertiser on Advertiser {
  name
  ctaMessage
  ctaURL
  imageAsset {
    lightModeURL
    darkModeURL
  }
  iconBackgroundColorHexCode
}

fragment ChannelSkinsPlacement on SponsorshipPlacement {
  location
  assetPosition
  backgroundType
  colorHexCode
  imageAsset {
    lightModeURL
    darkModeURL
  }
  iconBackgroundColorHexCode
}

fragment ChannelSkinsTracking on ChannelSkin {
  activation {
    id
  }
  activationProgression
  campaign
  campaignInstance {
    id
  }
}
query ClipShareOverlay($slug: ID!) {
  clip(slug: $slug) {
    id
    broadcaster {
      id
      login
    }
    title
  }
}
query CelebrationContextChannelID($channelLogin: String!) {
  channel(name: $channelLogin) {
    id
  }
}
query GetViewerQueueInfo($channelID: ID!, $viewerID: ID!) {
  requestToJoinViewerQueueInfo(channelID: $channelID, viewerID: $viewerID) {
    id
    size
    status
    maximumSize
    isSubsEnabled
    isFollowersEnabled
    isAudioOnlyEnabled
    self {
      isViewerInQueue
    }
    minSubscriptionLength
    minFollowingLength
  }
}
fragment paymentMethodFragment on PaymentMethod {
  chargeInstrumentID
  provider
  paymentType
  billingCountry
  billingEmail
  billingUsername
  cardType
  lastFour
  expirationMonth
  expirationYear
  paymentScheme
}
query RecapEligibilityQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    self {
      subscriptionBenefit {
        id
      }
      banStatus {
        isPermanent
        expiresInMs
      }
    }
    roles {
      isAffiliate
      isPartner
    }
  }
}
query SquadStreamPage($channelLogin: String!) {
  user(login: $channelLogin) {
    id
  }
}
query TeamsDashboard_UniqueChatters($teamName: String!, $teamMembers: [ID!], $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timezone: String!) {
  team(name: $teamName) {
    id
    creatorTimeseriesMetrics(startAt: $startAt, endAt: $endAt, channelIDs: $teamMembers, granularity: $granularity, timeZone: $timezone) {
      metric: uniqueChatters {
        items {
          timestamp
          value
        }
        total
      }
    }
  }
}
query Core_Services_Spade_Video($id: ID!) {
  video(id: $id) {
    id
    broadcastType
  }
}
query VideoPlayerSubscriberVODOverlayVideoQuery($videoID: ID!) {
  video(id: $videoID) {
    id
    owner {
      id
      displayName
      profileImageURL(width: 150)
      login
    }
  }
}
query FollowCueFollowState($channelID: ID!, $userLogin: String!) {
  user(login: $userLogin) {
    id
    relationship(targetUserID: $channelID) {
      followedAt
    }
  }
}
query GetDisplayNameFromID($userID: ID!) {
  user(id: $userID) {
    id
    login
    displayName
  }
}
query ChatSettingsSlowModeSetting($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    chatSettings {
      slowModeDurationSeconds
    }
  }
}
query SecurityPage_Connections {
  currentUser {
    id
    clientAuthorizations {
      clientID
      clientName
    }
    accountConnections {
      riot {
        id
      }
      steam {
        id
      }
      twitter {
        username
      }
      youtube {
        channelURL
      }
      tikTok {
        username
      }
    }
  }
}
query DashboardSettingsUserColor($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    displayName
    primaryColorHex
    chatColor
    videos {
      edges {
        node {
          id
          previewThumbnailURL(width: 320, height: 180)
        }
      }
    }
  }
}
mutation DeleteChannelBlockedTerm($input: DeleteChannelBlockedTermByIDInput!) {
  deleteChannelBlockedTermByID(input: $input) {
    error {
      code
    }
  }
}
query PendingOrganizationApplication {
  pendingOrganizationApplication {
    organizationName
    status
  }
}
fragment rewardQueueProgressFragment on CommunityPointsUpdateCustomRewardRedemptionStatusesProgress {
  id
  newStatus
  rewardID
  total
  processed
}
query AdRequestHandling($login: String!, $vodID: ID!, $collectionID: ID!, $isLive: Boolean!, $isVOD: Boolean!, $isCollection: Boolean!) {
  currentUser {
    ...AdRequestCurrentUser
  }
  user(login: $login) @include(if: $isLive) {
    ...AdRequestBroadcaster
  }
  video(id: $vodID) @include(if: $isVOD) {
    ...AdRequestVOD
  }
  collection(id: $collectionID) @include(if: $isCollection) {
    id
    items(first: 1) {
      edges {
        node {
          ...AdRequestVOD
        }
      }
    }
    owner {
      ...AdRequestBroadcaster
    }
  }
}
query GuestStarModChannelsList($login: String!, $cursor: Cursor) {
  user(login: $login) {
    id
    guestStarModeratorChannels(first: 100, after: $cursor) {
      edges {
        ...guestStarModChannelEdgeFragment
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}

fragment guestStarModChannelEdgeFragment on GuestStarModeratorChannelEdge {
  cursor
  node {
    id
    login
  }
}
query ChannelAnalyticsLiveViewsTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      liveViews {
        value
        timestamp
      }
    }
  }
}
query VideoMarkersChatCommand($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    stream {
      id
      createdAt
    }
  }
}
query CommunitySupportSettings($channelID: ID!) {
  user(id: $channelID) {
    id
    login
    settings {
      leaderboard {
        isCheerEnabled
        isSubGiftEnabled
        defaultLeaderboard
        timePeriod
      }
      recentChannelSupportEvents {
        isOptedOut
      }
    }
  }
}
fragment searchTagFragment on Tag {
  id
  isAutomated
  isLanguageTag
  localizedDescription
  localizedName
  tagName
}
mutation DevExtensionUploadImages($input: CreateExtensionImageUploadInfoInput!) {
  createExtensionImageUploadInfo(input: $input) {
    discovery {
      uploadID
      url
    }
    logo {
      uploadID
      url
    }
    screenshots {
      uploadID
      url
    }
    taskbar {
      uploadID
      url
    }
    error {
      code
    }
  }
}
mutation AcknowledgeAutoBanEvent($input: AcknowledgeAutoBannedUsersInput!) {
  acknowledgeAutoBannedUsers(input: $input) {
    autoBanIDs
  }
}
mutation AddEditorUser($input: AddEditorInput!) {
  addEditor(input: $input) {
    channel {
      id
    }
    targetUser {
      id
    }
    error {
      code
    }
  }
}
query VideoChatCard_Video($videoID: ID!) {
  video(id: $videoID) {
    id
    title
    previewThumbnailURL(width: 90, height: 51)
    publishedAt
    owner {
      id
      login
      displayName
    }
  }
}
mutation SetSlowModeSetting($input: UpdateChatSettingsInput!) {
  updateChatSettings(input: $input) {
    chatSettings {
      slowModeDurationSeconds
    }
  }
}
fragment profileUser on User {
  id
  description
  displayName
  isEmailVerified
  login
  settings {
    preferredLanguageTag
  }
}
fragment videoPlayReferralsFragment on VideoPlayReferrals {
  items {
    ...aggregatedReferralsFragment
  }
  total
}

fragment aggregatedReferralsFragment on AggregatedReferrals {
  count
  name
}
fragment AdRequestBroadcaster on User {
  id
  login
  adProperties {
    adServerDefault
    hasPrerollsDisabled
    hasPostrollsDisabled
    hasVodAdsEnabled
    vodArchiveMidrolls
  }
  self {
    subscriptionBenefit {
      id
      product {
        id
        hasAdFree
      }
    }
  }
  roles {
    isAffiliate
    isPartner
  }
  broadcastSettings {
    id
    isMature
  }
  stream {
    id
    broadcasterSoftware
    game {
      ...AdRequestGame
    }
    tags {
      ...AdRequestTag
    }
  }
}
fragment NielsenContentMetadataVideo on Video {
  id
  createdAt
  title
  game {
    id
    displayName
  }
  owner {
    id
    login
  }
}

query NielsenContentMetadata($collectionID: ID!, $login: String!, $vodID: ID!, $isCollectionContent: Boolean!, $isLiveContent: Boolean!, $isVODContent: Boolean!) {
  user(login: $login) @include(if: $isLiveContent) {
    id
    broadcastSettings {
      id
      title
    }
    stream {
      id
      createdAt
      game {
        id
        displayName
      }
    }
  }
  video(id: $vodID) @include(if: $isVODContent) {
    ...NielsenContentMetadataVideo
  }
  collection(id: $collectionID) @include(if: $isCollectionContent) {
    id
    items(first: 1) {
      edges {
        node {
          ...NielsenContentMetadataVideo
        }
      }
    }
  }
}
fragment productOfferCheckoutPrice on Offer {
  id
  listing {
    chargeModel {
      internal {
        self {
          recurlyCheckoutPrice: checkoutPrice(quantity: 1, paymentProvider: RECURLY) {
            errorCode
            checkoutPriceSummary {
              currency
              exponent
              id
              description
              pricingIdentifier
              isTaxInclusive
              price
              tax
              total
              discount {
                price
                total
                tax
              }
            }
          }
        }
      }
    }
  }
  promotion {
    id
    name
    promoDisplay {
      discountPercent
      discountType
    }
    priority
  }
  quantity {
    min
    max
  }
}
fragment redeemSubSearchChannel on User {
  id
  displayName
  login
  profileImageURL(width: 50)
}

query RedeemSubSearchChannel($userQuery: String!) {
  searchUsers(userQuery: $userQuery, hasSubscriptionProductsOnly: true) {
    edges {
      node {
        ...redeemSubSearchChannel
      }
      cursor
    }
    pageInfo {
      hasNextPage
    }
  }
}
query OnboardingModal_Recommendations($gamesLimit: Int, $streamsLimit: Int, $recRequestID: ID!, $location: String!, $context: RecommendationsContext!) {
  recommendedGames(first: $gamesLimit, recRequestID: $recRequestID, location: $location, context: $context) {
    edges {
      trackingID
      node {
        id
        name
        displayName
        avatarURL(width: 285, height: 380)
      }
    }
  }
  recommendedStreams(first: $streamsLimit, recRequestID: $recRequestID, location: $location, context: $context) {
    edges {
      trackingID
      node {
        id
        broadcaster {
          id
          login
          displayName
          profileImageURL(width: 70)
        }
        game {
          id
          displayName
        }
      }
    }
  }
}
query ChannelAnalyticsHostAndRaidViewersTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      hostRaidViewers {
        value
        timestamp
      }
    }
  }
}
query ChannelSubscribeRedirect($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    subscriptionProducts {
      id
      name
      tier
    }
  }
}
query GameSelectorSearchCategories($query: String!, $after: Cursor) {
  searchCategories(query: $query, first: 10, after: $after) {
    edges {
      cursor
      node {
        displayName
        id
        name
      }
    }
  }
}
query StreamTagsTrackingChannel($channel: String) {
  user(login: $channel) {
    id
    login
    stream {
      id
      ...streamTagsTrackingTags
    }
  }
}
mutation ConnectAdIdentityMutation($input: ConnectAdIdentityInput!) {
  connectAdIdentity(input: $input) {
    identityURL
  }
}
query TurboProductInformation($name: String!) {
  subscriptionProduct(productName: $name) {
    id
    offers {
      id
      eligibility {
        benefitsStartAt
      }
      listing {
        chargeModel {
          internal {
            previewPrice {
              id
              currency
              exponent
              total
              discount {
                total
              }
            }
          }
        }
      }
    }
    self {
      benefit {
        id
        states {
          state
          createdAt
        }
        renewsAt
        pendingSubscription {
          startsAt
        }
      }
    }
  }
}
fragment rewardCampaignPreview on RewardPreview {
  id
  campaign {
    id
    aboutURL
  }
  reward {
    id
    name
    offerText
    thumbnailImage {
      image1xURL
    }
  }
  progressSnapshots {
    dimensionName
    previewedProgress
    goalProgress
    currentProgress
  }
}
fragment filterCategory on ActivityFeedFilterCategory {
  id
  displayName
}

query ActivityFilterContextQuery($channelID: ID!) {
  channel(id: $channelID) {
    id
    activityFeed {
      filterCategories {
        ...filterCategory
      }
    }
  }
}
mutation TeamsDashboard_CreateTeamImageUploadRequest($input: CreateTeamImageUploadRequestInput!) {
  createTeamImageUploadRequest(input: $input) {
    response {
      imageID
      url
    }
    error {
      code
    }
  }
}
query ClipsView($slug: ID!, $isCommunityMomentsFeatureEnabled: Boolean!) {
  clip(slug: $slug) {
    id
    creationState
    game {
      id
      name
    }
    broadcaster {
      id
      displayName
    }
    communityMoment @include(if: $isCommunityMomentsFeatureEnabled) {
      id
      claimCount
      createdAt
    }
  }
}
query RadioCreatorArtist($channelID: ID!) {
  user(id: $channelID) {
    ...creatorArtistFragment
  }
}
query RecentlyVisitedChannels($userIDs: [ID!]!) {
  users(ids: $userIDs) {
    id
    login
    displayName
    profileImageURL(width: 70)
    primaryColorHex
    broadcastSettings {
      id
      title
    }
    stream {
      id
      previewImageURL(width: 320, height: 180)
      broadcaster {
        id
        broadcastSettings {
          id
          title
        }
      }
      viewersCount
      game {
        id
        slug
        displayName
        name
      }
      type
    }
  }
}
query RetentionRecentlyCalculatedStreamQuery($channelID: ID!) {
  retentionRecentlyCalculatedStreams(channelID: $channelID) {
    mostRecentCalculatedRetentionStreams {
      id
      streamTimes {
        startAt
        endAt
      }
      totalNewViewers
      returningNewViewers
      categories {
        id
        name
      }
    }
  }
}
fragment tenure on SubscriptionTenure {
  daysRemaining
  months
}
query ChangeUsernameCurrentUser {
  currentUser {
    id
    login
  }
}
query UnbanRequestModal($channelID: ID!) {
  user(id: $channelID) {
    id
    self {
      banStatus {
        isPermanent
        reason
      }
    }
  }
}
query SyncedSettingsCelebrations {
  currentUser {
    id
    chatUISettings {
      isCelebrationsEnabled
    }
  }
}
fragment subsLandingPageUserInfo on User {
  id
  login
  displayName
  profileImageURL(width: 300)
}
query Chat_ChannelData($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    login
    displayName
    chatSettings {
      rules
    }
    self {
      isEditor
      isModerator
      isVIP
    }
  }
}
query UpcomingSchedule($categoryID: ID!, $options: FeaturedUpcomingStreamsOptions!) {
  featuredUpcomingStreams(categoryID: $categoryID, options: $options) {
    nodes {
      id
      reminderCount
      segment {
        id
        title
        baseSegmentID
        repeatEndsAfterCount
        channel {
          id
          name
          owner {
            id
            profileImageURL(width: 150)
            bannerImageURL
            primaryColorHex
            login
            tags {
              id
              localizedName
            }
          }
          stream {
            id
            viewersCount
          }
        }
        startAt
        endAt
        hasReminder
        isCancelled
      }
    }
  }
}
fragment userRole on UserRoles {
  isPartner
  isAffiliate
}
mutation ExtensionSearchPage_InstallExtension($input: InstallExtensionInput!) {
  installExtension(input: $input) {
    installedExtension {
      id
      extension {
        id
        clientID
        version
      }
    }
  }
}
fragment socialMediaFields on SocialMedia {
  id
  url
  name
  title
}
query ModViewChannelQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    login
    displayName
    profileImageURL(width: 70)
    self {
      isModerator
    }
  }
  currentUser {
    id
    login
    displayName
    profileImageURL(width: 70)
  }
}
query Settings_ChannelVODsSettings {
  currentUser {
    id
    channel {
      id
      vodSettings {
        shouldAlwaysPublishVODs
        categoryBlocklist {
          id
          name
          displayName
          boxArtURL(width: 40, height: 55)
        }
      }
    }
  }
}
mutation DismissCreatorHomeCardFeature($input: DismissCreatorHomeCardFeatureInput!) {
  dismissCreatorHomeCardFeature(input: $input) {
    identifier
    error
  }
}
fragment scheduleFragment on Schedule {
  id
  interruption {
    endAt
    reason
    startAt
  }
  segments(includeFutureSegments: true) {
    categories {
      id
      boxArtURL(width: 144, height: 192)
      displayName
      name
    }
    endAt
    id
    isCancelled
    startAt
    title
    cancelledUntil
    reminderCount
    repeatEndsAfterCount
    firstOccurrenceDate
  }
}
query VideoManagerActions_VideoManagerProperties($id: ID!) {
  user(id: $id) {
    id
    accountConnections {
      youtube {
        channelURL
      }
    }
  }
}
query PurchaseOrderContextGetPurchaseOrder($purchaseOrderID: ID!) {
  currentUser {
    id
    purchaseOrder(id: $purchaseOrderID) {
      ...purchaseOrder
    }
  }
}
query ChannelCollectionCore($collectionID: ID!) {
  collection(id: $collectionID) {
    id
    owner {
      ...coreChannelFragment
    }
    items(first: 1) {
      edges {
        node {
          ... on Video {
            id
          }
        }
      }
    }
  }
}
mutation DeleteChannelPermittedTerm($input: DeleteChannelPermittedTermByIDInput!) {
  deleteChannelPermittedTermByID(input: $input) {
    error {
      code
    }
  }
}
query ExtensionPanel_Conditions_BitsBalance($extensionID: ID!, $extensionVersion: String, $conditionID: ID!, $conditionOwnerID: ID!) {
  currentUser {
    id
    bitsBalance
  }
  extension(id: $extensionID, version: $extensionVersion) {
    id
    challengeCondition(input: {conditionID: $conditionID, conditionOwnerID: $conditionOwnerID}) {
      id
      name
    }
  }
}
query PubSubSimulator($channelLogin: String!) {
  currentUser {
    id
    login
  }
  channelUser: user(login: $channelLogin) {
    id
    login
  }
}
fragment alertEmoteFragment on AlertEmote {
  id
  code
}
query BitsThresholdSettingsForm_GetBitsThresholdSettings($login: String!) {
  user(login: $login) {
    id
    login
    cheer {
      id
      enrolledExperiments
    }
    settings {
      cheer {
        id
        chatMessage {
          minBitsPerEmote
          minBitsToCheer
        }
        pinnedCheers {
          isEnabled
          minBits
        }
      }
    }
  }
}
query AccessIsBountiesEnabledQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    bountyBoardSettings {
      status
    }
  }
}
query ChatLine_SubsOnlyUpsell_UserSubscriptionProducts($login: String!) {
  user(login: $login) {
    id
    subscriptionProducts {
      id
      url
    }
  }
}
query RadioCurrentlyPlaying($channelID: ID!) {
  user(id: $channelID) {
    id
    radio {
      currentlyPlaying {
        isCurrentlyPlaying
        track {
          id
          title
          album {
            id
            imageURL
            name
          }
          artists {
            id
            name
            creatorChannelID
            channel {
              id
              name
              owner {
                ...creatorArtistFragment
              }
            }
          }
        }
        source {
          id
          contentType
          spotifyURL
          title
          imageURL
          soundtrackURL
        }
      }
    }
  }
}
mutation CreateCommunityPointsImageUploadInfo($input: CreateCommunityPointsImageUploadInfoInput!) {
  createCommunityPointsImageUploadInfo(input: $input) {
    error {
      code
    }
    uploadInfoLarge {
      uploadID
      url
    }
    uploadInfoMedium {
      uploadID
      url
    }
    uploadInfoSmall {
      uploadID
      url
    }
  }
}
mutation DeleteAlertSet($input: DeleteAlertSetInput!) {
  deleteAlertSet(input: $input) {
    error
  }
}
mutation DenyUnbanRequest($input: DenyUnbanRequestInput!) {
  denyUnbanRequest(input: $input) {
    unbanRequest {
      id
      status
      resolvedAt
    }
    error {
      code
    }
  }
}
query DevOnlyChildGQL {
  currentUser {
    id
    chatColor
    login
    displayName
  }
}
mutation SetChatScreenReaderAutoAnnounce($input: SetChatScreenReaderAutoAnnounceInput!) {
  setChatScreenReaderAutoAnnounce(input: $input) {
    isChatScreenReaderAutoAnnounceEnabled
  }
}
mutation UnVIPUser($input: RevokeVIPInput!) {
  revokeVIP(input: $input) {
    channel {
      id
    }
    revokee {
      id
      login
    }
    error {
      code
    }
  }
}
query ClipsChatCard_Clip($slug: ID!) {
  clip(slug: $slug) {
    id
    thumbnailURL
    title
    slug
    url
    curator {
      id
      displayName
    }
    broadcaster {
      id
      displayName
    }
  }
}
mutation SubsSettingsSection_UpdateSubscriptionProduct($input: UpdateSubscriptionProductInput!) {
  updateSubscriptionProduct(input: $input) {
    product {
      id
      hasAdFree
      hasFastChat
      hasSubonlyVideoArchive
      hasSubOnlyChat
    }
  }
}
query FollowCueChatters($channelID: ID!) {
  channel(id: $channelID) {
    id
    chatters {
      viewers {
        login
      }
    }
  }
}
query PrimeSubscribe_UserPrimeData($login: String!) {
  user(login: $login) {
    id
    self {
      canPrimeSubscribe
      primeSubCreditBenefit {
        willRenew
        renewalDate
      }
      subscriptionBenefit {
        id
        purchasedWithPrime
        tier
        platform
        renewsAt
        endsAt
        paidUpgrade {
          price
          startsAt
        }
        gift {
          isGift
          gifter {
            id
            displayName
          }
        }
      }
    }
  }
  currentUser {
    id
    hasPrime
  }
  requestInfo {
    countryCode
  }
}
query LeaderboardBadgePeriod($channelLogin: String) {
  channel(name: $channelLogin) {
    id
    leaderboardTimePeriod
  }
}
mutation Thread_ArchiveThread($input: UpdateWhisperThreadInput!) {
  updateWhisperThread(input: $input) {
    thread {
      id
      isArchived
    }
  }
}
query Core_Services_Spade_EmoteCard_User($channelID: ID!) {
  user(id: $channelID) {
    id
    hasPrime
    self {
      canPrimeSubscribe
      subscriptionBenefit {
        id
        tier
        purchasedWithPrime
      }
    }
  }
}
mutation DeleteUserChannelOfflineImage($input: SetUserDefaultChannelOfflineImageInput!) {
  setUserDefaultChannelOfflineImage(input: $input) {
    error {
      code
    }
  }
}
query ChatMessagesTimeseriesStats_StreamSummary($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      granularity
      chatMessages {
        value
        timestamp
      }
    }
    creatorMetricsByInterval(startAt: $startAt, endAt: $endAt, numberOfIntervals: 1) {
      items {
        totalChatMessagesString
      }
    }
  }
}
fragment streamEventCelebration on StreamEventCelebration {
  id
  occursAt
  isSnoozed
}
fragment fetchedGame on Game {
  id
  giantBombID
  name
}

query DeveloperBadgeStatus($orgID: ID!) {
  organization(id: $orgID) {
    id
    isBadgesEnabled
    type
    games {
      ...fetchedGame
    }
  }
}
query TeamsDashboard_TeamInvitations($teamName: String!, $cursor: Cursor, $limit: Int = 10) {
  team(name: $teamName) {
    id
    invitedUsers(first: $limit, after: $cursor) {
      pageInfo {
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          login
          displayName
          profileImageURL(width: 70)
        }
      }
    }
  }
}
fragment ContentPolicyPropertiesStream on User {
  id
  stream {
    id
    contentPolicyProperties {
      hasBrandedContent
    }
  }
}
query ContentClassificationContextStreamPubsub($channelID: ID) {
  user(id: $channelID) {
    id
    stream {
      id
      contentClassificationLabelPolicyProperties {
        ...contentClassificationLabelPoliciesFields
      }
    }
  }
}
mutation ChannelPanelsUpdatePanel($input: UpdatePanelInput!) {
  updatePanel(input: $input) {
    ...updatePanelPayload
  }
}

fragment updatePanelPayload on UpdatePanelPayload {
  panel {
    id
    type
    ... on DefaultPanel {
      title
      imageURL
      linkURL
      description
    }
    ... on ExtensionPanel {
      slotID
    }
  }
  error
}
query TrackingManager_RequestInfo {
  requestInfo {
    countryCode
    ipAddress
  }
}
query VideoShareBox_CollectionTrackingMeta($creatorID: ID!) {
  user(id: $creatorID) {
    id
    login
    roles {
      isPartner
    }
  }
}
query FollowButton_FollowEvent_User($id: ID!) {
  user(id: $id) {
    id
    isPartner
    primaryColorHex
    stream {
      id
      game {
        id
        name
      }
    }
  }
}
mutation DeleteChannelClips($input: DeleteChannelClipsInput!) {
  deleteChannelClips(input: $input) {
    channelID
  }
}
fragment VideoPlayer_CollectionManager_Video on Video {
  id
}

fragment VideoPlayer_CollectionManager_Collection on Collection {
  id
  items(first: 100) {
    edges {
      node {
        ...VideoPlayer_CollectionManager_Video
      }
    }
  }
}

query VideoPlayer_CollectionManager($collectionID: ID!) {
  collection(id: $collectionID) {
    ...VideoPlayer_CollectionManager_Collection
  }
}
query PayoutMethodInfoQuery {
  currentUser {
    id
    roles {
      isAffiliate
      isPartner
    }
    onboardingInvitations {
      payout {
        id
        workflow {
          id
          currentStep
        }
      }
    }
    payout {
      method
    }
  }
}
query ChannelAnalytics_Notifications($channelName: String!, $startAt: Time!, $endAt: Time!, $first: Int!, $after: Cursor) {
  user(login: $channelName) {
    id
    goLiveNotificationConnection(startAt: $startAt, endAt: $endAt, first: $first, sort: DESC, after: $after) {
      pageInfo {
        hasNextPage
      }
      edges {
        cursor
        node {
          customText
          engagements
          followerCount
          followersNotified
          streamStartTime
          id: streamStartTime
        }
      }
    }
  }
}
mutation UpdateCommunityIntrosChannelSettings($input: UpdateCommunityIntrosChannelSettingsInput!) {
  updateCommunityIntrosChannelSettings(input: $input) {
    settings {
      isEnabled
      prompt
      isModAccessEnabled
    }
  }
}
query PinnedChatSettings($channelID: ID!) {
  channel(id: $channelID) {
    id
    pinnedChatSettings {
      isModAccessEnabled
    }
  }
}
query SegmentPopover($login: String!) {
  user(login: $login) {
    id
    primaryColorHex
    profileImageURL(width: 50)
  }
}
fragment threadListItemSpamInfo on WhisperSpamInfo {
  lastMarkedNotSpamAt
  likelihood
}
query ChannelEditButton {
  currentUser {
    id
    login
    roles {
      isSiteAdmin
    }
  }
}
mutation ArchiveCharityCampaign($input: ArchiveCharityCampaignInput!) {
  archiveCharityCampaign(input: $input) {
    error {
      code
    }
  }
}
query Dac7InterruptScreenQuery {
  currentUser {
    id
    payout {
      firstOnboarded
      taxIntents {
        type
        state
      }
    }
  }
}
mutation SelectAdIncentiveOffer($input: SelectAdIncentiveOfferInput!) {
  selectAdIncentiveOffer(input: $input) {
    error {
      code
    }
  }
}
query VideoAccessToken_Collection($id: ID!) {
  collection(id: $id) {
    id
    items(first: 1) {
      edges {
        cursor
        node {
          ... on Video {
            id
          }
        }
      }
    }
  }
}
query StreamEventsActiveCelebrationCalloutQuery($channelID: ID!) {
  channel(id: $channelID) {
    id
    activeStreamEventCelebration {
      id
    }
  }
}
query Whispers_Tracking_CurrentUser {
  currentUser {
    id
    hasTurbo
    availability
    login
  }
}
fragment modActionText on ModActionsLocalizedTextFragment {
  token {
    ... on ModActionsLocalizedTextToken {
      text
    }
    ... on User {
      displayName
      login
      id
    }
    ... on UserError {
      key
    }
    ... on UserDoesNotExist {
      key
    }
  }
}
query CommonHooks_SearchUsers($query: String!, $count: Int, $cursor: Cursor, $hasSubscriptionProductsOnly: Boolean) {
  searchUsers(userQuery: $query, first: $count, after: $cursor, hasSubscriptionProductsOnly: $hasSubscriptionProductsOnly) {
    edges {
      cursor
      node {
        id
        broadcastSettings {
          id
          title
        }
        displayName
        followers {
          totalCount
        }
        lastBroadcast {
          id
          startedAt
        }
        login
        profileImageURL(width: 150)
        roles {
          isPartner
        }
        self {
          hasGuestStarFavorited
        }
      }
    }
    totalCount
    pageInfo {
      hasNextPage
      hasPreviousPage
    }
  }
}
mutation SetAdIncentiveOfferViewedState($input: SetAdIncentiveOfferViewedStateInput!) {
  setAdIncentiveOfferViewedState(input: $input) {
    error {
      code
    }
  }
}
query ChatRoomState($login: String) {
  channel: user(login: $login) {
    id
    chatSettings {
      isEmoteOnlyModeEnabled
      followersOnlyDurationMinutes
      slowModeDurationSeconds
      accountVerificationOptions {
        emailVerificationMode
        partialEmailVerificationConfig {
          minimumAccountAgeInMinutes
          minimumFollowerAgeInMinutes
          shouldRestrictBasedOnAccountAge
          shouldRestrictFirstTimeChatters
          shouldRestrictBasedOnFollowerAge
        }
        phoneVerificationMode
        partialPhoneVerificationConfig {
          minimumAccountAgeInMinutes
          minimumFollowerAgeInMinutes
          shouldRestrictBasedOnAccountAge
          shouldRestrictFirstTimeChatters
          shouldRestrictBasedOnFollowerAge
        }
        isSubscriberExempt
        isVIPExempt
        isModeratorExempt
      }
    }
    subscriptionProducts {
      id
      hasSubOnlyChat
    }
  }
}
mutation UpdateOwnerChanletAttributes($input: UpdateOwnerChanletAttributesInput!) {
  updateOwnerChanletAttributes(input: $input) {
    ownerChanletAttributes {
      isChanletFeatureEnabled
    }
  }
}
query PollCommandHandler_ChannelData($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    roles {
      isAffiliate
      isPartner
    }
  }
}
query Community_Moments_CreateMomentQuickAction($channelID: ID!) {
  broadcasterCommunityMomentDetails(channelID: $channelID) {
    availableMoments
    cooldownExpiresAt
  }
}
query VideoPlayerClipsButtonBroadcaster($input: UserByAttribute!) {
  userByAttribute(input: $input) {
    id
    stream {
      id
      isEncrypted
    }
  }
}
query ChatPromptPreviewProfileImage($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    displayName
    profileImageURL(width: 28)
  }
}
query StreamChat($login: String!) {
  channel: user(login: $login) {
    id
    displayName
    roles {
      isPartner
      isAffiliate
    }
    self {
      banStatus {
        isPermanent
      }
      isChannelMember
      isModerator
      subscriptionBenefit {
        id
      }
    }
    stream {
      id
    }
  }
}
query LiveViewsTimeseriesStats_StreamSummary($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      granularity
      liveViews {
        value
        timestamp
      }
    }
  }
}
query ActivityListStreamStartTime($channelID: ID!) {
  user(id: $channelID) {
    id
    stream {
      id
      createdAt
    }
    streamSessions(first: 1) {
      startedAt
    }
  }
}
query SubsOnlyChatQuery($login: String!) {
  user(login: $login) {
    id
    subscriptionProducts {
      id
      hasSubOnlyChat
    }
  }
}
mutation UndoRecommendationFeedback($input: UndoRecommendationFeedbackInput!) {
  undoRecommendationFeedback(input: $input) {
    feedbackID
  }
}
query DashboardInsights_Channel($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    login
    displayName
    roles {
      isPartner
      isAffiliate
    }
    lastBroadcast {
      id
    }
  }
}
mutation CollectionsList_AddCollectionItem($input: AddCollectionItemInput!) {
  addCollectionItem(input: $input) {
    collection {
      id
    }
  }
}
query UserIdByLogin($channelLogin: String!) {
  user(login: $channelLogin) {
    id
  }
}
query GetYouTubeConnection($id: ID!) {
  user(id: $id) {
    id
    accountConnections {
      youtube {
        channelURL
      }
    }
  }
}
mutation TeamsDashboard_UpdateTeam($input: UpdateTeamInput!) {
  updateTeam(input: $input) {
    team {
      id
      name
      displayName
      description
      logoID
      logoURL
      bannerID
      bannerURL
      backgroundImageID
      backgroundImageURL
    }
  }
}
query LegacyViewsTileQuery($login: String!) {
  user(login: $login) {
    id
    profileViewCount
  }
}
query SyncedSettingsDeletedMessageDisplaySetting {
  currentUser {
    id
    chatUISettings {
      deletedMessageDisplaySetting
    }
  }
}
query queryUserViewedVideo {
  currentUser {
    id
    viewedVideos(first: 100) {
      edges {
        node {
          id
        }
        history {
          position
        }
      }
    }
  }
}
query UseGetChannelID($channelLogin: String!) {
  channel(name: $channelLogin) {
    id
  }
}
query ChannelAnalyticsChattersTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      uniqueChatters {
        value
        timestamp
      }
    }
  }
}
query GetPortraitClips($clipSlug: ID!, $limit: Int!) {
  portraitClipsByClipSlug(clipSlug: $clipSlug, limit: $limit) {
    ...portraitClipPayloadStatus
  }
}

fragment portraitClipPayloadStatus on PortraitClip {
  portraitClipID
  renderPayload {
    status
    temporaryPortraitClipURL
    temporaryThumbnailURL
    createdAt
  }
  youtubeExportPayload {
    status
    youtubeURL
  }
  tiktokExportPayload {
    status
    tiktokURL
  }
}
query ChatRestrictions($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    self {
      chatRestrictedReasons
      lastRecentChatMessageAt
      follower {
        followedAt
      }
      banStatus {
        isPermanent
      }
      isFirstTimeChatter
      subscriptionBenefit {
        id
      }
      isVIP
      isModerator
    }
    chatSettings {
      requireVerifiedAccount
    }
  }
  currentUser {
    id
    createdAt
    isEmailVerified
    isPhoneNumberVerified
  }
}
query RaidRecommendations($userID: ID!) {
  user(id: $userID) {
    id
    broadcastSettings {
      id
      game {
        id
        displayName
      }
    }
    stream {
      id
      viewersCount
    }
    raidRecommendations {
      user {
        id
        displayName
        login
        profileImageURL(width: 50)
        stream {
          id
          broadcastLanguage
          createdAt
          previewImageURL(height: 248, width: 440)
        }
        broadcastSettings {
          id
          title
          isMature
        }
      }
      defaultRank
      sourceRaidHistory {
        timesRaided
        lastRaidedAt
        peakRaiders
      }
      targetRaidHistory {
        timesRaided
        lastRaidedAt
        peakRaiders
      }
      viewers
      uptime
      isFollowed
      isRecommendedByTwitchRecs
      category {
        id
        name
        avatarURL(width: 144, height: 192)
      }
      tags
      extraDetails {
        isDropsEnabled
        isCharityStream
      }
    }
  }
}
query UnbanRequestsSettings($channelID: ID!) {
  channel(id: $channelID) {
    id
    unbanRequestsSettings {
      isEnabled
      cooldownMinutes
    }
  }
}
query SupportPanelTitleSectionAvatar($login: String!, $avatarSize: Int = 150) {
  user(login: $login) {
    id
    primaryColorHex
    profileImageURL(width: $avatarSize)
    stream {
      id
    }
  }
}
query Chat_EarnedBadges_InitialSubStatus($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    self {
      subscriptionBenefit {
        id
      }
    }
  }
}
mutation AssignUserToSlot($input: AssignUserToGuestStarSlotInput!) {
  assignUserToGuestStarSlot(input: $input) {
    error {
      code
    }
  }
}
mutation UpdateChannelPointsNameMutation($input: UpdateCommunityPointsChannelSettingsInput!) {
  updateCommunityPointsChannelSettings(input: $input) {
    error {
      code
    }
    channel {
      id
      communityPointsSettings {
        name
      }
    }
  }
}
query ActiveModsCtx($login: String!, $cursor: Cursor) {
  user(login: $login) {
    id
    login
    mods(first: 100, after: $cursor) {
      edges {
        isActive
        cursor
        node {
          id
          login
          displayName
          profileImageURL(width: 28)
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
fragment VideoPlayerOfflineRecommendationsOverlayVideo on Video {
  id
  title
  previewThumbnailURL(width: 320, height: 180)
  game {
    id
    name
  }
}
fragment clipsActionButtonsClip on Clip {
  id
  videoOffsetSeconds
  durationSeconds
  title
  isFeatured
  broadcaster {
    id
    login
  }
  video {
    id
    broadcastType
    title
  }
  game {
    id
    displayName
  }
}

query ClipsActionButtons($slug: ID!) {
  clip(slug: $slug) {
    ...clipsActionButtonsClip
    createdAt
    broadcast {
      id
    }
    isPublished
    viewCount
    curator {
      id
    }
    language
  }
}
query ProfileImageSetting {
  currentUser {
    id
    login
    displayName
    profileImageURL(width: 300)
  }
}
fragment watchPartyError on WatchPartyError {
  code
}
query AccessGetHomeClusterQuery($channelID: ID) {
  creatorHome(channelID: $channelID) {
    id
    clusters {
      id
    }
  }
}
mutation CreateDragAndDropLayout($input: CreateDashboardViewMosaicLayoutInput!, $isStreamManagerMosaicLayout: Boolean!, $isTwitchStudioMosaicLayout: Boolean!) {
  createDashboardViewMosaicLayout(input: $input) {
    errorCode
    layout {
      id
      name
      version
      lastUpdated
      ... on StreamManagerMosaicLayout @include(if: $isStreamManagerMosaicLayout) {
        data
      }
      ... on TwitchStudioMosaicLayout @include(if: $isTwitchStudioMosaicLayout) {
        data
      }
    }
  }
}
query OnDemandReferralsByDimension($startAt: Time!, $endAt: Time!, $granularity: Granularity!, $channel: String!, $contentType: OnDemandContentType!, $dimension: OnDemandDimension!, $first: Int!, $timeZone: String!) {
  creatorDashboard(startAt: $startAt, endAt: $endAt, period: DAY, channel: $channel) {
    onDemandReferrals(params: {contentType: $contentType, dimension: $dimension, first: $first, granularity: $granularity, timeZone: $timeZone}) {
      referrers {
        ...onDemandReferrals
      }
      total
    }
  }
}

fragment onDemandReferrals on OnDemandReferralsItem {
  referrals {
    total
    timestamp
  }
  name
  total
}
query AdIncentiveOffersNewPill($login: String) {
  user(login: $login) {
    id
    roles {
      isPartner
      isAffiliate
    }
    adProperties {
      availableOffers: incentiveOffers(status: AVAILABLE) {
        ...AdIncentiveOffersNewPill_SelectFields
      }
    }
  }
}

fragment AdIncentiveOffersNewPill_SelectFields on AdIncentiveOffer {
  id
  isViewed
  isTest
  campaignID
  setID
}
query VideoPlayer_MutedSegmentsAlertOverlay($vodID: ID, $includePrivate: Boolean = false) {
  video(id: $vodID, options: {includePrivate: $includePrivate}) {
    id
    muteInfo {
      mutedSegmentConnection {
        nodes {
          duration
          offset
        }
      }
    }
  }
}
query FollowedStreamsStartTimes($limit: Int) {
  currentUser {
    id
    follows(first: $limit) {
      edges {
        ...FollowedStreamNextScheduleSegmentEdge
      }
    }
  }
}

fragment FollowedStreamNextScheduleSegmentEdge on FollowEdge {
  node {
    channel {
      owner {
        id
        login
        stream {
          id
        }
        displayName
        profileImageURL(width: 150)
        primaryColorHex
      }
      status
      schedule {
        nextSegment {
          isCancelled
          endAt
          startAt
          title
          id
          categories {
            id
            displayName
          }
        }
        id
      }
      id
    }
    id
  }
  cursor
}
query GuestStarDropinRequests($hostID: ID!) {
  guestStarDropInRequests(hostID: $hostID) {
    ...dropinRequestFragment
  }
}

fragment dropinRequestFragment on GuestStarDropIn {
  user {
    ...dropinUserFragment
  }
  requestStatus
  expiresAt
}

fragment dropinUserFragment on User {
  id
  login
  displayName
  profileImageURL(width: 70)
}
fragment blockedTerm on ChannelBlockedTerm {
  id
  phrase
  expiresAt
  isModEditable
}
query DevOnlyLoadableParent {
  currentUser {
    id
    hasPrime
  }
}
query NewVsReturning_TimeSeries($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      uniqueViewers {
        timestamp
        value
      }
      uniqueEngaged {
        timestamp
        value
      }
      uniqueNewEngaged {
        timestamp
        value
      }
      uniqueReturningEngaged {
        timestamp
        value
      }
    }
  }
}
query DashboardDropCampaignDetails($dropID: ID!, $channelLogin: ID!) {
  user(id: $channelLogin) {
    id
    dropCampaign(id: $dropID) {
      id
      self {
        isAccountConnected
      }
      allow {
        channels {
          id
          displayName
          name
        }
        isEnabled
      }
      accountLinkURL
      description
      detailsURL
      endAt
      eventBasedDrops {
        id
        benefitEdges {
          benefit {
            id
            createdAt
            entitlementLimit
            game {
              id
              name
            }
            imageAssetURL
            isIosAvailable
            name
            ownerOrganization {
              id
              name
            }
          }
          entitlementLimit
        }
        claimDurationSeconds
        conditions {
          key
          operator
          value
        }
        endAt
        missionDescription
        missionName
        name
        startAt
      }
      game {
        id
        slug
        displayName
      }
      imageURL
      name
      owner {
        id
        name
      }
      startAt
      status
      timeBasedDrops {
        id
        benefitEdges {
          benefit {
            id
            createdAt
            entitlementLimit
            game {
              id
              name
            }
            imageAssetURL
            name
            ownerOrganization {
              id
              name
            }
          }
          entitlementLimit
        }
        endAt
        name
        preconditionDrops {
          id
        }
        requiredMinutesWatched
        startAt
      }
      version
    }
  }
}
query AccessIsChannelModeratorQuery($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    self {
      isModerator
    }
  }
}
fragment searchStreamerResult on User {
  id
  displayName
  login
  profileImageURL(width: 50)
  followers {
    totalCount
  }
}

query SubsLandingPage_SearchStreamers($userQuery: String!) {
  searchUsers(userQuery: $userQuery, hasSubscriptionProductsOnly: true) {
    edges {
      node {
        ...searchStreamerResult
      }
      cursor
    }
    pageInfo {
      hasNextPage
    }
  }
}
mutation BitsThresholdSettingsForm_SetMinBitsToPin($input: UpdateCheerPartnerSettingsInput!) {
  updateCheerPartnerSettings(input: $input) {
    cheer {
      id
      pinnedCheers {
        minBits
      }
    }
  }
}
mutation AdsSchedulerP55TermsModal_SetHasAcceptedP55Terms($input: SetAdManagerFirstTimeUserExperienceConfigInput!) {
  setAdManagerFirstTimeUserExperienceConfig(input: $input) {
    config {
      hasAcceptedP55Terms
    }
  }
}
query ModerationToolsRewardsQueueLink($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    channel {
      id
      communityPointsSettings {
        summarizedRewards {
          count
          isCountAtMaximum
        }
      }
    }
  }
}
query SearchDisplayname($query: String!) {
  searchUsers(userQuery: $query, first: 1) {
    edges {
      node {
        id
        displayName
        login
      }
    }
  }
}
query FollowGameButton_Game($slug: String!) {
  game(slug: $slug) {
    id
    name
    self {
      follow {
        followedAt
      }
    }
  }
  currentUser {
    id
  }
}
fragment communityPointsEmoteFragment on CommunityPointsEmote {
  id
  token
}
mutation PurchaseOrderContext_PurchaseOffer($input: PurchaseOfferInput!) {
  purchaseOffer(input: $input) {
    purchaseOrder {
      ...purchaseOrder
    }
    error
  }
}
mutation RemoveGuestFromSession($input: RemoveUserFromGuestStarSlotInput!) {
  removeUserFromGuestStarSlot(input: $input) {
    error {
      code
    }
  }
}
fragment streamTagsTrackingTags on Stream {
  freeformTags {
    ...freeformTagFragment
  }
}
mutation CreatePortraitClipMutation($input: CreatePortraitClipInput!) {
  createPortraitClip(input: $input) {
    portraitClipID
    error
  }
}
mutation EditProfile_SetUserDefaultProfileImage($input: SetUserDefaultProfileImageInput!) {
  setUserDefaultProfileImage(input: $input) {
    user {
      id
      a: profileImageURL(width: 70)
      b: profileImageURL(width: 300)
    }
  }
}
mutation TerminatePoll($input: TerminatePollInput!) {
  terminatePoll(input: $input) {
    poll {
      id
    }
  }
}
query DevExtensionListPage_CurrentUser($organizationID: ID, $after: Cursor) {
  extensionClients(organizationID: $organizationID, after: $after) {
    pageInfo {
      hasNextPage
    }
    edges {
      cursor
      node {
        id
        name
        createdAt
      }
    }
  }
}
query Sub_Analytics($channelID: ID!) {
  user(id: $channelID) {
    id
    self {
      subscriptionBenefit {
        id
      }
    }
  }
}
query DropsHighlightService_VerifyEligibility($dropInstanceID: ID!) {
  dropEligibility(dropInstanceID: $dropInstanceID) {
    dropInstanceID
    status
    claimSecondsRemaining
    dropType {
      id
      name
      campaign {
        id
        imageURL
        accountLinkURL
        detailsURL
      }
      benefitEdges {
        benefit {
          id
          imageAssetURL
          name
        }
      }
      ... on EventBasedDrop {
        missionName
        claimDurationSeconds
      }
    }
  }
}
query SpotlightMosaicUserMenuQuery {
  currentUser {
    id
    profileImageURL(width: 70)
    displayName
    login
  }
}
query ChannelAnalyticsAdTimePerHourTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      adTimePerHour {
        value
        timestamp
      }
    }
  }
}
fragment userConsent on UserConsent {
  productConsent {
    id
    version
    status
    consentType
    latestVersion
    url
  }
}
mutation TeamsDashboard_InviteUserToTeam($input: InviteUserToTeamInput!) {
  inviteUserToTeam(input: $input) {
    error {
      code
    }
    team {
      id
      invitedUsers {
        pageInfo {
          hasNextPage
        }
        edges {
          cursor
          node {
            id
            login
            displayName
            profileImageURL(width: 70)
          }
        }
      }
    }
  }
}
query CollectionSideBar($collectionID: ID!) {
  collection(id: $collectionID) {
    id
    title
    lengthSeconds
    owner {
      id
      displayName
      login
      profileURL
    }
    items(first: 100) {
      totalCount
      edges {
        node {
          __typename
          ... on Video {
            id
            title
            lengthSeconds
            previewThumbnailURL(width: 80, height: 45)
          }
        }
      }
    }
  }
}
query UploadVideoPlayerBanner_User($login: String!) {
  user(login: $login) {
    id
    offlineImageURL
  }
}
mutation chatCancelRaid($input: CancelRaidInput!) {
  cancelRaid(input: $input) {
    error {
      code
    }
    raid {
      id
    }
  }
}
query ExtensionMessageCard($extensionID: ID!, $extensionVersion: String) {
  extension(id: $extensionID, version: $extensionVersion) {
    id
    authorName
    clientID
    description
    iconURLs {
      square100
    }
    name
    version
  }
}
query PrerollFreeTileQuery($login: String!) {
  user(login: $login) {
    id
    prerollFreeTimeSeconds
    adProperties {
      disablePrerollsAbility {
        hasDisablePrerollsAbilityAccess
        hasDisablePrerollsAbilityEnabled
      }
    }
  }
}
query VideoManager_VideoDownload($videoID: ID) {
  video(id: $videoID, options: {includePrivate: true}) {
    id
    download {
      status
      url
    }
  }
}
query SupportPanelSingleGifting_UserInfo($login: String!) {
  user(login: $login) {
    id
    displayName
  }
}
mutation DevExtensionUploadAssets($input: CreateExtensionZipUploadInfoInput!) {
  createExtensionZipUploadInfo(input: $input) {
    response {
      url
      uploadID
    }
    error
  }
}
mutation SecurityPage_LogoutFromAll {
  logoutAllSessions {
    token
    error {
      code
      message
    }
  }
}
fragment userResidenceFragment on UserResidence {
  countryCode
  postalCode
}
query TeamsDashboard_AverageViewers($teamName: String!, $teamMembers: [ID!], $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timezone: String!) {
  team(name: $teamName) {
    id
    creatorTimeseriesMetrics(startAt: $startAt, endAt: $endAt, channelIDs: $teamMembers, granularity: $granularity, timeZone: $timezone) {
      metric: averageViewers {
        items {
          timestamp
          value
        }
        total
      }
    }
  }
}
query Dashboard_TopClips($login: String!, $limit: Int, $criteria: UserClipsInput) {
  user(login: $login) {
    id
    displayName
    clips(first: $limit, criteria: $criteria) {
      ...DashboardTopClipsConnectionFragment
    }
  }
}

fragment DashboardTopClipsConnectionFragment on ClipConnection {
  edges {
    node {
      id
      title
      viewCount
      url
      curator {
        id
        displayName
      }
      thumbnailURL(width: 86, height: 45)
      slug
      broadcaster {
        id
        login
      }
    }
  }
}
query EditBroadcastCategoryDropdownSearch($query: String!, $after: Cursor) {
  searchCategories(query: $query, first: 10, after: $after) {
    edges {
      cursor
      node {
        boxArtURL(width: 144, height: 192)
        displayName
        id
        name
        viewersCount
        followersCount
        isRestrictedForCurrentUserAndRegion
        isMature
      }
    }
  }
}
fragment pathToAffiliateQuest on PathToAffiliate {
  averageViewers {
    current
    goal
  }
  badgeURL
  completedAt
  isCompleted
  followers {
    current
    goal
  }
  hoursStreamed {
    current
    goal
  }
  uniqueDaysStreamed {
    current
    goal
  }
  affiliateInvitationStatus
}
query SettingsTabs_User {
  currentUser {
    id
    hasTurbo
    hasPrime
  }
  requestInfo {
    countryCode
  }
}
query ChatUser($login: String!) {
  user(login: $login, lookupType: ALL) {
    id
  }
}
query ClipsCards__Game($categorySlug: String!, $limit: Int, $cursor: Cursor, $criteria: GameClipsInput) {
  game(slug: $categorySlug) {
    id
    displayName
    clips(first: $limit, after: $cursor, criteria: $criteria) {
      pageInfo {
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          slug
          url
          embedURL
          title
          viewCount
          language
          curator {
            id
            login
            displayName
          }
          game {
            id
            name
            boxArtURL(width: 52, height: 72)
          }
          broadcaster {
            id
            login
            displayName
            profileImageURL(width: 50)
          }
          thumbnailURL
          createdAt
          isFeatured
          durationSeconds
          champBadge {
            id
          }
        }
      }
    }
  }
}
query Switcher_SwitcherHeader($slug: String!) {
  game(slug: $slug) {
    id
    slug
    name
    displayName
    avatarURL(width: 144, height: 192)
    description
  }
}
query ClipsRawMedia($slug: ID!) {
  clip(slug: $slug) {
    id
    rawMedia {
      defaultClipInitialOffset
      duration
      status
      videoURL
    }
  }
}
query TeamsLandingBody($teamName: String!) {
  team(name: $teamName) {
    __typename
    id
    backgroundImageURL
    bannerURL
    description
    displayName
    logoURL
    ...TeamsLandingBody_PlayerUser
  }
}

fragment TeamsLandingBody_PlayerUser on Team {
  liveMembers(first: 1) {
    __typename
    edges {
      __typename
      node {
        __typename
        id
        login
        stream {
          __typename
          id
        }
      }
    }
  }
  members(first: 1) {
    __typename
    edges {
      __typename
      node {
        __typename
        id
        login
      }
    }
  }
  owner {
    __typename
    id
    login
  }
}
fragment creatorHomeCardDecoratorsFragment on CreatorHomeCardDecorators {
  imageURL
  backgroundImageURL
  vod {
    id
    title
  }
  externalVideoURL
  icon {
    name
    colorTheme
  }
}
mutation UpdateEmail($input: UpdateUserInput!) {
  updateUser(input: $input) {
    error {
      code
    }
    user {
      id
      email
      isEmailVerified
      isEmailReusable
      isEmailUpdateable
      settings {
        isEmailRevertSuccess
      }
      verificationRequest {
        status
        modified
      }
    }
  }
}
query VideoChatVideoTrackingContext($videoID: ID) {
  video(id: $videoID) {
    id
    broadcastType
    title
    game {
      id
      name
    }
  }
}
fragment coreChannelWithHomePrefsFragment on User {
  ...coreUserFragment
  bannerImageURL
  channel {
    id
    self {
      isAuthorized
      restrictionType
    }
    trailer {
      video {
        id
        self {
          viewingHistory {
            updatedAt
          }
        }
      }
    }
    home {
      preferences {
        heroPreset
      }
    }
  }
}
mutation FeatureClips_UpdateClips($input: UpdateFeaturedClipsInput!) {
  updateFeaturedClips(input: $input) {
    results {
      slug
      error
      clip {
        id
        isFeatured
      }
    }
  }
}
query ActiveWatchParty($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    watchParty {
      session {
        ...watchPartySession
      }
    }
  }
}
query ExtensionsOverlay($channelLogin: String) {
  user(login: $channelLogin) {
    id
    stream {
      id
      game {
        id
        name
      }
    }
    self {
      banStatus {
        isPermanent
        expiresInMs
      }
    }
  }
}
mutation SetIsBrowserSourceAudioEnabled($input: SetGuestStarUserSettingsInput!) {
  setGuestStarUserSettings(input: $input) {
    error {
      code
    }
  }
}
query GetAlertFiltersQuery($channelID: ID!) {
  channel(id: $channelID) {
    id
    activityFeed {
      alertSettings {
        isDNDModeEnabled
        categories {
          id
          displayName
          isIgnored
        }
      }
    }
  }
}
query Core_Services_Spade_ChatEvent_User($id: ID!) {
  user(id: $id) {
    id
    isPartner
    stream {
      id
      game {
        id
        name
      }
    }
  }
}
fragment VideoAdBannerChannel on User {
  id
  login
  displayName
  profileImageURL(width: 28)
  roles {
    isPartner
    isAffiliate
  }
}
mutation CommunityMomentCallout_Claim($input: ClaimCommunityMomentInput!) {
  claimCommunityMoment(input: $input) {
    moment {
      id
    }
    error
  }
}
query GuestStarModList($login: String!, $cursor: Cursor) {
  user(login: $login) {
    id
    guestStarModerators(first: 100, after: $cursor) {
      edges {
        ...guestStarModEdgeFragment
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}

fragment guestStarModEdgeFragment on GuestStarModeratorEdge {
  cursor
  node {
    id
  }
}
mutation LiveNotificationsToggle_ToggleNotifications($input: FollowUserInput!) {
  followUser(input: $input) {
    follow {
      user {
        id
        self {
          follower {
            disableNotifications
          }
        }
      }
    }
  }
}
query ChannelAnalyticsUniqueViewersTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      uniqueViewers {
        value
        timestamp
      }
    }
  }
}
fragment channelGoalFragment on ChannelGoal {
  id
  contributionType
  state
  currentContributions
  targetContributions
  description
  createdAt
  customizations {
    progressBarAccentColor
    progressBarBackgroundColor
  }
}
query VideoPlayerStreamInfoOverlayChannel($channel: String) {
  user(login: $channel) {
    id
    profileURL
    displayName
    login
    profileImageURL(width: 150)
    broadcastSettings {
      id
      title
      game {
        id
        displayName
        name
      }
    }
    stream {
      id
      viewersCount
      tags {
        id
        localizedName
      }
    }
  }
}
query FollowedStreams($userID: ID!, $limit: Int!) {
  followedUpcomingStreams(userID: $userID, first: $limit) {
    edges {
      node {
        id
        title
        startAt
        categories {
          id
          slug
          displayName
        }
        hasReminder
        baseSegmentID
        repeatEndsAfterCount
        channel {
          id
          owner {
            id
            displayName
            login
            isPartner
            profileImageURL(width: 50)
            primaryColorHex
            bannerImageURL
            subscriptionProducts {
              id
              emotes {
                id
                order
                subscriptionTier
                token
                assetType
              }
            }
          }
        }
      }
    }
  }
}
query GetGuestStarSelfRole($sessionOptions: GuestStarSessionOptions!) {
  guestStarSession(options: $sessionOptions) {
    id
    self {
      role
    }
  }
}
fragment userRedemptionFragment on CommunityPointsCustomRewardUserRedemption {
  reward {
    id
  }
  userRedemptionsCurrentStream
}
query DevBountyBoardDashboard_UserCompanySettings($orgId: ID!) {
  organization(id: $orgId) {
    id
    brandPortalSettings {
      isEnabled
    }
  }
}
mutation SetResourceRestrictionMutation($input: SetResourceRestrictionInput!) {
  setResourceRestriction(input: $input) {
    stream {
      id
      restriction {
        id
        type
        options
      }
      restrictionType
    }
    channel {
      id
      restriction {
        id
        type
        options
      }
    }
    video {
      id
      resourceRestriction {
        id
        type
        options
      }
    }
  }
}
query ExtensionsNotificationBitsBalance {
  currentUser {
    id
    bitsBalance
  }
}
fragment hypeTrainParticipation on HypeTrainParticipation {
  source
  action
  quantity
  initiatorCurrency {
    currencyCode
    minorUnits
  }
}
fragment guestStarStreamTogetherUser on User {
  id
  login
  displayName
  profileImageURL(width: 70)
  stream {
    id
    game {
      id
      displayName
    }
  }
}
query TeamLandingMemberList($teamName: String!, $withLiveMembers: Boolean!, $liveMembersCursor: Cursor, $withMembers: Boolean!, $membersCursor: Cursor) {
  team(name: $teamName) {
    id
    liveMembers(first: 10, after: $liveMembersCursor) @include(if: $withLiveMembers) {
      edges {
        node {
          id
          displayName
          login
          profileImageURL(width: 50)
          stream {
            id
            viewersCount
            __typename
          }
          __typename
        }
        cursor
        __typename
      }
      pageInfo {
        hasNextPage
        __typename
      }
    }
    members(first: 10, after: $membersCursor) @include(if: $withMembers) {
      edges {
        node {
          id
          displayName
          login
          profileImageURL(width: 50)
          __typename
        }
        cursor
        __typename
      }
      pageInfo {
        hasNextPage
        __typename
      }
    }
    allMembers: members {
      totalCount
      __typename
    }
    __typename
  }
}
mutation EditBroadcastContext_LiveUpNotificationMutation($input: UpdateLiveUpNotificationInput!) {
  updateLiveUpNotification(input: $input) {
    error {
      code
    }
  }
}
mutation DeleteModActions($input: DeleteModerationActionsInput!) {
  deleteModerationActions(input: $input) {
    deletedActionIDs
  }
}
query DashboardCensus_GetQuestions {
  currentUser {
    id
    roles {
      isAffiliate
      isPartner
      isStaff
    }
  }
  censusQuestionnaire {
    countryCode
    ietfLanguageTag
    questions {
      schemaVersionID
      id
      text
      answerType
      ordinal
      answers {
        id
        text
        ordinal
      }
    }
  }
}
mutation StartGuestStarSession($input: StartGuestStarSessionInput!) {
  startGuestStarSession(input: $input) {
    error {
      code
    }
    session {
      id
      guests {
        id
        isSlotLive
        user {
          id
          displayName
        }
        audio {
          isHostEnabled
          isGuestEnabled
          isAvailable
        }
        video {
          isHostEnabled
          isGuestEnabled
          isAvailable
        }
      }
      self {
        guest {
          token
        }
      }
      invites {
        edges {
          cursor
          node {
            guest {
              id
              login
            }
            readyState
            audio {
              isEnabled
              isAvailable
            }
            video {
              isEnabled
              isAvailable
            }
          }
        }
      }
    }
  }
}
query AccessIsGlobalModQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    roles {
      isGlobalMod
    }
  }
}
query CopoGoalSnackbar_ActiveChallengesQuery($id: ID!, $includeGoalTypes: [CommunityPointsCommunityGoalType!]) {
  user(id: $id) {
    id
    channel {
      id
      communityPointsSettings {
        communityGoalSmallContribution
        communityGoalMaxContributionPerStream
        goals(includeGoalTypes: $includeGoalTypes) {
          id
          status
        }
      }
    }
  }
}
mutation SunlightBanEvasionDetectionSettingsUpdateSettings($channelID: ID!, $isEnabled: Boolean!, $possibleEvaderTreatment: LowTrustUserTreatmentType, $likelyEvaderTreatment: LowTrustUserTreatmentType) {
  updateBanEvasionDetectionSettings(input: {channelID: $channelID, isEnabled: $isEnabled, likelyEvaderTreatment: $likelyEvaderTreatment, possibleEvaderTreatment: $possibleEvaderTreatment}) {
    settings {
      isEnabled
      possibleTreatment
      likelyTreatment
    }
    error {
      code
    }
  }
}
mutation ChannelPropertiesSettingsPageMutation($input: UpdateVideoStreamSettingsInput!) {
  updateVideoStreamSettings(input: $input) {
    channel {
      id
      videoStreamSettings {
        isDisconnectSlateEnabled
        isLowLatency
        shouldArchiveVODs
      }
    }
  }
}
mutation RemoveAutoBannerTerm($input: DeleteAutoBanTermInput!) {
  deleteAutoBanTerm(input: $input) {
    id
  }
}
mutation BulkUnbanUsers($input: BatchUnbanUserInChannelInput!) {
  batchUnbanUserInChannel(input: $input) {
    removedBans {
      bannedUser {
        id
      }
    }
  }
}
fragment campaignInProgress on DropCampaign {
  id
  detailsURL
  accountLinkURL
  startAt
  endAt
  imageURL
  name
  status
  self {
    isAccountConnected
  }
  game {
    id
    name
    boxArtURL(width: 285, height: 380)
  }
  allow {
    channels {
      id
      name
      url
    }
  }
  eventBasedDrops {
    id
    name
    startAt
    endAt
    benefitEdges {
      benefit {
        id
        imageAssetURL
        name
      }
      entitlementLimit
    }
    campaign {
      id
      detailsURL
      self {
        isAccountConnected
      }
    }
  }
  timeBasedDrops {
    id
    name
    startAt
    endAt
    preconditionDrops {
      id
    }
    requiredMinutesWatched
    benefitEdges {
      benefit {
        id
        imageAssetURL
        name
      }
      entitlementLimit
      claimCount
    }
    self {
      hasPreconditionsMet
      currentMinutesWatched
      isClaimed
      dropInstanceID
    }
    campaign {
      id
      detailsURL
      accountLinkURL
      self {
        isAccountConnected
      }
    }
  }
}
query RecentlyVisitedLiveStatus($userIDs: [ID!]!) {
  users(ids: $userIDs) {
    id
    stream {
      id
    }
  }
}
query TeamsDashboard_AdTimePerHour($teamName: String!, $teamMembers: [ID!], $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timezone: String!) {
  team(name: $teamName) {
    id
    creatorTimeseriesMetrics(startAt: $startAt, endAt: $endAt, channelIDs: $teamMembers, granularity: $granularity, timeZone: $timezone) {
      metric: adTimePerHour {
        items {
          timestamp
          value
        }
        total
      }
    }
  }
}
fragment pathToPartnerQuest on PathToPartner {
  averageViewers {
    current
    goal
  }
  badgeURL
  completedAt
  isCompleted
  hoursStreamed {
    current
    goal
  }
  uniqueDaysStreamed {
    current
    goal
  }
}
query CommunityMomentDescription_MomentsBadge($channelID: ID!) {
  currentChannelViewer(channelID: $channelID) {
    id
    earnedBadges {
      id
      setID
      imageURL(size: QUADRUPLE)
    }
  }
}
fragment ContentMatchedExtensionInstallationFields on ExtensionInstallation {
  id
  activationConfig {
    anchor
    state
    slot
  }
  extension {
    id
    clientID
    name
    version
    bitsSupportLevel
    isBitsEnabled
    views {
      component {
        viewerURL
      }
      videoOverlay {
        viewerURL
      }
    }
  }
  permittedFeatures {
    canSendChat
    canUseBits
    canRetrieveSubscriptionStatus
    dynamicManagement {
      game {
        id
        displayName
      }
      isManaged
    }
  }
  requiredActions {
    type
  }
}
query ChannelAnalyticsCreatorMetrics($channelID: ID!, $startAt: Time!, $endAt: Time!, $numberOfIntervals: Int!) {
  user(id: $channelID) {
    id
    login
    creatorMetricsByInterval(startAt: $startAt, endAt: $endAt, numberOfIntervals: $numberOfIntervals) {
      items {
        ...creatorMetricsByInterval
      }
    }
  }
}

fragment creatorMetricsByInterval on CreatorMetricsByIntervalItem {
  adBreaksInSecondsString
  adSecondsPerHour
  averageViewers
  clipViewsString
  clipsCreatedString
  followsString
  hostRaidsPercentage
  liveViewsString
  maxViewersString
  minutesStreamedString
  minutesWatchedString
  timestamp
  totalChatMessagesString
  totalChattersString
  uniqueViewersString
  promotionClickString
  promotionDisplayString
  uniqueEngagedString
  uniqueNewEngagedString
  uniqueReturningEngagedString
}
mutation DenyBansSharingRequests($input: DenyBansSharingRequestsInput!) {
  denyBansSharingRequests(input: $input) {
    updatedRequests {
      id
      requestedUser {
        id
      }
      requestingUser {
        id
        displayName
        login
      }
    }
  }
}
query ChannelPage_ChannelInfoBar_User($login: String!) {
  user(login: $login) {
    id
    login
    description
    displayName
    profileImageURL(width: 70)
    broadcastSettings {
      id
      title
    }
    followers {
      totalCount
    }
    primaryTeam {
      id
      displayName
      name
    }
    profileViewCount
    stream {
      id
      viewersCount
      game {
        id
        slug
        name
        displayName
        boxArtURL(width: 40, height: 55)
      }
    }
  }
}
query FollowsTimeseriesStats_StreamSummary($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      granularity
      follows {
        value
        timestamp
      }
    }
  }
}
query CommonHooks_BlockedUsers {
  currentUser {
    id
    blockedUsers {
      id
      login
    }
  }
}
mutation AddGuestStarMod($input: AddGuestStarModeratorInput!) {
  addGuestStarModerator(input: $input) {
    error {
      code
    }
  }
}
query RequestToJoinViewerRequirementsQuery($channelID: ID!) {
  user(id: $channelID) {
    id
    self {
      follower {
        followedAt
      }
      subscriptionBenefit {
        id
      }
      subscriptionTenure(tenureMethod: CUMULATIVE) {
        months
      }
    }
  }
}
mutation InterruptSchedule($input: InterruptScheduleInput!) {
  interruptSchedule(input: $input) {
    error {
      code
      ... on InterruptScheduleBoundsError {
        minimum
        maximum
      }
    }
    schedule {
      id
      interruption {
        endAt
        reason
        startAt
      }
    }
  }
}
query ChannelAnalyticsPromotionClickTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      promotionClick {
        value
        timestamp
      }
    }
  }
}
query SubsidizedSubscriptions($channelID: ID, $progressType: SponsorshipUserProgressType!, $shouldFetchUserProgress: Boolean!) {
  channel(id: $channelID) {
    id
    sponsorships {
      subsidizedSubscriptions {
        ...SubsidizedSubscriptionsTracking
        self {
          id
          progress(type: $progressType) @include(if: $shouldFetchUserProgress) {
            amount
          }
        }
        adsAudiencePolicy {
          ...SubsidizedSubscriptionsAdsAudiencePolicy
        }
        advertiser {
          ...SubsidizedSubscriptionsAdvertiser
        }
        progress {
          ...SubsidizedSubscriptionsProgress
        }
      }
    }
  }
  user(id: $channelID) {
    id
    displayName
    profileImageURL(width: 70)
    login
    self {
      subscriptionBenefit {
        id
        product {
          id
          hasAdFree
        }
      }
    }
  }
  currentUser {
    id
    hasTurbo
  }
}

fragment SubsidizedSubscriptionsAdsAudiencePolicy on AdsAudiencePolicy {
  shouldShowToTurbo
  shouldShowToChannelSubscriber
}

fragment SubsidizedSubscriptionsAdvertiser on SubsidizedSubscriptionsAdvertiser {
  name
  ctaMessage
  ctaURL
  imageAsset {
    lightModeURL
    darkModeURL
  }
  iconBackgroundColorHexCode
}

fragment SubsidizedSubscriptionsTracking on SubsidizedSubscriptions {
  activation {
    id
    startsAt
    endsAt
  }
  activationProgression
  campaign
  campaignInstance {
    id
  }
  progress {
    current
    target
  }
  userProgressLimits {
    type
    value
  }
}

fragment SubsidizedSubscriptionsProgress on ActivationTrackingProgress {
  current
  target
}
fragment hypeTrainBoostConfig on BoostTrainConfig {
  twitchImpressions {
    difficulty
    impressions
  }
}
query Chat_UserData {
  user {
    id
    displayName
    login
    roles {
      isGlobalMod
      isSiteAdmin
      isStaff
    }
  }
}
query WhisperThread($id: ID!) {
  whisperThread(id: $id) {
    id
    userLastMessageRead {
      id
      sentAt
      __typename
    }
    unreadMessagesCount
    messages(first: 20) {
      edges {
        cursor
        node {
          id
          nonce
          content {
            content
            emotes {
              id
              emoteID
              setID
              from
              to
              __typename
            }
            __typename
          }
          from {
            id
          }
          sentAt
          editedAt
          deletedAt
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}
mutation ArchivePoll($input: ArchivePollInput!) {
  archivePoll(input: $input) {
    poll {
      id
    }
  }
}
query SquadStreamChannelSwitcher_GetUser($login: String!) {
  user(login: $login) {
    id
    login
    displayName
    description
    profileImageURL(width: 150)
    bannerImageURL
  }
}
mutation VideoManagerActions_DeleteVideoThumbnail($input: DeleteVideoThumbnailInput!) {
  deleteVideoThumbnail(input: $input) {
    video {
      id
      thumbnailURLs
      previewThumbnailURL
    }
  }
}
query ChannelActiveCharityCampaign($channelID: ID!) {
  channel(id: $channelID) {
    id
    activeCharityCampaign {
      id
      charities {
        id
        logoURL
        name
      }
      isArchived
    }
  }
}
fragment inventoryUserDropReward on UserDropReward {
  game {
    id
    name
  }
  id
  imageURL
  isConnected
  lastAwardedAt
  name
  requiredAccountLink
  totalCount
}
query ClipsEditClipInfo($slug: ID!) {
  clip(slug: $slug) {
    id
    broadcaster {
      id
      displayName
      login
    }
    curator {
      id
      login
    }
    durationSeconds
    game {
      id
      displayName
    }
    isPublished
    isFeatured
    createdAt
    video {
      id
      broadcastType
      title
    }
    videoOffsetSeconds
  }
}
query StreamSummaryPage_GetStreamSummaryMetrics($channelID: ID!, $lastStartedAt: Time) {
  user(id: $channelID) {
    id
    streamSummaries(first: 2, lastStartedAt: $lastStartedAt) {
      startedAt
      endedAt
      averageViewers
      clipsCreated
      follows
      liveViews
      maxViewers
      newSubscriptions
      uniqueChatters
      uniqueViewers
      archiveVideos {
        title
        viewCount
        previewThumbnailURL(height: 360, width: 640)
        id
        recordedAt
        lengthSeconds
        owner {
          id
        }
      }
      goLiveNotification {
        customText
        engagements
        followerCount
        followersNotified
        streamStartTime
      }
      viewerFeedback {
        total
        aggregatedFeedback {
          type
          total
        }
      }
    }
  }
}
query AccessIsAdsPreRollEnabledQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    prerollFreeTimeSeconds
    adProperties {
      disablePrerollsAbility {
        hasDisablePrerollsAbilityAccess
        hasDisablePrerollsAbilityEnabled
      }
    }
  }
}
mutation Whispers_MarkThreadMessageRead($input: UpdateWhisperThreadInput!) {
  updateWhisperThread(input: $input) {
    thread {
      id
      unreadMessagesCount
    }
  }
}
query ChannelSocialButtons($channelID: ID!) {
  channel(id: $channelID) {
    id
    localEmoteSets {
      id
      emotes {
        id
        token
        type
      }
      productType
    }
  }
}
mutation SnoozeAd($input: SnoozeAdInput!) {
  snoozeAd(input: $input) {
    status
  }
}
fragment statsCardFragment on StatCreatorHomeCard {
  currentValue
  targetValue
}
query CancelReasonsQuery($channel: String!, $startAt: Time!, $endAt: Time!, $period: TimeSeriesPeriod!) {
  creatorDashboard(channel: $channel, startAt: $startAt, endAt: $endAt, period: $period) {
    channelAnalytics {
      doNotRenewReasonAggregations {
        reason
        count
      }
    }
  }
}
mutation CancelGift($input: CancelSubscriptionGiftInput!) {
  cancelSubscriptionGift(input: $input) {
    gift {
      isGift
    }
  }
}
mutation EnableSponsoredActivity($input: EnableSponsoredActivityInput!) {
  enableSponsoredActivity(input: $input) {
    campaignInstance {
      id
      activities {
        state
      }
    }
    errorCode
  }
}
query EditableChannelsPage($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    login
    editableChannels {
      edges {
        cursor
        node {
          id
          displayName
          login
          profileImageURL(width: 50)
        }
      }
    }
  }
}
mutation ChatInput_SendCheer($input: SendCheerInput!) {
  sendCheer(input: $input) {
    id
    currentUser {
      id
      bitsBalance
    }
    validationError {
      code
      message
      messageContent {
        text
        fragments {
          text
          content {
            ... on AutoMod {
              topics {
                type
                weight
              }
            }
            ... on CheermoteToken {
              bitsAmount
              prefix
              tier
            }
            ... on Emote {
              emoteID: id
              setID
              token
            }
            ... on User {
              id
              login
              displayName
            }
          }
        }
      }
    }
  }
}
mutation SetSquadStreamPrimaryPlayer($input: SetSquadStreamPrimaryPlayerInput!) {
  setSquadStreamPrimaryPlayer(input: $input) {
    primaryPlayer {
      id
    }
  }
}
query ChannelAnalyticsFollowsTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      follows {
        value
        timestamp
      }
    }
  }
}
fragment pendingSubscription on PendingSubscription {
  price
  startsAt
  tier
  type
}
query GetActiveRocketBoostOpportunity($channelID: ID!) {
  user(id: $channelID) {
    id
    channel {
      id
      activeRocketBoostOpportunity {
        id
        startedAt
        expiresAt
        remainingSeconds
        boostUnitsContributed
        impressionsContributed
      }
    }
  }
}
query Prime_PrimeOfferList_PrimeOffers_Eligibility($dateOverride: Time, $countryCode: String) {
  primeOffersWithEligibility(dateOverride: $dateOverride, countryCode: $countryCode) {
    id
    catalogOfferID
    title
    gameTitle
    imageURL
    claimInstructions
    description
    deliveryMethod
    endTime
    priority
    tags
    content {
      externalURL
      publisher
      categories
    }
    offerEligibility {
      canClaim
      isClaimed
      offerState
      status
    }
  }
}
query DevOnlyEngineTest3($first: Int) {
  games(first: $first) {
    edges {
      node {
        id
        name
      }
    }
  }
}
mutation UpdateCopyrightAudioDetectionOptOutStatus($input: UpdateChannelVODSettingsInput!) {
  updateChannelVODSettings(input: $input) {
    channel {
      id
      vodSettings {
        publishSettings {
          isDisableOptOut
        }
      }
    }
  }
}
mutation SetFollowersOnlyModeSetting($input: UpdateChatSettingsInput!) {
  updateChatSettings(input: $input) {
    chatSettings {
      followersOnlyDurationMinutes
    }
  }
}
query ExtensionsInfoBalloon($extensionID: ID!, $extensionVersion: String) {
  extension(id: $extensionID, version: $extensionVersion) {
    id
    screenshotURLs
  }
}
query SyncedSettingsChatPauseSetting {
  currentUser {
    id
    chatUISettings {
      chatPauseSetting
    }
  }
}
query ModerationMenu_CurrentUser {
  currentUser {
    id
    isSiteAdmin
    isStaff
  }
}
mutation grantCommunityRole($input: GrantCommunityRoleInput!) {
  grantCommunityRole(input: $input) {
    channel {
      id
      displayName
    }
    grantee {
      id
      displayName
    }
    error {
      code
    }
    role
  }
}
mutation revokeCommunityRole($input: RevokeCommunityRoleInput!) {
  revokeCommunityRole(input: $input) {
    channel {
      id
      displayName
    }
    revokee {
      id
      displayName
    }
    error {
      code
    }
    role
  }
}
mutation respondToTeamInvitation($input: RespondToTeamInvitationInput!) {
  respondToTeamInvitation(input: $input) {
    user {
      id
      teamMemberships {
        isPrimary
        isRevenueRevealed
        isStatsRevealed
        team {
          id
          name
          displayName
          logoURL
        }
      }
      invitedTeams {
        id
        name
        displayName
        logoURL
      }
    }
  }
}
mutation ShareMilestone($input: ShareViewerMilestoneInput!) {
  shareViewerMilestone(input: $input) {
    error {
      code
    }
  }
}
mutation DevDeleteExtension($input: DeleteExtensionInput!) {
  deleteExtension(input: $input) {
    error
  }
}
query SelfModStatus($channelID: ID!) {
  user(id: $channelID) {
    id
    self {
      isModerator
    }
  }
}
mutation DropsPrivateCallout_Claim($dropInstanceID: ID!) {
  claimDropRewards(input: {dropInstanceID: $dropInstanceID}) {
    dropInstanceID
    isUserAccountConnected
    rewards {
      id
      accountLinkURL
      name
    }
  }
}
mutation visitStreamManager($input: VisitStreamManagerInput!) {
  visitStreamManager(input: $input) {
    isSuccess
  }
}
query UseViewCount($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    stream {
      id
      viewersCount
    }
  }
}
mutation UpdateCreatorHomeActionDataMutation($input: UpdateUserInput!) {
  updateUser(input: $input) {
    error {
      code
    }
    user {
      id
      description
    }
  }
}
query ChattersTimeseriesStats_StreamSummary($channelID: ID!, $startAt: Time!, $endAt: Time!, $timeZone: String!, $granularity: Granularity) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, timeZone: $timeZone, granularity: $granularity) {
      granularity
      uniqueChatters {
        value
        timestamp
      }
    }
  }
}
query GetPinnedChat($channelID: ID!, $count: Int!, $after: Cursor) {
  channel(id: $channelID) {
    id
    pinnedChatMessages(first: $count, after: $after, messageType: MOD) {
      edges {
        node {
          id
          type
          pinnedMessage {
            id
            content {
              text
              fragments {
                content {
                  ... on User {
                    userID: id
                    login
                  }
                  ... on Emote {
                    emoteID: id
                  }
                  ... on CheermoteToken {
                    bitsAmount
                    prefix
                    tier
                  }
                  __typename
                }
                text
              }
            }
            parentMessage {
              id
              content {
                text
              }
              sentAt
              sender {
                id
                displayName
              }
            }
            threadParentMessage {
              id
              content {
                text
              }
              sender {
                id
                displayName
              }
            }
            sentAt
            sender {
              id
              chatColor
              displayName
              displayBadges(channelID: $channelID) {
                id
                setID
                version
              }
            }
          }
          startsAt
          updatedAt
          endsAt
          pinnedBy {
            id
            displayName
          }
        }
        cursor
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
query CanAccess_SquadStreamWidget($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    squadStreamSettings {
      canAccessSquads
    }
  }
}
query BanEvasionDetectionSettings($channelID: ID!) {
  channel(id: $channelID) {
    id
    moderationSettings {
      banEvasionDetection {
        ... on BanEvasionDetectionSettings {
          isEnabled
          possibleTreatment
          likelyTreatment
        }
        ... on BanEvasionDetectionSettingsError {
          code
        }
      }
    }
  }
}
query ChannelAnalyticsChatMessagesTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      chatMessages {
        value
        timestamp
      }
    }
  }
}
query ViewersTileQuery($login: String!) {
  user(login: $login) {
    id
    stream {
      id
      viewersCount
    }
  }
}
query RedemptionsByRewardID_Paginated($channelLogin: String!, $id: ID, $cursor: Cursor, $order: CommunityPointsCustomRewardRedemptionQueueSortOrder, $count: Int) {
  user(login: $channelLogin) {
    id
    channel {
      id
      communityPointsRedemptionQueue(options: {order: $order, rewardID: $id, status: UNFULFILLED}, first: $count, after: $cursor) {
        edges {
          cursor
          node {
            id
            reward {
              id
              title
            }
            user {
              id
            }
            input
            timestamp
          }
        }
        pageInfo {
          hasNextPage
        }
      }
    }
  }
}
query DiscoveryWatchParty($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    watchParty {
      session {
        id
        state
        title
        viewersCount
        contentRestriction
        progress {
          ...watchPartyProgress
        }
      }
    }
  }
}
query Consent($id: ID!, $includeNewCookieConsentFields: Boolean!, $includeTCData: Boolean!) {
  consent(consentSessionID: $id) {
    id
    isDeniedUnderage
    privacyLawName
    shouldShowNotification
    shouldShowSettingsPage
    shouldShowDismissButton
    vendorStatus {
      name
      consentStatus
      hasUserSetConsent
      isVisible
    }
    vendorConsentStatus @include(if: $includeNewCookieConsentFields) {
      ...vendorConsentStatuses
    }
    gdprUserPreferences @include(if: $includeTCData) {
      ...gdprUserPreferences
    }
    dmaUserPreferences @include(if: $includeTCData) {
      ...dmaUserPreferences
    }
  }
}
query SquadStream_GetSquad($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    squadStream {
      id
      members {
        id
        login
        subscriptionProducts {
          id
          name
        }
      }
      status
    }
  }
  currentUser {
    id
  }
}
query FollowedIndex_CurrentUser {
  currentUser {
    id
  }
}
query TitleMentions($logins: [String!]!) {
  users(logins: $logins) {
    id
    login
    displayName
    description
    primaryColorHex
    profileImageURL(width: 70)
  }
  currentUser {
    id
    login
    roles {
      isSiteAdmin
      isStaff
      isGlobalMod
    }
    blockedUsers {
      id
    }
  }
}
mutation EditProfile_CreateChannelOfflineImageUploadURL($input: CreateChannelOfflineImageUploadURLInput!) {
  createChannelOfflineImageUploadURL(input: $input) {
    uploadID
    uploadURL
    error {
      code
    }
  }
}
mutation SubsSettingsSection_UpdateAdsProperties($input: UpdateAdPropertiesInput!) {
  updateAdProperties(input: $input) {
    targetUser {
      id
    }
  }
}
query ClipsBroadcasterInfo($slug: ID!) {
  clip(slug: $slug) {
    id
    game {
      id
      name
      displayName
    }
    broadcaster {
      id
      profileImageURL(width: 28)
      displayName
      login
      stream {
        id
      }
    }
  }
}
mutation StartGuestStarScreenshare($input: StartGuestStarScreenshareInput!) {
  startGuestStarScreenshare(input: $input) {
    slot {
      id
      isSlotLive
      participantID
      audio {
        isAvailable
        isHostEnabled
        isGuestEnabled
      }
      video {
        isAvailable
        isHostEnabled
        isGuestEnabled
      }
      user {
        id
      }
    }
    error {
      code
    }
  }
}
query SubsProductDescription($productName: String!, $giftRecipientID: ID, $includeGiftRecipientQuery: Boolean!, $params: PurchasableOfferParams!) {
  subscriptionProduct(productName: $productName) {
    id
    tier
    owner {
      id
      login
      displayName
      profileImageURL(width: 150)
    }
  }
  giftRecipient: user(id: $giftRecipientID) @include(if: $includeGiftRecipientQuery) {
    id
    displayName
  }
  purchasableOffer(params: $params) {
    id
    giftType
    eligibility {
      benefitsStartAt
      purchaseType
    }
    listing {
      chargeModel {
        internal {
          plan {
            renewalPolicy
          }
        }
      }
    }
  }
}
fragment purchaseOrder on PurchaseOrder {
  id
  actionTokenID
  failureReason
  state
}
query OfflineBannerOverlay($login: String!) {
  user(login: $login) {
    id
    offlineImageURL
  }
}
fragment lastViewedContentByTypeFragment on CommunityPointsLastViewedContentByType {
  contentType
  lastViewedAt
}

fragment lastViewedContentByTypeAndIDFragment on CommunityPointsLastViewedContentByTypeAndID {
  contentID
  contentType
  lastViewedAt
}
fragment recommendedClip on Clip {
  id
  title
  thumbnailURL
  slug
  broadcaster {
    id
    displayName
    login
    primaryColorHex
  }
  game {
    id
    displayName
    name
  }
  viewCount
}

query ClipsRecommendations($slug: ID!) {
  clip(slug: $slug) {
    id
    slug
    game {
      id
      name
      displayName
    }
    broadcaster {
      id
      login
      displayName
    }
    video {
      id
    }
    relatedClips {
      broadcaster {
        ...recommendedClip
      }
      game {
        ...recommendedClip
      }
      top {
        ...recommendedClip
      }
    }
  }
}
query DropV2OrganizationGames($orgId: ID!) {
  organization(id: $orgId) {
    id
    games {
      id
      name
      displayName
      boxArtURLSmall: boxArtURL(height: 40, width: 29)
      boxArtURL(height: 54, width: 41)
      dropAccountLink {
        clientID
        updatedAt
      }
    }
  }
}
mutation DevDeleteExtensionSecrets($input: DeleteExtensionSecretsInput!) {
  deleteExtensionSecrets(input: $input) {
    error
  }
}
query ChannelPointsSettingsDisplay($login: String) {
  user(login: $login) {
    id
    channel {
      id
      communityPointsSettings {
        name
        image {
          url
          url2x
          url4x
        }
      }
    }
  }
}
fragment creatorHomeCardActionFragment on CreatorHomeCardAction {
  event {
    ... on CreatorHomeCardUrlEvent {
      url
    }
    ... on CreatorHomeCardModalEvent {
      modalName
    }
    ... on CreatorHomeCardPageNavigateEvent {
      pageType
      subpath
      channel {
        id
        name
      }
    }
    ... on CreatorHomeCardDismissEvent {
      shouldDismiss
    }
    ... on CreatorHomeCardSubmitEvent {
      identifier
      value {
        ... on CreatorHomeCardStringSubmitValue {
          stringValue: value
        }
        ... on CreatorHomeCardFieldSubmitValue {
          fieldValue: value
        }
      }
    }
  }
  trigger {
    ... on CreatorHomeCardFieldClickTrigger {
      fieldType
    }
    ... on CreatorHomeCardFieldCTATrigger {
      fieldType
      ctaKey
    }
    ... on CreatorHomeCardDecoratorClickTrigger {
      decoratorTriggerType
    }
  }
}
fragment autoModContentFragment on AutoModContent {
  id
  canPass
  willFailClassification
  hasBlockedTerms
  text
  failureReasons {
    ...autoModFailureReasonFragment
  }
  error {
    code
  }
}

fragment autoModFailureReasonFragment on AutoModFailureReason {
  normalizedText
  startPosition
  endPosition
  topics {
    ableismLevel
    aggressionLevel
    nameCallingLevel
    sexualityLevel
    homophobiaLevel
    misogynyLevel
    profanityLevel
    nWordLevel
    racismLevel
    whiteNationalistLevel
  }
}
fragment sponsorshipContract on SponsorshipTerms {
  body
  id
  name
  signedAt
}

query SponsorshipTermsContract($query: SponsorshipTermsQuery) {
  sponsorshipTerms(query: $query) {
    ...sponsorshipContract
  }
}
query MomentDetailCallouts_MomentsBadge($channelID: ID!) {
  currentChannelViewer(channelID: $channelID) {
    id
    earnedBadges {
      id
      setID
      imageURL(size: QUADRUPLE)
    }
  }
}
query AccessGetUserQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
  }
}
query Whispers_Thread_User_Activity($targetUserID: ID) {
  user(id: $targetUserID) {
    id
    chatColor
    displayName
    profileImageURL(width: 70)
    login
    displayBadges {
      id
      title
      imageURL
    }
  }
}
query RedemptionQueueFooter($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    channel {
      id
      communityPointsSettings {
        summarizedRewards {
          count
          isCountAtMaximum
          node {
            id
          }
        }
      }
    }
  }
}
mutation TeamsDashboard_RemoveTeamMember($input: RemoveUserFromTeamInput!) {
  removeUserFromTeam(input: $input) {
    team {
      id
      members {
        pageInfo {
          hasNextPage
        }
        edges {
          cursor
          node {
            id
            login
            displayName
            profileImageURL(width: 70)
          }
        }
      }
    }
  }
}
query ShareVideo_Content($videoID: ID!, $collectionID: ID!, $hasVideo: Boolean!, $hasCollection: Boolean!) {
  video(id: $videoID) @include(if: $hasVideo) {
    ...shareVideoContent
  }
  collection(id: $collectionID) @include(if: $hasCollection) {
    ...shareCollectionContent
  }
}

fragment shareVideoContent on Video {
  id
  owner {
    id
    displayName
  }
  title
}

fragment shareCollectionContent on Collection {
  id
  owner {
    id
    displayName
  }
  title
}
query StatsWidget($login: String!, $isLive: Boolean!) {
  user(login: $login) {
    id
    stream @include(if: $isLive) {
      id
      clipCount
      viewersCount
      createdAt
    }
    profileViewCount
    followers {
      totalCount
    }
    subscriberScore {
      countBreakdown {
        count
      }
      current
      next
    }
  }
}
query GetHostQueueInfo($channelID: ID!) {
  requestToJoinHostQueueInfo(channelID: $channelID) {
    id
    size
    status
    maximumSize
    isSubsEnabled
    isAudioOnlyEnabled
    isfollowersEnabled
    minFollowingLength
    minSubscriptionLength
  }
}
mutation PinChatMessage($input: PinChatMessageInput!) {
  pinChatMessage(input: $input) {
    pinnedChatMessage {
      id
      pinnedMessage {
        id
      }
    }
    error {
      code
    }
  }
}
query DashboardDMCAHint($id: ID!) {
  user(id: $id) {
    id
    dmcaViolationCount
  }
}
mutation DeleteDragAndDropLayout($input: DeleteDashboardViewInput!) {
  deleteDashboardView(input: $input) {
    errorCode
  }
}
query FollowerCount($channelID: ID!) {
  user(id: $channelID) {
    id
    followers {
      totalCount
    }
  }
}
mutation ExtensionCategoryPage_InstallExtension($input: InstallExtensionInput!) {
  installExtension(input: $input) {
    installedExtension {
      id
      extension {
        id
        clientID
        version
      }
    }
  }
}
fragment followCueSettings on FollowCueSettings {
  id
  defaultThreshold
  isEnabled
  sensitivity
}
query ViewerCardModLogsAccessQuery($channelID: ID!) {
  channel(id: $channelID) {
    id
    moderationSettings {
      canAccessViewerCardModLogs
    }
  }
}
query StreamerShelfSettings($channelLogin: String!) {
  currentUser {
    id
  }
  user(login: $channelLogin) {
    id
    channel {
      id
      home {
        preferences {
          streamerShelfType
        }
      }
    }
  }
}
query TutorialStatus {
  currentUser {
    id
    modViewSettings {
      tutorialSeenAt
      tutorialState
    }
  }
}
mutation WhisperThread_ReportUser($input: ReportContentInput!) {
  reportContent(input: $input) {
    contentID
  }
}
mutation BitsThresholdSettingsForm_SetMinBitsPerEmote($input: UpdateCheerPartnerSettingsInput!) {
  updateCheerPartnerSettings(input: $input) {
    cheer {
      id
      chatMessage {
        minBitsPerEmote
      }
    }
  }
}
query DeveloperBadgeDescription($userID: ID) {
  user(id: $userID) {
    id
    publicOrganizations {
      id
      name
      url
    }
  }
}
mutation acceptSponsorshipCampaignInvitation($input: AcceptSponsorshipCampaignInvitationInput!) {
  acceptSponsorshipCampaignInvitation(input: $input) {
    error {
      code
    }
  }
}
query InviteOnlyExtensionPage($skipCurrentUser: Boolean!, $afterCursor: Cursor) {
  currentUser @skip(if: $skipCurrentUser) {
    id
    cheer {
      id
    }
    login
    installedExtensions {
      id
      extension {
        id
      }
    }
  }
  extensionCategory(id: "whitelisted") {
    id
    extensions(first: 21, after: $afterCursor) {
      edges {
        ...InviteOnlyExtensionPage_ExtensionEdge
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}

fragment InviteOnlyExtensionPage_ExtensionEdge on ExtensionEdge {
  cursor
  node {
    id
    authorName
    clientID
    iconURLs {
      discoverySplash
      square100
    }
    isBitsEnabled
    bitsSupportLevel
    name
    self {
      canInstall
    }
    sku
    state
    summary
    vendorCode
    version
    views {
      component {
        viewerURL
      }
      hidden {
        viewerURL
      }
      mobile {
        viewerURL
      }
      panel {
        viewerURL
      }
      videoOverlay {
        viewerURL
      }
    }
  }
}
mutation UpdateChatHighlightSettings($input: UpdateChatHighlightSettingsInput!) {
  updateChatHighlightSettings(input: $input) {
    chatHighlightSettings {
      firstTimeChatters {
        displaySetting {
          chatHighlightDisplayMode
          isEnabled
          durationMinutes
        }
        releaseDate
      }
      mentions {
        displaySetting {
          chatHighlightDisplayMode
          isEnabled
          durationMinutes
        }
        releaseDate
      }
      mods {
        displaySetting {
          chatHighlightDisplayMode
          isEnabled
          durationMinutes
        }
        releaseDate
      }
      raiders {
        displaySetting {
          chatHighlightDisplayMode
          isEnabled
          durationMinutes
        }
        releaseDate
      }
      returningChatters {
        displaySetting {
          chatHighlightDisplayMode
          isEnabled
          durationMinutes
        }
        releaseDate
      }
      subscribers {
        displaySetting {
          chatHighlightDisplayMode
          isEnabled
          durationMinutes
        }
        releaseDate
      }
      suspiciousUsers {
        displaySetting {
          chatHighlightDisplayMode
          isEnabled
          durationMinutes
        }
        releaseDate
      }
      vips {
        displaySetting {
          chatHighlightDisplayMode
          isEnabled
          durationMinutes
        }
        releaseDate
      }
      shouldHideIcon
      lastSeen
    }
  }
}
fragment homeTrackGameFragment on Game {
  id
  name
}

fragment homeTrackBroadcastFragment on BroadcastSettings {
  id
  language
}

query HomeTrackQuery($channelLogin: String) {
  user(login: $channelLogin) {
    id
    lastBroadcast {
      id
      game {
        ...homeTrackGameFragment
      }
    }
    broadcastSettings {
      ...homeTrackBroadcastFragment
    }
    self {
      follower {
        node {
          id
        }
      }
    }
    stream {
      id
    }
  }
}
mutation exportPortraitClipToYouTube($input: ExportPortraitClipYouTubeInput!) {
  exportPortraitClipYouTube(input: $input) {
    error
  }
}
fragment FlaggedTrack on FlaggedTrack {
  appeal {
    id
    reason
    status
  }
  id
  muteDurationSeconds
  performer
  title
}

query VideoManagerActions_FetchMutedTracks($vodID: ID, $includePrivate: Boolean = true) {
  video(id: $vodID, options: {includePrivate: $includePrivate}) {
    id
    muteInfo {
      tracks {
        ...FlaggedTrack
      }
    }
  }
}
query SupportPanelSubTokenBalance {
  currentUser {
    id
    subscriptionToken {
      balance
    }
  }
}
query WatchPartyWidgetGate($channelLogin: String) {
  user(login: $channelLogin) {
    id
    roles {
      isPartner
      isAffiliate
    }
    settings {
      canHostWatchParties
    }
    watchPartiesRestrictions
  }
}
query BitsLandingPage {
  currentUser {
    id
    bitsBalance
  }
}
mutation UnblockUser($input: UnblockUserInput!) {
  unblockUser(input: $input) {
    targetUser {
      id
    }
  }
}
query ModView_StreamWidgetQuery($channelLogin: String!) {
  channel: user(login: $channelLogin) {
    id
    lastBroadcast {
      id
      title
      game {
        id
        name
        boxArtURL(width: 85, height: 113)
      }
    }
    self {
      isEditor
    }
  }
  currentUser {
    id
  }
}
query AlertTextToSpeechVoicesQuery {
  allAlertTextToSpeechVoices {
    id
    name
    language
    languageCode
    previewSentence
    region
  }
}
query ExtensionCategoryPage($categoryID: ID!, $includeCurrentUser: Boolean!, $afterCursor: Cursor) {
  currentUser @include(if: $includeCurrentUser) {
    id
    cheer {
      id
    }
    login
    installedExtensions {
      id
      extension {
        id
      }
    }
  }
  extensionCategory(id: $categoryID) {
    id
    description
    name
    extensions(first: 21, after: $afterCursor) {
      edges {
        ...ExtensionCategoryPage_ExtensionEdge
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}

fragment ExtensionCategoryPage_ExtensionEdge on ExtensionEdge {
  cursor
  node {
    id
    authorName
    clientID
    iconURLs {
      discoverySplash
      square100
    }
    isBitsEnabled
    bitsSupportLevel
    name
    self {
      canInstall
    }
    sku
    state
    summary
    vendorCode
    version
    views {
      component {
        viewerURL
      }
      hidden {
        viewerURL
      }
      mobile {
        viewerURL
      }
      panel {
        viewerURL
      }
      videoOverlay {
        viewerURL
      }
    }
  }
}
mutation joinGuestStarSession($input: JoinGuestStarSessionInput!) {
  joinGuestStarSession(input: $input) {
    tokens {
      ...guestStarToken
    }
    error {
      code
    }
  }
}

fragment guestStarToken on GuestStarToken {
  id
  participantToken
  role
}
fragment bitsBadgeTier on BitsBadgeTier {
  isEnabled
  threshold
  unlockedUsersCount
  lastUpdated
  badge {
    id
    title
    image1x: imageURL(size: NORMAL)
    image2x: imageURL(size: DOUBLE)
    image4x: imageURL(size: QUADRUPLE)
    user {
      id
    }
  }
  emoticons {
    id
    token
    state
    suffix
  }
  canUploadEmoticons
}
mutation UpdateChannelClipSettings($input: UpdateChannelClipsSettingInput!) {
  updateChannelClipsSetting(input: $input) {
    channel {
      id
      clipsSettings {
        isClipsCreationEnabled
        creationRestrictedTo {
          isFollower
          isSubscriber
        }
        creationRestrictionOptions {
          followingLengthMinutes
        }
        categoryBlocklist {
          id
          name
          displayName
          boxArtURL(width: 40, height: 55)
        }
      }
    }
  }
}
query ChannelAnalyticsMinutesWatchedTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      minutesWatched {
        value
        timestamp
      }
    }
  }
}
query ShoutoutHighlightContentQuery($targetLogin: String!) {
  user(login: $targetLogin) {
    id
    channel {
      id
      home {
        shelves {
          categoryShelf(first: 3) {
            edges {
              node {
                id
                boxArtURL(width: 85, height: 113)
                displayName
              }
            }
          }
        }
      }
      schedule {
        id
        nextSegment {
          id
          categories {
            id
            displayName
          }
          hasReminder
          startAt
          endAt
          isCancelled
          title
        }
      }
    }
  }
}
fragment alertViewerImageFragment on AlertViewerImage {
  id
  url
  volume
  assetType
  assetMimeType
}
query GuestStarMods($login: String, $first: Int, $after: Cursor) {
  user(login: $login) {
    id
    mods(first: $first, after: $after) {
      edges {
        cursor
        grantedAt
        node {
          id
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
query GetMusicChartsQuery {
  experiment {
    musicCharts {
      items {
        id
        value
        previousRank
        chartData {
          ... on User {
            id
            description
            displayName
            profileImageURL(width: 150)
            bannerImageURL
            login
            tags {
              id
              localizedName
            }
            stream {
              id
            }
            roles {
              isPartner
            }
          }
        }
      }
      updatedAt
      type
    }
  }
}
query RolesPageQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
  }
}
fragment homeShelfUser on User {
  id
  displayName
  login
  primaryColorHex
  profileImageURL(width: 300)
  stream {
    id
    viewersCount
  }
}

query HomeShelfUsers($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    login
    displayName
    channel {
      id
      home {
        shelves {
          streamerShelf(first: 15, recommendationsContext: {platform: "web"}) {
            type
            edges {
              trackingID
              node {
                ...homeShelfUser
              }
            }
          }
        }
      }
    }
    primaryTeam {
      id
      name
      displayName
    }
  }
}
mutation CreatorHome_StartCommunityChallenge($input: UpdateCommunityPointsCommunityGoalInput!) {
  updateCommunityPointsCommunityGoal(input: $input) {
    error {
      code
    }
    goal {
      id
      status
      title
      type
    }
  }
}
query CharityViewTabsQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    subscriptionProducts {
      id
    }
  }
}
query ChannelAnalyticsClipViewsTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      clipViews {
        value
        timestamp
      }
      featuredClipViews {
        value
        timestamp
      }
      unfeaturedClipViews {
        value
        timestamp
      }
    }
  }
}
query AccessIsSubscriptionsEnabledQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    subscriptionProducts {
      id
    }
  }
}
fragment tokenizedTextFragment on TokenizedText {
  nodes {
    ...decoratedTokenFragment
    ...tokenizedCustomElementFragment
    ...tokenizedLinkElementFragment
    ...tokenizedGroupElementFragment
  }
}

fragment tokenizedCustomElementFragment on TokenizedCustomElement {
  nodes {
    ...decoratedTokenFragment
  }
  name
  identifier
}

fragment tokenizedLinkElementFragment on TokenizedLinkElement {
  nodes {
    ...decoratedTokenFragment
  }
  url
}

fragment tokenizedGroupElementFragment on TokenizedGroupElement {
  type
  items {
    nodes {
      ...decoratedTokenFragment
      ...tokenizedCustomElementFragment
      ...tokenizedLinkElementFragment
    }
  }
}

fragment decoratedTokenFragment on DecoratedToken {
  value {
    __typename
    ... on TokenizedTextToken {
      text
    }
    ... on User {
      userid: id
      displayName
      login
    }
    ... on Emote {
      emoteid: id
      token
      emotetext: text
    }
    ... on TokenizedTokenEmoteNotFound {
      id
    }
    ... on TokenizedIntegerToken {
      number
    }
    ... on TokenizedPercentToken {
      percent
    }
    ... on Game {
      id
      displayName
      name
    }
    ... on Money {
      amount
      minorUnits
      currencyCode
    }
    ... on UserDoesNotExist {
      key
      reason
    }
    ... on UserError {
      key
    }
    ... on TokenizedMappedIcon {
      name
    }
  }
  decorator {
    hasEmphasis
    hasHighlight
    highlightColor
  }
}
query SupportPanelGiftingSectionChannelLookup($channelLogin: String!) {
  channel(name: $channelLogin) {
    id
  }
}
query ChannelClipCore($clipSlug: ID!) {
  clip(slug: $clipSlug) {
    id
    videoOffsetSeconds
    broadcaster {
      ...coreChannelFragment
    }
    isFeatured
  }
}
query ExtensionRecommendations($categoryID: ID!) {
  currentUser {
    id
    login
    installedExtensions {
      id
      activationConfig {
        anchor
        slot
        state
      }
      extension {
        id
        clientID
        version
      }
    }
  }
  extensionCategory(id: $categoryID) {
    id
    extensions(first: 12) {
      edges {
        ...ExtensionRecommendationsExtensionEdge
      }
    }
  }
}

fragment ExtensionRecommendationsExtensionEdge on ExtensionEdge {
  node {
    id
    authorName
    clientID
    iconURLs {
      square100
    }
    isBitsEnabled
    bitsSupportLevel
    name
    self {
      canInstall
    }
    summary
    version
  }
}
fragment bansSharingRequest on BansSharingRequest {
  id
  requestingUser {
    id
    ...bansSharingUserInfo
  }
  requestedUser {
    id
    ...bansSharingUserInfo
  }
  requestedAt
  updatedAt
  status
}

fragment bansSharingUserInfo on User {
  displayName
  id
  login
  profileImageURL(width: 50)
  relationship(targetUserID: $channelID) {
    followedAt
    followedByAt
  }
  roles {
    isPartner
    isAffiliate
  }
}
fragment bansSharingSettings on BansSharingSettings {
  id
  isEnabled
  isModCommentsSharingDisabled
  shareWithTypes
  treatment
}
query ChannelAnalytics_StreamsPanel($channelLogin: String!, $startAt: Time!, $endAt: Time!) {
  channel: user(login: $channelLogin) {
    id
    login
    streamSessionsByInterval(startAt: $startAt, endAt: $endAt) {
      startedAt
      endedAt
      archiveVideo {
        id
        title
        previewThumbnailURL(height: 45, width: 80)
        owner {
          id
        }
      }
    }
  }
}
query ViewerDiscovery_FreeformTagsImpressions($channelID: ID!, $start: Time!, $end: Time!, $sortBy: FreeformTagSort, $sortOrder: SortOrder, $limit: Int) {
  freeformTagAnalytics(channelID: $channelID, start: $start, end: $end, sortBy: $sortBy, sortOrder: $sortOrder, limit: $limit) {
    items {
      ...freeformTagItemFragment
    }
  }
}

fragment freeformTagItemFragment on FreeformTagAnalytic {
  filterConversions
  filterImpressions
  tag
}
query AccessIsCommunityMomentsEnabledQuery($channelID: ID!) {
  experiment {
    isInCommunityMomentsExperiment(channelID: $channelID)
  }
}
mutation VideoManagerActions_CreateVideoAppeal($input: CreateVideoAppealInput!) {
  createVideoAppeal(input: $input) {
    videoID
  }
}
query ChannelAnalyticsPromotionDisplayTimeseriesStats($channelID: ID!, $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timeZone: String!) {
  user(id: $channelID) {
    id
    login
    timeseriesStats(startAt: $startAt, endAt: $endAt, granularity: $granularity, timeZone: $timeZone) {
      granularity
      promotionDisplay {
        value
        timestamp
      }
    }
  }
}
mutation ChannelTrailerSetup_SetChannelTrailer($input: SetChannelTrailerInput!) {
  setChannelTrailer(input: $input) {
    error
    channel {
      id
      trailer {
        video {
          id
        }
      }
    }
  }
}
query CommonHooks_SearchStreams($query: String!, $count: Int, $cursor: Cursor) {
  searchStreams(userQuery: $query, first: $count, after: $cursor) {
    edges {
      cursor
      node {
        id
        viewersCount
        previewImageURL(height: 112, width: 200)
        game {
          name
          id
        }
        broadcaster {
          id
          login
          displayName
          profileImageURL(width: 50)
          broadcastSettings {
            id
            title
          }
          roles {
            isPartner
          }
        }
      }
    }
    totalCount
    pageInfo {
      hasNextPage
      hasPreviousPage
    }
  }
}
query LiveNotificationsToggle_User($login: String!) {
  user(login: $login) {
    ...followButtonFragment
  }
}
query AlertAssetsSizeLimits($channelID: ID!) {
  customAssets: alertAssets(channelID: $channelID) {
    totalSize
  }
  alertAssetLimit(channelID: $channelID) {
    size
  }
}
mutation DashboardSettingsUserColorUpdate($input: UpdateUserColorsInput!) {
  updateUserColors(input: $input) {
    user {
      id
      primaryColorHex
    }
    error {
      code
    }
  }
}
query HappeningNowSettings {
  currentUser {
    id
    isChatHappeningNowEnabled
  }
}
query ViewerCardCommunityMomentCarousel_MomentBadge($channelLogin: String!, $userLogin: String!) {
  channelViewer(channelLogin: $channelLogin, userLogin: $userLogin) {
    id
    earnedBadges {
      id
      setID
      imageURL(size: DOUBLE)
    }
  }
}
query ExtensionQuickAction($extensionClientID: ID!, $version: String!) {
  extension(id: $extensionClientID, version: $version) {
    id
    name
    iconURLs {
      square100
    }
  }
}
fragment pollTopCommunityPointsContributor on PollTopCommunityPointsContributor {
  communityPointsAmount
  user {
    id
    displayName
  }
}
query IsInPostDNRTurboUpsellExperiment($clusterID: ID!) {
  experimentCluster(input: {clusterID: $clusterID}) {
    isEligible
    id
  }
}
query AccessIsChannelPointsEnabledQuery($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    channel {
      id
      communityPointsSettings {
        isEnabled
      }
    }
  }
}
mutation SetGuestStarSlotSettings($input: SetGuestStarSlotSettingsInput!) {
  setGuestStarSlotSettings(input: $input) {
    error {
      code
    }
  }
}
mutation QuickActionsCreateStreamMarker($input: CreateVideoBookmarkInput!) {
  createVideoBookmark(input: $input) {
    videoBookmark {
      id
      positionSeconds
    }
  }
}
query ExtensionPanel_BitsBalance {
  currentUser {
    id
    bitsBalance
  }
}
fragment squadStreamData on SquadStream {
  id
  status
  members {
    ...squadStreamMember
  }
  owner {
    id
  }
}

fragment squadStreamMember on User {
  id
  login
  displayName
  profileImageURL(width: 150)
}
fragment SegmentHasReminder on ScheduleSegment {
  hasReminder
}
mutation SetGuestStarChangelogReadTimestamp($input: SetGuestStarChangelogReadTimestampInput!) {
  setGuestStarChangelogReadTimestamp(input: $input) {
    __typename
    timestamp
  }
}
mutation DevExtensionInviteDeveloper {
  inviteDeveloper {
    error
  }
}
fragment pollVoteBreakdown on PollVoteBreakdown {
  total
  communityPoints
  base
  id
}
query CreatorMenu_RecentRaids($channelID: ID!) {
  user(id: $channelID) {
    id
    recentRaids {
      id
      goAt
      sourceChannel {
        id
        login
      }
    }
  }
  currentUser {
    id
  }
}
query DirectoryUpcomingPage($slug: String!) {
  game(slug: $slug) {
    id
    displayName
  }
}
query DashboardChannelSettings($channelLogin: String!) {
  currentUser {
    id
    login
  }
  user(login: $channelLogin) {
    id
    roles {
      isPartner
      isAffiliate
      isStaff
    }
    self {
      isEditor
    }
  }
}
query ChatInput_Badges {
  currentUser {
    id
    chatColor
    displayName
    login
  }
}
query TeamsDashboard_TimeStreamed($teamName: String!, $teamMembers: [ID!], $startAt: Time!, $endAt: Time!, $granularity: Granularity!, $timezone: String!) {
  team(name: $teamName) {
    id
    creatorTimeseriesMetrics(startAt: $startAt, endAt: $endAt, channelIDs: $teamMembers, granularity: $granularity, timeZone: $timezone) {
      metric: timeStreamed {
        items {
          timestamp
          value
        }
        total
      }
    }
  }
}
query TeamsDashboard_MembersWithRevenue($teamName: String!, $cursor: Cursor, $limit: Int = 100) {
  team(name: $teamName) {
    id
    membersByMetricsFilter(first: $limit, metricsRevealedFilter: REVENUE, after: $cursor) {
      pageInfo {
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          login
          displayName
          profileImageURL(width: 70)
        }
      }
    }
  }
}
mutation EditProfile_CreateProfileImageUploadURL($input: CreateProfileImageUploadURLInput!) {
  createProfileImageUploadURL(input: $input) {
    uploadID
    uploadURL
    error {
      code
    }
  }
}
fragment useLiveGame on Game {
  id
  slug
  name
  displayName
}

query UseLiveBroadcast($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    lastBroadcast {
      id
      title
      game {
        ...useLiveGame
      }
    }
  }
}
mutation AddViewerToRTJQueue($input: AddViewerToRTJQueueInput!) {
  addViewerToRTJQueue(input: $input) {
    heartbeatIntervalMilliseconds
    error {
      code
    }
  }
}
mutation CreateRTJQueue($input: CreateRTJQueueInput!) {
  createRTJQueue(input: $input) {
    error {
      code
    }
  }
}
mutation UpdateOrganizationMemberRole($input: UpdateOrganizationMemberRoleInput!) {
  updateOrganizationMemberRole(input: $input) {
    error {
      code
    }
    organizationMember {
      id
      role
    }
  }
}
mutation UpdateChannelVodsSettings($input: UpdateChannelVODSettingsInput!) {
  updateChannelVODSettings(input: $input) {
    channel {
      id
      vodSettings {
        shouldAlwaysPublishVODs
        categoryBlocklist {
          id
          name
          displayName
          boxArtURL(width: 40, height: 55)
        }
      }
    }
  }
}
mutation AcknowledgeAlertsAudioScanningDisclosure($input: AcknowledgeAlertsAudioScanningDisclosureInput!) {
  acknowledgeAlertsAudioScanningDisclosure(input: $input) {
    error
    acknowledgementStatus {
      id
      hasAcknowledgedAudioScanningDisclosure
    }
  }
}
mutation UpdateRTJQueueStatus($input: UpdateRTJQueueStatusInput!) {
  updateRTJQueueStatus(input: $input) {
    error {
      code
    }
  }
}
query Search_SearchGameResultCard_Game($name: String!) {
  game(name: $name) {
    id
    boxArtURL(width: 40, height: 55)
  }
}
mutation UpdateViewerStreamFeedback($input: UpdateViewerStreamFeedbackInput!) {
  updateViewerStreamFeedback(input: $input) {
    error {
      code
    }
  }
}
query ClipsModalIsFollowing($channelLogin: String!) {
  user(login: $channelLogin) {
    id
    self {
      follower {
        followedAt
      }
    }
  }
}
mutation ChannelViewerMilestoneSettingsMutation($input: UpdateChannelViewerMilestoneSettingsInput!) {
  updateChannelViewerMilestoneSettings(input: $input) {
    error {
      code
    }
    settings {
      id
      isWatchStreakOptOut
    }
  }
}
mutation ExtensionsDiscoveryPage_InstallExtension($input: InstallExtensionInput!) {
  installExtension(input: $input) {
    installedExtension {
      id
      activationConfig {
        state
      }
      extension {
        id
        clientID
        version
      }
      requiredActions {
        type
      }
      permittedFeatures {
        canSendChat
        canRetrieveSubscriptionStatus
        canUseBits
        dynamicManagement {
          game {
            id
            displayName
          }
          isManaged
        }
      }
    }
  }
}
mutation ExtensionManagementPage_UninstallExtension($input: UninstallExtensionInput!) {
  uninstallExtension(input: $input) {
    id
  }
}
fragment watchStreakMilestoneFragment on WatchStreakMilestone {
  watchStreakMilestone {
    id
    value
    category
    achievementTimestamp
    shareStatus
  }
  watchStreakThreshold
  watchStreakCopoBonus
}
query DevBountyBoardDashboard_CompanySettings($orgId: ID!) {
  organization(id: $orgId) {
    id
    brandPortalSettings {
      isEnabled
    }
  }
}
fragment permittedTerm on ChannelPermittedTerm {
  id
  phrase
  expiresAt
  isModEditable
}
query ExtensionConfigure {
  currentUser {
    id
    installedExtensions {
      id
      activationConfig {
        anchor
        slot
        state
      }
      extension {
        id
        clientID
        iconURLs {
          square100
        }
        hasChatSupport
        isBitsEnabled
        bitsSupportLevel
        name
        sku
        state
        subscriptionsSupportLevel
        vendorCode
        version
        views {
          component {
            viewerURL
          }
          hidden {
            viewerURL
          }
          mobile {
            viewerURL
          }
          panel {
            viewerURL
          }
          videoOverlay {
            viewerURL
          }
        }
      }
      permittedFeatures {
        canSendChat
        canRetrieveSubscriptionStatus
        canUseBits
        dynamicManagement {
          game {
            id
            displayName
          }
          isManaged
        }
      }
      requiredActions {
        type
      }
      self {
        canActivate
      }
    }
    panels {
      id
      type
      ... on ExtensionPanel {
        slotID
      }
    }
  }
}
mutation UpdateConsentMutation($input: UpdateConsentInput!, $includeNewCookieConsentFields: Boolean!, $includeTCData: Boolean!) {
  updateConsent(input: $input) {
    consent {
      id
      isDeniedUnderage
      privacyLawName
      shouldShowNotification
      shouldShowSettingsPage
      shouldShowDismissButton
      vendorStatus {
        name
        consentStatus
        hasUserSetConsent
        isVisible
      }
      vendorConsentStatus @include(if: $includeNewCookieConsentFields) {
        ...vendorConsentStatuses
      }
      gdprUserPreferences @include(if: $includeTCData) {
        ...gdprUserPreferences
      }
      dmaUserPreferences @include(if: $includeTCData) {
        ...dmaUserPreferences
      }
    }
  }
}
query GetDisplayName($login: String!) {
  user(login: $login) {
    id
    login
    displayName
  }
}
mutation BulkDenyUnbanRequests($input: BulkDenyUnbanRequestInput!) {
  bulkDenyUnbanRequest(input: $input) {
    unbanRequests {
      id
      status
    }
    error {
      code
    }
  }
}
query DropCampaignDetails($dropID: ID!, $channelLogin: ID!) {
  user(id: $channelLogin) {
    id
    dropCampaign(id: $dropID) {
      id
      self {
        isAccountConnected
      }
      allow {
        channels {
          id
          displayName
          name
        }
        isEnabled
      }
      accountLinkURL
      description
      detailsURL
      endAt
      eventBasedDrops {
        id
        benefitEdges {
          benefit {
            id
            createdAt
            entitlementLimit
            game {
              id
              name
            }
            imageAssetURL
            isIosAvailable
            name
            ownerOrganization {
              id
              name
            }
          }
          entitlementLimit
        }
        claimDurationSeconds
        conditions {
          key
          operator
          value
        }
        endAt
        missionDescription
        missionName
        name
        startAt
      }
      game {
        id
        slug
        displayName
      }
      imageURL
      name
      owner {
        id
        name
      }
      startAt
      status
      timeBasedDrops {
        id
        benefitEdges {
          benefit {
            id
            createdAt
            entitlementLimit
            game {
              id
              name
            }
            imageAssetURL
            isIosAvailable
            name
            ownerOrganization {
              id
              name
            }
          }
          entitlementLimit
        }
        endAt
        name
        preconditionDrops {
          id
        }
        requiredMinutesWatched
        startAt
      }
    }
  }
}
fragment dropCampaign on DropCampaign {
  id
  name
  owner {
    id
    name
  }
  game {
    id
    displayName
    boxArtURL(width: 120, height: 160)
  }
  status
  startAt
  endAt
  detailsURL
  accountLinkURL
  self {
    isAccountConnected
  }
}
mutation PromoteViewerFromRTJQueue($input: PromoteViewerFromRTJQueueInput!) {
  promoteViewerFromRTJQueue(input: $input) {
    error {
      code
    }
  }
}
query VideoManager_Utils_Tracking_Video($videoID: ID) {
  video(id: $videoID) {
    id
    owner {
      id
      login
    }
  }
}
